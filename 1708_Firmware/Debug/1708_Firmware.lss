
1708_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00803800  000039f7  00003aab  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000043  0000b9b4  000039b4  00003a68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002aa  00803810  00803810  00003abb  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003abb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b18  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a8  00000000  00000000  00003b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000473b  00000000  00000000  00003d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000223f  00000000  00000000  0000843b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d6e  00000000  00000000  0000a67a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000064c  00000000  00000000  0000c3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018e2  00000000  00000000  0000ca34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000244e  00000000  00000000  0000e316  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  00010764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__ctors_end>
       4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      14:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      18:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_6>
      1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      30:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      40:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      4c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      64:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__vector_25>
      68:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      6c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_27>
      70:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      78:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	6e 61       	ori	r22, 0x1E	; 30
      7e:	6e 00       	.word	0x006e	; ????

00000080 <__c.2332>:
      80:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      90:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      a0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      b0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      c0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      d0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      e0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      f0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     100:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     110:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     120:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     130:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     140:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     150:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     160:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     170:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000017e <pstr_nan>:
     17e:	4e 41 4e                                            NAN

00000181 <pstr_inity>:
     181:	49 4e 49 54 59                                      INITY

00000186 <pstr_inf>:
     186:	49 4e 46                                            INF

00000189 <pwr_m10>:
     189:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     199:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001a1 <pwr_p10>:
     1a1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1b1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000001ba <__ctors_end>:
     1ba:	11 24       	eor	r1, r1
     1bc:	1f be       	out	0x3f, r1	; 63
     1be:	cf ef       	ldi	r28, 0xFF	; 255
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df e3       	ldi	r29, 0x3F	; 63
     1c4:	de bf       	out	0x3e, r29	; 62

000001c6 <__do_copy_data>:
     1c6:	18 e3       	ldi	r17, 0x38	; 56
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	b8 e3       	ldi	r27, 0x38	; 56
     1cc:	e7 ef       	ldi	r30, 0xF7	; 247
     1ce:	f9 e3       	ldi	r31, 0x39	; 57
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__do_copy_data+0x10>
     1d2:	05 90       	lpm	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	a0 31       	cpi	r26, 0x10	; 16
     1d8:	b1 07       	cpc	r27, r17
     1da:	d9 f7       	brne	.-10     	; 0x1d2 <__do_copy_data+0xc>

000001dc <__do_clear_bss>:
     1dc:	2a e3       	ldi	r18, 0x3A	; 58
     1de:	a0 e1       	ldi	r26, 0x10	; 16
     1e0:	b8 e3       	ldi	r27, 0x38	; 56
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <.do_clear_bss_start>

000001e4 <.do_clear_bss_loop>:
     1e4:	1d 92       	st	X+, r1

000001e6 <.do_clear_bss_start>:
     1e6:	aa 3b       	cpi	r26, 0xBA	; 186
     1e8:	b2 07       	cpc	r27, r18
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <.do_clear_bss_loop>
     1ec:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <main>
     1f0:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <_exit>

000001f4 <__bad_interrupt>:
     1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f8 <__vector_27>:
	"RS",
	"SU"
};

ISR(USART0_RXC_vect)
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if (handle_uart_flag == 0)
     20e:	80 91 7a 39 	lds	r24, 0x397A	; 0x80397a <handle_uart_flag>
     212:	90 91 7b 39 	lds	r25, 0x397B	; 0x80397b <handle_uart_flag+0x1>
     216:	89 2b       	or	r24, r25
     218:	e9 f5       	brne	.+122    	; 0x294 <__vector_27+0x9c>
	{
		rev = USART0_RXDATAL;
     21a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     21e:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <rev>
		if (rev == '#' && v == 0)
     222:	83 32       	cpi	r24, 0x23	; 35
     224:	b1 f4       	brne	.+44     	; 0x252 <__vector_27+0x5a>
     226:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     22a:	91 11       	cpse	r25, r1
     22c:	12 c0       	rjmp	.+36     	; 0x252 <__vector_27+0x5a>
		{
			v = 1;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			memset(recv,0,sizeof(recv));
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	ec e9       	ldi	r30, 0x9C	; 156
     238:	f9 e3       	ldi	r31, 0x39	; 57
     23a:	df 01       	movw	r26, r30
     23c:	1d 92       	st	X+, r1
     23e:	8a 95       	dec	r24
     240:	e9 f7       	brne	.-6      	; 0x23c <__vector_27+0x44>
			recv[v - 1] = rev;
     242:	e0 91 89 39 	lds	r30, 0x3989	; 0x803989 <v>
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	e5 56       	subi	r30, 0x65	; 101
     24a:	f6 4c       	sbci	r31, 0xC6	; 198
     24c:	83 e2       	ldi	r24, 0x23	; 35
     24e:	80 83       	st	Z, r24
     250:	23 c0       	rjmp	.+70     	; 0x298 <__vector_27+0xa0>
		}
		else if (v > 0) {
     252:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     256:	99 23       	and	r25, r25
     258:	d1 f0       	breq	.+52     	; 0x28e <__vector_27+0x96>
			recv[v] = rev;
     25a:	e0 91 89 39 	lds	r30, 0x3989	; 0x803989 <v>
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	e4 56       	subi	r30, 0x64	; 100
     262:	f6 4c       	sbci	r31, 0xC6	; 198
     264:	80 83       	st	Z, r24
			v++;
     266:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     26a:	9f 5f       	subi	r25, 0xFF	; 255
     26c:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <v>

			if (v >= MAX_BUFFER_SIZE)
     270:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     274:	99 23       	and	r25, r25
     276:	14 f4       	brge	.+4      	; 0x27c <__vector_27+0x84>
			{
				v = 0;
     278:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <v>
			}
			
			if (rev == 0x0d)
     27c:	8d 30       	cpi	r24, 0x0D	; 13
     27e:	61 f4       	brne	.+24     	; 0x298 <__vector_27+0xa0>
			{
				handle_uart_flag = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	80 93 7a 39 	sts	0x397A, r24	; 0x80397a <handle_uart_flag>
     288:	90 93 7b 39 	sts	0x397B, r25	; 0x80397b <handle_uart_flag+0x1>
     28c:	05 c0       	rjmp	.+10     	; 0x298 <__vector_27+0xa0>
			}
			} else {
			v = 0;
     28e:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <v>
     292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_27+0xa0>
		}
		} else {
		USART0_RXDATAL;  // discard data when processing
     294:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
	}
	USART0_STATUS |= ( 1 << USART_RXCIE_bp);
     298:	e4 e0       	ldi	r30, 0x04	; 4
     29a:	f8 e0       	ldi	r31, 0x08	; 8
     29c:	80 81       	ld	r24, Z
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	80 83       	st	Z, r24
}
     2a2:	ff 91       	pop	r31
     2a4:	ef 91       	pop	r30
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <__vector_6>:

ISR(RTC_CNT_vect) {
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	8f 93       	push	r24
     2c4:	ef 93       	push	r30
     2c6:	ff 93       	push	r31
	read_data_flag = 1;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <read_data_flag>
	RTC_INTFLAGS |= (1 << RTC_OVF_bp);
     2ce:	e3 e4       	ldi	r30, 0x43	; 67
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	80 81       	ld	r24, Z
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	80 83       	st	Z, r24
}
     2d8:	ff 91       	pop	r31
     2da:	ef 91       	pop	r30
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int ucAddress)
{
     2e8:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     2ea:	e0 e0       	ldi	r30, 0x00	; 0
     2ec:	f0 e1       	ldi	r31, 0x10	; 16
     2ee:	92 81       	ldd	r25, Z+2	; 0x02
     2f0:	91 fd       	sbrc	r25, 1
     2f2:	fd cf       	rjmp	.-6      	; 0x2ee <EEPROM_read+0x6>

	return *(uint8_t *)(EEPROM_START + ucAddress);
     2f4:	f9 01       	movw	r30, r18
     2f6:	fc 5e       	subi	r31, 0xEC	; 236
}
     2f8:	80 81       	ld	r24, Z
     2fa:	08 95       	ret

000002fc <EEPROM_write>:

void EEPROM_write(unsigned int ucAddress, unsigned char ucData)
{
     2fc:	9c 01       	movw	r18, r24

	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	f0 e1       	ldi	r31, 0x10	; 16
     302:	92 81       	ldd	r25, Z+2	; 0x02
     304:	91 fd       	sbrc	r25, 1
     306:	fd cf       	rjmp	.-6      	; 0x302 <EEPROM_write+0x6>

	*(uint8_t *)(EEPROM_START + ucAddress) = ucData;
     308:	f9 01       	movw	r30, r18
     30a:	fc 5e       	subi	r31, 0xEC	; 236
     30c:	60 83       	st	Z, r22

	CCP = CCP_SPM_gc;
     30e:	8d e9       	ldi	r24, 0x9D	; 157
     310:	84 bf       	out	0x34, r24	; 52
	NVMCTRL.CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     318:	08 95       	ret

0000031a <get_avg_data>:
}


void get_avg_data(float *temp, int type) {
     31a:	6f 92       	push	r6
     31c:	7f 92       	push	r7
     31e:	8f 92       	push	r8
     320:	9f 92       	push	r9
     322:	af 92       	push	r10
     324:	bf 92       	push	r11
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
	
	float sum = 0;
	int data_count = 0;
	int i = 0;
	int start_index = 0;
	if (data_index == 0) {
     336:	20 91 7e 39 	lds	r18, 0x397E	; 0x80397e <data_index>
     33a:	30 91 7f 39 	lds	r19, 0x397F	; 0x80397f <data_index+0x1>
     33e:	23 2b       	or	r18, r19
     340:	51 f4       	brne	.+20     	; 0x356 <get_avg_data+0x3c>
		(*temp) = ERROR_DATA;
     342:	4c e5       	ldi	r20, 0x5C	; 92
     344:	5f ef       	ldi	r21, 0xFF	; 255
     346:	69 e7       	ldi	r22, 0x79	; 121
     348:	74 e4       	ldi	r23, 0x44	; 68
     34a:	fc 01       	movw	r30, r24
     34c:	40 83       	st	Z, r20
     34e:	51 83       	std	Z+1, r21	; 0x01
     350:	62 83       	std	Z+2, r22	; 0x02
     352:	73 83       	std	Z+3, r23	; 0x03
		return;
     354:	ea c0       	rjmp	.+468    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
	}
	
	float* data_arr = NULL;
	
	switch(type) {
     356:	61 30       	cpi	r22, 0x01	; 1
     358:	71 05       	cpc	r23, r1
     35a:	41 f0       	breq	.+16     	; 0x36c <get_avg_data+0x52>
     35c:	62 30       	cpi	r22, 0x02	; 2
     35e:	71 05       	cpc	r23, r1
     360:	41 f0       	breq	.+16     	; 0x372 <get_avg_data+0x58>
     362:	67 2b       	or	r22, r23
     364:	49 f4       	brne	.+18     	; 0x378 <get_avg_data+0x5e>
		case 0: 
			data_arr = data_arr_temp;
     366:	00 e0       	ldi	r16, 0x00	; 0
     368:	19 e3       	ldi	r17, 0x39	; 57
     36a:	08 c0       	rjmp	.+16     	; 0x37c <get_avg_data+0x62>
			break;
		case 1:
			data_arr = data_arr_rh;
     36c:	08 e8       	ldi	r16, 0x88	; 136
     36e:	18 e3       	ldi	r17, 0x38	; 56
			break;
     370:	05 c0       	rjmp	.+10     	; 0x37c <get_avg_data+0x62>
		case 2:
			data_arr = data_arr_rh_temp;
     372:	00 e1       	ldi	r16, 0x10	; 16
     374:	18 e3       	ldi	r17, 0x38	; 56
			break;
     376:	02 c0       	rjmp	.+4      	; 0x37c <get_avg_data+0x62>
	if (data_index == 0) {
		(*temp) = ERROR_DATA;
		return;
	}
	
	float* data_arr = NULL;
     378:	00 e0       	ldi	r16, 0x00	; 0
     37a:	10 e0       	ldi	r17, 0x00	; 0
		case 2:
			data_arr = data_arr_rh_temp;
			break;
	}
	
	if (avg_level == 0) {
     37c:	20 91 8b 39 	lds	r18, 0x398B	; 0x80398b <avg_level>
     380:	30 91 8c 39 	lds	r19, 0x398C	; 0x80398c <avg_level+0x1>
     384:	21 15       	cp	r18, r1
     386:	31 05       	cpc	r19, r1
     388:	b9 f4       	brne	.+46     	; 0x3b8 <get_avg_data+0x9e>
		(*temp) = data_arr[data_index - 1];
     38a:	20 91 7e 39 	lds	r18, 0x397E	; 0x80397e <data_index>
     38e:	30 91 7f 39 	lds	r19, 0x397F	; 0x80397f <data_index+0x1>
     392:	21 50       	subi	r18, 0x01	; 1
     394:	30 4c       	sbci	r19, 0xC0	; 192
     396:	22 0f       	add	r18, r18
     398:	33 1f       	adc	r19, r19
     39a:	22 0f       	add	r18, r18
     39c:	33 1f       	adc	r19, r19
     39e:	f8 01       	movw	r30, r16
     3a0:	e2 0f       	add	r30, r18
     3a2:	f3 1f       	adc	r31, r19
     3a4:	40 81       	ld	r20, Z
     3a6:	51 81       	ldd	r21, Z+1	; 0x01
     3a8:	62 81       	ldd	r22, Z+2	; 0x02
     3aa:	73 81       	ldd	r23, Z+3	; 0x03
     3ac:	fc 01       	movw	r30, r24
     3ae:	40 83       	st	Z, r20
     3b0:	51 83       	std	Z+1, r21	; 0x01
     3b2:	62 83       	std	Z+2, r22	; 0x02
     3b4:	73 83       	std	Z+3, r23	; 0x03
     3b6:	b9 c0       	rjmp	.+370    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     3b8:	4c 01       	movw	r8, r24
		} else {
		if (data_overflow_flag && data_index - avg_level * DATA_SIZE_PER_AVG_LEVEL < 0) { // data overflowed
     3ba:	80 91 78 39 	lds	r24, 0x3978	; 0x803978 <data_overflow_flag>
     3be:	90 91 79 39 	lds	r25, 0x3979	; 0x803979 <data_overflow_flag+0x1>
     3c2:	89 2b       	or	r24, r25
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <get_avg_data+0xae>
     3c6:	62 c0       	rjmp	.+196    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     3c8:	39 01       	movw	r6, r18
     3ca:	66 0c       	add	r6, r6
     3cc:	77 1c       	adc	r7, r7
     3ce:	62 0e       	add	r6, r18
     3d0:	73 1e       	adc	r7, r19
     3d2:	71 94       	neg	r7
     3d4:	61 94       	neg	r6
     3d6:	71 08       	sbc	r7, r1
     3d8:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
     3dc:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
     3e0:	86 0d       	add	r24, r6
     3e2:	97 1d       	adc	r25, r7
     3e4:	99 23       	and	r25, r25
     3e6:	0c f0       	brlt	.+2      	; 0x3ea <get_avg_data+0xd0>
     3e8:	51 c0       	rjmp	.+162    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			for(i = 0; i < data_index; i++) {
     3ea:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
     3ee:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
     3f2:	18 16       	cp	r1, r24
     3f4:	19 06       	cpc	r1, r25
     3f6:	dc f4       	brge	.+54     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3f8:	58 01       	movw	r10, r16
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	d0 e0       	ldi	r29, 0x00	; 0
     3fe:	c1 2c       	mov	r12, r1
     400:	d1 2c       	mov	r13, r1
     402:	76 01       	movw	r14, r12
				sum	+= data_arr[i];
     404:	f5 01       	movw	r30, r10
     406:	21 91       	ld	r18, Z+
     408:	31 91       	ld	r19, Z+
     40a:	41 91       	ld	r20, Z+
     40c:	51 91       	ld	r21, Z+
     40e:	5f 01       	movw	r10, r30
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	0e 94 ac 13 	call	0x2758	; 0x2758 <__addsf3>
     418:	6b 01       	movw	r12, r22
     41a:	7c 01       	movw	r14, r24
				data_count++;
     41c:	21 96       	adiw	r28, 0x01	; 1
	
	if (avg_level == 0) {
		(*temp) = data_arr[data_index - 1];
		} else {
		if (data_overflow_flag && data_index - avg_level * DATA_SIZE_PER_AVG_LEVEL < 0) { // data overflowed
			for(i = 0; i < data_index; i++) {
     41e:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
     422:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
     426:	c8 17       	cp	r28, r24
     428:	d9 07       	cpc	r29, r25
     42a:	64 f3       	brlt	.-40     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     42c:	05 c0       	rjmp	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     42e:	c0 e0       	ldi	r28, 0x00	; 0
     430:	d0 e0       	ldi	r29, 0x00	; 0
     432:	c1 2c       	mov	r12, r1
     434:	d1 2c       	mov	r13, r1
     436:	76 01       	movw	r14, r12
				sum	+= data_arr[i];
				data_count++;
			}
			start_index = DATA_RETAIN_SIZE - avg_level * DATA_SIZE_PER_AVG_LEVEL + data_index;
     438:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
     43c:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
     440:	fe e1       	ldi	r31, 0x1E	; 30
     442:	6f 0e       	add	r6, r31
     444:	71 1c       	adc	r7, r1
     446:	68 0e       	add	r6, r24
     448:	79 1e       	adc	r7, r25
			for(i = start_index; i < DATA_RETAIN_SIZE; i++) {
     44a:	2e e1       	ldi	r18, 0x1E	; 30
     44c:	62 16       	cp	r6, r18
     44e:	71 04       	cpc	r7, r1
     450:	0c f0       	brlt	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	5a c0       	rjmp	.+180    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     454:	53 01       	movw	r10, r6
     456:	aa 0c       	add	r10, r10
     458:	bb 1c       	adc	r11, r11
     45a:	aa 0c       	add	r10, r10
     45c:	bb 1c       	adc	r11, r11
     45e:	a0 0e       	add	r10, r16
     460:	b1 1e       	adc	r11, r17
     462:	08 58       	subi	r16, 0x88	; 136
     464:	1f 4f       	sbci	r17, 0xFF	; 255
				sum += data_arr[i];
     466:	f5 01       	movw	r30, r10
     468:	21 91       	ld	r18, Z+
     46a:	31 91       	ld	r19, Z+
     46c:	41 91       	ld	r20, Z+
     46e:	51 91       	ld	r21, Z+
     470:	5f 01       	movw	r10, r30
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 ac 13 	call	0x2758	; 0x2758 <__addsf3>
     47a:	6b 01       	movw	r12, r22
     47c:	7c 01       	movw	r14, r24
			for(i = 0; i < data_index; i++) {
				sum	+= data_arr[i];
				data_count++;
			}
			start_index = DATA_RETAIN_SIZE - avg_level * DATA_SIZE_PER_AVG_LEVEL + data_index;
			for(i = start_index; i < DATA_RETAIN_SIZE; i++) {
     47e:	0a 15       	cp	r16, r10
     480:	1b 05       	cpc	r17, r11
     482:	89 f7       	brne	.-30     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     484:	c6 19       	sub	r28, r6
     486:	d7 09       	sbc	r29, r7
     488:	6e 96       	adiw	r28, 0x1e	; 30
     48a:	3e c0       	rjmp	.+124    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
				data_count++;
			}
			
			
			} else {
			start_index = data_index - avg_level * DATA_SIZE_PER_AVG_LEVEL;
     48c:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
     490:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
     494:	a9 01       	movw	r20, r18
     496:	44 0f       	add	r20, r20
     498:	55 1f       	adc	r21, r21
     49a:	24 0f       	add	r18, r20
     49c:	35 1f       	adc	r19, r21
     49e:	82 1b       	sub	r24, r18
     4a0:	93 0b       	sbc	r25, r19
     4a2:	12 f4       	brpl	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
			if (start_index < 0) start_index = 0;
			for(i = start_index; i < data_index; i++) {
     4a8:	20 91 7e 39 	lds	r18, 0x397E	; 0x80397e <data_index>
     4ac:	30 91 7f 39 	lds	r19, 0x397F	; 0x80397f <data_index+0x1>
     4b0:	82 17       	cp	r24, r18
     4b2:	93 07       	cpc	r25, r19
     4b4:	24 f5       	brge	.+72     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4b6:	5c 01       	movw	r10, r24
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	08 0f       	add	r16, r24
     4c2:	19 1f       	adc	r17, r25
     4c4:	c0 e0       	ldi	r28, 0x00	; 0
     4c6:	d0 e0       	ldi	r29, 0x00	; 0
     4c8:	c1 2c       	mov	r12, r1
     4ca:	d1 2c       	mov	r13, r1
     4cc:	76 01       	movw	r14, r12
				sum += data_arr[i];
     4ce:	f8 01       	movw	r30, r16
     4d0:	21 91       	ld	r18, Z+
     4d2:	31 91       	ld	r19, Z+
     4d4:	41 91       	ld	r20, Z+
     4d6:	51 91       	ld	r21, Z+
     4d8:	8f 01       	movw	r16, r30
     4da:	c7 01       	movw	r24, r14
     4dc:	b6 01       	movw	r22, r12
     4de:	0e 94 ac 13 	call	0x2758	; 0x2758 <__addsf3>
     4e2:	6b 01       	movw	r12, r22
     4e4:	7c 01       	movw	r14, r24
				data_count++;
     4e6:	21 96       	adiw	r28, 0x01	; 1
			
			
			} else {
			start_index = data_index - avg_level * DATA_SIZE_PER_AVG_LEVEL;
			if (start_index < 0) start_index = 0;
			for(i = start_index; i < data_index; i++) {
     4e8:	20 91 7e 39 	lds	r18, 0x397E	; 0x80397e <data_index>
     4ec:	30 91 7f 39 	lds	r19, 0x397F	; 0x80397f <data_index+0x1>
     4f0:	ce 01       	movw	r24, r28
     4f2:	8a 0d       	add	r24, r10
     4f4:	9b 1d       	adc	r25, r11
     4f6:	82 17       	cp	r24, r18
     4f8:	93 07       	cpc	r25, r19
     4fa:	4c f3       	brlt	.-46     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4fc:	05 c0       	rjmp	.+10     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     4fe:	c0 e0       	ldi	r28, 0x00	; 0
     500:	d0 e0       	ldi	r29, 0x00	; 0
     502:	c1 2c       	mov	r12, r1
     504:	d1 2c       	mov	r13, r1
     506:	76 01       	movw	r14, r12
				data_count++;
			}
		}
		
		
		(*temp) = sum / (float)data_count;
     508:	be 01       	movw	r22, r28
     50a:	dd 0f       	add	r29, r29
     50c:	88 0b       	sbc	r24, r24
     50e:	99 0b       	sbc	r25, r25
     510:	0e 94 91 14 	call	0x2922	; 0x2922 <__floatsisf>
     514:	9b 01       	movw	r18, r22
     516:	ac 01       	movw	r20, r24
     518:	c7 01       	movw	r24, r14
     51a:	b6 01       	movw	r22, r12
     51c:	0e 94 1d 14 	call	0x283a	; 0x283a <__divsf3>
     520:	f4 01       	movw	r30, r8
     522:	60 83       	st	Z, r22
     524:	71 83       	std	Z+1, r23	; 0x01
     526:	82 83       	std	Z+2, r24	; 0x02
     528:	93 83       	std	Z+3, r25	; 0x03
	}

	
	
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	8f 90       	pop	r8
     542:	7f 90       	pop	r7
     544:	6f 90       	pop	r6
     546:	08 95       	ret

00000548 <build_output>:


void build_output(float data)
{
	v--;
     548:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	20 93 89 39 	sts	0x3989, r18	; 0x803989 <v>
	write_enabled = 0;
     552:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+09.2f", data);
     556:	30 91 89 39 	lds	r19, 0x3989	; 0x803989 <v>
     55a:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	7f 93       	push	r23
     564:	6f 93       	push	r22
     566:	84 eb       	ldi	r24, 0xB4	; 180
     568:	99 eb       	ldi	r25, 0xB9	; 185
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	80 e8       	ldi	r24, 0x80	; 128
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	83 1b       	sub	r24, r19
     574:	91 09       	sbc	r25, r1
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	82 2f       	mov	r24, r18
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	84 56       	subi	r24, 0x64	; 100
     580:	96 4c       	sbci	r25, 0xC6	; 198
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	0e 94 be 1a 	call	0x357c	; 0x357c <snprintf>
     58a:	80 93 81 39 	sts	0x3981, r24	; 0x803981 <fstr_size>
     58e:	90 93 82 39 	sts	0x3982, r25	; 0x803982 <fstr_size+0x1>
	v += fstr_size;
     592:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     596:	89 0f       	add	r24, r25
     598:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
	send_size = v;
     59c:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
     5a6:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
	send_enable = 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	80 93 85 39 	sts	0x3985, r24	; 0x803985 <send_enable>
     5b2:	90 93 86 39 	sts	0x3986, r25	; 0x803986 <send_enable+0x1>
}
     5b6:	8d b7       	in	r24, 0x3d	; 61
     5b8:	9e b7       	in	r25, 0x3e	; 62
     5ba:	0a 96       	adiw	r24, 0x0a	; 10
     5bc:	8d bf       	out	0x3d, r24	; 61
     5be:	9e bf       	out	0x3e, r25	; 62
     5c0:	08 95       	ret

000005c2 <build_cal_out_put>:

void build_cal_out_put(float a, float b, float c)
{
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	b2 2e       	mov	r11, r18
     5dc:	a3 2e       	mov	r10, r19
     5de:	94 2e       	mov	r9, r20
     5e0:	85 2e       	mov	r8, r21
	v--;
     5e2:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
     5e6:	21 50       	subi	r18, 0x01	; 1
     5e8:	20 93 89 39 	sts	0x3989, r18	; 0x803989 <v>
	write_enabled = 0;
     5ec:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", a);
     5f0:	30 91 89 39 	lds	r19, 0x3989	; 0x803989 <v>
     5f4:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
     5f8:	9f 93       	push	r25
     5fa:	8f 93       	push	r24
     5fc:	7f 93       	push	r23
     5fe:	6f 93       	push	r22
     600:	0f 2e       	mov	r0, r31
     602:	fc eb       	ldi	r31, 0xBC	; 188
     604:	cf 2e       	mov	r12, r31
     606:	f9 eb       	ldi	r31, 0xB9	; 185
     608:	df 2e       	mov	r13, r31
     60a:	f0 2d       	mov	r31, r0
     60c:	df 92       	push	r13
     60e:	cf 92       	push	r12
     610:	c0 e8       	ldi	r28, 0x80	; 128
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	ce 01       	movw	r24, r28
     616:	83 1b       	sub	r24, r19
     618:	91 09       	sbc	r25, r1
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	82 2f       	mov	r24, r18
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	84 56       	subi	r24, 0x64	; 100
     624:	96 4c       	sbci	r25, 0xC6	; 198
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	0e 94 be 1a 	call	0x357c	; 0x357c <snprintf>
     62e:	80 93 81 39 	sts	0x3981, r24	; 0x803981 <fstr_size>
     632:	90 93 82 39 	sts	0x3982, r25	; 0x803982 <fstr_size+0x1>
	v += fstr_size;
     636:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     63a:	89 0f       	add	r24, r25
     63c:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", b);
     640:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     644:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	df 92       	push	r13
     652:	cf 92       	push	r12
     654:	9e 01       	movw	r18, r28
     656:	29 1b       	sub	r18, r25
     658:	31 09       	sbc	r19, r1
     65a:	3f 93       	push	r19
     65c:	2f 93       	push	r18
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	84 56       	subi	r24, 0x64	; 100
     662:	96 4c       	sbci	r25, 0xC6	; 198
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	0e 94 be 1a 	call	0x357c	; 0x357c <snprintf>
     66c:	80 93 81 39 	sts	0x3981, r24	; 0x803981 <fstr_size>
     670:	90 93 82 39 	sts	0x3982, r25	; 0x803982 <fstr_size+0x1>
	v += fstr_size;
     674:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     678:	89 0f       	add	r24, r25
     67a:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", c);
     67e:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     682:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
     686:	1f 93       	push	r17
     688:	0f 93       	push	r16
     68a:	ff 92       	push	r15
     68c:	ef 92       	push	r14
     68e:	df 92       	push	r13
     690:	cf 92       	push	r12
     692:	c9 1b       	sub	r28, r25
     694:	d1 09       	sbc	r29, r1
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	84 56       	subi	r24, 0x64	; 100
     69e:	96 4c       	sbci	r25, 0xC6	; 198
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	0e 94 be 1a 	call	0x357c	; 0x357c <snprintf>
     6a8:	80 93 81 39 	sts	0x3981, r24	; 0x803981 <fstr_size>
     6ac:	90 93 82 39 	sts	0x3982, r25	; 0x803982 <fstr_size+0x1>
	v += fstr_size;
     6b0:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <v>
     6b4:	89 0f       	add	r24, r25
     6b6:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
	send_size = v;
     6ba:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
     6c4:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
	send_enable = 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	80 93 85 39 	sts	0x3985, r24	; 0x803985 <send_enable>
     6d0:	90 93 86 39 	sts	0x3986, r25	; 0x803986 <send_enable+0x1>
}
     6d4:	8d b7       	in	r24, 0x3d	; 61
     6d6:	9e b7       	in	r25, 0x3e	; 62
     6d8:	4e 96       	adiw	r24, 0x1e	; 30
     6da:	8d bf       	out	0x3d, r24	; 61
     6dc:	9e bf       	out	0x3e, r25	; 62
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	9f 90       	pop	r9
     6f4:	8f 90       	pop	r8
     6f6:	08 95       	ret

000006f8 <write_temp_cal_eeprom>:

void write_temp_cal_eeprom()
{
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	08 e9       	ldi	r16, 0x98	; 152
     70a:	19 e3       	ldi	r17, 0x39	; 57
     70c:	78 01       	movw	r14, r16
     70e:	c7 e0       	ldi	r28, 0x07	; 7
     710:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_a,sizeof(float));
     712:	0f 2e       	mov	r0, r31
     714:	f1 e4       	ldi	r31, 0x41	; 65
     716:	cf 2e       	mov	r12, r31
     718:	fa e3       	ldi	r31, 0x3A	; 58
     71a:	df 2e       	mov	r13, r31
     71c:	f0 2d       	mov	r31, r0
     71e:	f6 01       	movw	r30, r12
     720:	80 81       	ld	r24, Z
     722:	91 81       	ldd	r25, Z+1	; 0x01
     724:	a2 81       	ldd	r26, Z+2	; 0x02
     726:	b3 81       	ldd	r27, Z+3	; 0x03
     728:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <tmp>
     72c:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <tmp+0x1>
     730:	a0 93 9a 39 	sts	0x399A, r26	; 0x80399a <tmp+0x2>
     734:	b0 93 9b 39 	sts	0x399B, r27	; 0x80399b <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + i, tmp[i]);
     738:	f7 01       	movw	r30, r14
     73a:	61 91       	ld	r22, Z+
     73c:	7f 01       	movw	r14, r30
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     744:	21 96       	adiw	r28, 0x01	; 1

void write_temp_cal_eeprom()
{
	int i;
	
	for(i = 0; i < sizeof(float); i++)
     746:	cb 30       	cpi	r28, 0x0B	; 11
     748:	d1 05       	cpc	r29, r1
     74a:	49 f7       	brne	.-46     	; 0x71e <write_temp_cal_eeprom+0x26>
     74c:	0f 2e       	mov	r0, r31
     74e:	f8 e9       	ldi	r31, 0x98	; 152
     750:	ef 2e       	mov	r14, r31
     752:	f9 e3       	ldi	r31, 0x39	; 57
     754:	ff 2e       	mov	r15, r31
     756:	f0 2d       	mov	r31, r0
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_b,sizeof(float));
     758:	0f 2e       	mov	r0, r31
     75a:	f4 e5       	ldi	r31, 0x54	; 84
     75c:	cf 2e       	mov	r12, r31
     75e:	fa e3       	ldi	r31, 0x3A	; 58
     760:	df 2e       	mov	r13, r31
     762:	f0 2d       	mov	r31, r0
     764:	f6 01       	movw	r30, r12
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	a2 81       	ldd	r26, Z+2	; 0x02
     76c:	b3 81       	ldd	r27, Z+3	; 0x03
     76e:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <tmp>
     772:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <tmp+0x1>
     776:	a0 93 9a 39 	sts	0x399A, r26	; 0x80399a <tmp+0x2>
     77a:	b0 93 9b 39 	sts	0x399B, r27	; 0x80399b <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + sizeof(float) + i, tmp[i]);
     77e:	f7 01       	movw	r30, r14
     780:	61 91       	ld	r22, Z+
     782:	7f 01       	movw	r14, r30
     784:	ce 01       	movw	r24, r28
     786:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     78a:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_a,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     78c:	cf 30       	cpi	r28, 0x0F	; 15
     78e:	d1 05       	cpc	r29, r1
     790:	49 f7       	brne	.-46     	; 0x764 <write_temp_cal_eeprom+0x6c>
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_c,sizeof(float));
     792:	0f 2e       	mov	r0, r31
     794:	f4 e9       	ldi	r31, 0x94	; 148
     796:	ef 2e       	mov	r14, r31
     798:	f9 e3       	ldi	r31, 0x39	; 57
     79a:	ff 2e       	mov	r15, r31
     79c:	f0 2d       	mov	r31, r0
     79e:	f7 01       	movw	r30, r14
     7a0:	80 81       	ld	r24, Z
     7a2:	91 81       	ldd	r25, Z+1	; 0x01
     7a4:	a2 81       	ldd	r26, Z+2	; 0x02
     7a6:	b3 81       	ldd	r27, Z+3	; 0x03
     7a8:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <tmp>
     7ac:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <tmp+0x1>
     7b0:	a0 93 9a 39 	sts	0x399A, r26	; 0x80399a <tmp+0x2>
     7b4:	b0 93 9b 39 	sts	0x399B, r27	; 0x80399b <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
     7b8:	f8 01       	movw	r30, r16
     7ba:	61 91       	ld	r22, Z+
     7bc:	8f 01       	movw	r16, r30
     7be:	ce 01       	movw	r24, r28
     7c0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     7c4:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_b,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + sizeof(float) + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     7c6:	c3 31       	cpi	r28, 0x13	; 19
     7c8:	d1 05       	cpc	r29, r1
     7ca:	49 f7       	brne	.-46     	; 0x79e <write_temp_cal_eeprom+0xa6>
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_c,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
	}
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	08 95       	ret

000007de <write_rh_cal_eeprom>:

void write_rh_cal_eeprom()
{
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	08 e9       	ldi	r16, 0x98	; 152
     7f0:	19 e3       	ldi	r17, 0x39	; 57
     7f2:	78 01       	movw	r14, r16
     7f4:	c3 e1       	ldi	r28, 0x13	; 19
     7f6:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_d,sizeof(float));
     7f8:	0f 2e       	mov	r0, r31
     7fa:	f3 e3       	ldi	r31, 0x33	; 51
     7fc:	cf 2e       	mov	r12, r31
     7fe:	fa e3       	ldi	r31, 0x3A	; 58
     800:	df 2e       	mov	r13, r31
     802:	f0 2d       	mov	r31, r0
     804:	f6 01       	movw	r30, r12
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	a2 81       	ldd	r26, Z+2	; 0x02
     80c:	b3 81       	ldd	r27, Z+3	; 0x03
     80e:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <tmp>
     812:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <tmp+0x1>
     816:	a0 93 9a 39 	sts	0x399A, r26	; 0x80399a <tmp+0x2>
     81a:	b0 93 9b 39 	sts	0x399B, r27	; 0x80399b <tmp+0x3>
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + i, tmp[i]);
     81e:	f7 01       	movw	r30, r14
     820:	61 91       	ld	r22, Z+
     822:	7f 01       	movw	r14, r30
     824:	ce 01       	movw	r24, r28
     826:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     82a:	21 96       	adiw	r28, 0x01	; 1

void write_rh_cal_eeprom()
{
	int i;
	
	for(i = 0; i < sizeof(float); i++)
     82c:	c7 31       	cpi	r28, 0x17	; 23
     82e:	d1 05       	cpc	r29, r1
     830:	49 f7       	brne	.-46     	; 0x804 <write_rh_cal_eeprom+0x26>
     832:	0f 2e       	mov	r0, r31
     834:	f8 e9       	ldi	r31, 0x98	; 152
     836:	ef 2e       	mov	r14, r31
     838:	f9 e3       	ldi	r31, 0x39	; 57
     83a:	ff 2e       	mov	r15, r31
     83c:	f0 2d       	mov	r31, r0
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_e,sizeof(float));
     83e:	0f 2e       	mov	r0, r31
     840:	fd e3       	ldi	r31, 0x3D	; 61
     842:	cf 2e       	mov	r12, r31
     844:	fa e3       	ldi	r31, 0x3A	; 58
     846:	df 2e       	mov	r13, r31
     848:	f0 2d       	mov	r31, r0
     84a:	f6 01       	movw	r30, r12
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	a2 81       	ldd	r26, Z+2	; 0x02
     852:	b3 81       	ldd	r27, Z+3	; 0x03
     854:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <tmp>
     858:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <tmp+0x1>
     85c:	a0 93 9a 39 	sts	0x399A, r26	; 0x80399a <tmp+0x2>
     860:	b0 93 9b 39 	sts	0x399B, r27	; 0x80399b <tmp+0x3>
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + sizeof(float) + i, tmp[i]);
     864:	f7 01       	movw	r30, r14
     866:	61 91       	ld	r22, Z+
     868:	7f 01       	movw	r14, r30
     86a:	ce 01       	movw	r24, r28
     86c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     870:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_d,sizeof(float));
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     872:	cb 31       	cpi	r28, 0x1B	; 27
     874:	d1 05       	cpc	r29, r1
     876:	49 f7       	brne	.-46     	; 0x84a <write_rh_cal_eeprom+0x6c>
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_f,sizeof(float));
     878:	0f 2e       	mov	r0, r31
     87a:	fa e7       	ldi	r31, 0x7A	; 122
     87c:	ef 2e       	mov	r14, r31
     87e:	fa e3       	ldi	r31, 0x3A	; 58
     880:	ff 2e       	mov	r15, r31
     882:	f0 2d       	mov	r31, r0
     884:	f7 01       	movw	r30, r14
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	a2 81       	ldd	r26, Z+2	; 0x02
     88c:	b3 81       	ldd	r27, Z+3	; 0x03
     88e:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <tmp>
     892:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <tmp+0x1>
     896:	a0 93 9a 39 	sts	0x399A, r26	; 0x80399a <tmp+0x2>
     89a:	b0 93 9b 39 	sts	0x399B, r27	; 0x80399b <tmp+0x3>
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
     89e:	f8 01       	movw	r30, r16
     8a0:	61 91       	ld	r22, Z+
     8a2:	8f 01       	movw	r16, r30
     8a4:	ce 01       	movw	r24, r28
     8a6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     8aa:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_e,sizeof(float));
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + sizeof(float) + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     8ac:	cf 31       	cpi	r28, 0x1F	; 31
     8ae:	d1 05       	cpc	r29, r1
     8b0:	49 f7       	brne	.-46     	; 0x884 <write_rh_cal_eeprom+0xa6>
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_f,sizeof(float));
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
	}
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	08 95       	ret

000008c4 <handle_uart_buffer>:

void handle_uart_buffer(){
     8c4:	8f 92       	push	r8
     8c6:	9f 92       	push	r9
     8c8:	af 92       	push	r10
     8ca:	bf 92       	push	r11
     8cc:	cf 92       	push	r12
     8ce:	df 92       	push	r13
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
	if (handle_uart_flag == 1) {
     8dc:	80 91 7a 39 	lds	r24, 0x397A	; 0x80397a <handle_uart_flag>
     8e0:	90 91 7b 39 	lds	r25, 0x397B	; 0x80397b <handle_uart_flag+0x1>
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	11 f0       	breq	.+4      	; 0x8ec <handle_uart_buffer+0x28>
     8e8:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <handle_uart_buffer+0x11e2>
		
		if (recv[1] == single_primary_addr)
     8ec:	80 91 9d 39 	lds	r24, 0x399D	; 0x80399d <recv+0x1>
     8f0:	90 91 61 3a 	lds	r25, 0x3A61	; 0x803a61 <single_primary_addr>
     8f4:	89 13       	cpse	r24, r25
     8f6:	22 c0       	rjmp	.+68     	; 0x93c <handle_uart_buffer+0x78>
		{
			address_type = 0x01;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
			address_length = SINGLE_ADDRESS_LEN;
     8fe:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
			
			if (recv[2] == TEMP_ADDR_BYTE) // a
     902:	80 91 9e 39 	lds	r24, 0x399E	; 0x80399e <recv+0x2>
     906:	81 36       	cpi	r24, 0x61	; 97
     908:	31 f4       	brne	.+12     	; 0x916 <handle_uart_buffer+0x52>
			{
				address_type = 0x02;
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = SINGLE_ADDRESS_LEN + 1;
     910:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     914:	85 c0       	rjmp	.+266    	; 0xa20 <handle_uart_buffer+0x15c>
			}
			else if (recv[2] == RH_ADDR_BYTE) // n
     916:	8e 36       	cpi	r24, 0x6E	; 110
     918:	39 f4       	brne	.+14     	; 0x928 <handle_uart_buffer+0x64>
			{
				address_type = 0x03;
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = SINGLE_ADDRESS_LEN + 1;
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     926:	7c c0       	rjmp	.+248    	; 0xa20 <handle_uart_buffer+0x15c>
			}
			else if (recv[2] == RH_TEMP_ADDR_BYTE) // m
     928:	8d 36       	cpi	r24, 0x6D	; 109
     92a:	09 f0       	breq	.+2      	; 0x92e <handle_uart_buffer+0x6a>
     92c:	79 c0       	rjmp	.+242    	; 0xa20 <handle_uart_buffer+0x15c>
			{
				address_type = 0x04;
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = SINGLE_ADDRESS_LEN + 1;
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     93a:	72 c0       	rjmp	.+228    	; 0xa20 <handle_uart_buffer+0x15c>
			}
			
		}
		else if (recv[1] == single_temp_addr)
     93c:	90 91 37 3a 	lds	r25, 0x3A37	; 0x803a37 <single_temp_addr>
     940:	89 13       	cpse	r24, r25
     942:	07 c0       	rjmp	.+14     	; 0x952 <handle_uart_buffer+0x8e>
		{
			address_type = 0x05;
     944:	85 e0       	ldi	r24, 0x05	; 5
     946:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
			address_length = SINGLE_ADDRESS_LEN;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     950:	67 c0       	rjmp	.+206    	; 0xa20 <handle_uart_buffer+0x15c>
		}
		else if (recv[1] == single_rh_addr)
     952:	90 91 3c 3a 	lds	r25, 0x3A3C	; 0x803a3c <single_rh_addr>
     956:	89 13       	cpse	r24, r25
     958:	07 c0       	rjmp	.+14     	; 0x968 <handle_uart_buffer+0xa4>
		{
			address_type = 0x06;
     95a:	86 e0       	ldi	r24, 0x06	; 6
     95c:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
			address_length = SINGLE_ADDRESS_LEN;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     966:	5c c0       	rjmp	.+184    	; 0xa20 <handle_uart_buffer+0x15c>
		}
		else if (memcmp(recv + 1, ALWAYS_RESP_ADDR,ADDRESS_LEN) == 0)
     968:	46 e0       	ldi	r20, 0x06	; 6
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	65 ec       	ldi	r22, 0xC5	; 197
     96e:	79 eb       	ldi	r23, 0xB9	; 185
     970:	8d e9       	ldi	r24, 0x9D	; 157
     972:	99 e3       	ldi	r25, 0x39	; 57
     974:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
     978:	89 2b       	or	r24, r25
     97a:	19 f5       	brne	.+70     	; 0x9c2 <handle_uart_buffer+0xfe>
		{
			address_type = 0x07; // always_respond
     97c:	87 e0       	ldi	r24, 0x07	; 7
     97e:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
			address_length = ADDRESS_LEN;
     982:	86 e0       	ldi	r24, 0x06	; 6
     984:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
			
			if (recv[7] == TEMP_ADDR_BYTE) // a
     988:	80 91 a3 39 	lds	r24, 0x39A3	; 0x8039a3 <recv+0x7>
     98c:	81 36       	cpi	r24, 0x61	; 97
     98e:	39 f4       	brne	.+14     	; 0x99e <handle_uart_buffer+0xda>
			{
				address_type = 0x08;
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = ADDRESS_LEN + 1;
     996:	87 e0       	ldi	r24, 0x07	; 7
     998:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     99c:	41 c0       	rjmp	.+130    	; 0xa20 <handle_uart_buffer+0x15c>
			}
			else if (recv[7] == RH_ADDR_BYTE) // n
     99e:	8e 36       	cpi	r24, 0x6E	; 110
     9a0:	39 f4       	brne	.+14     	; 0x9b0 <handle_uart_buffer+0xec>
			{
				address_type = 0x09;
     9a2:	89 e0       	ldi	r24, 0x09	; 9
     9a4:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = ADDRESS_LEN + 1;
     9a8:	87 e0       	ldi	r24, 0x07	; 7
     9aa:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     9ae:	38 c0       	rjmp	.+112    	; 0xa20 <handle_uart_buffer+0x15c>
			}
			else if (recv[7] == RH_TEMP_ADDR_BYTE) // m
     9b0:	8d 36       	cpi	r24, 0x6D	; 109
     9b2:	b1 f5       	brne	.+108    	; 0xa20 <handle_uart_buffer+0x15c>
			{
				address_type = 0x0a;
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = ADDRESS_LEN + 1;
     9ba:	87 e0       	ldi	r24, 0x07	; 7
     9bc:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     9c0:	2f c0       	rjmp	.+94     	; 0xa20 <handle_uart_buffer+0x15c>
			}
		}
		else if (memcmp(recv + 1, addr, ADDRESS_LEN) == 0)
     9c2:	46 e0       	ldi	r20, 0x06	; 6
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	6d e4       	ldi	r22, 0x4D	; 77
     9c8:	7a e3       	ldi	r23, 0x3A	; 58
     9ca:	8d e9       	ldi	r24, 0x9D	; 157
     9cc:	99 e3       	ldi	r25, 0x39	; 57
     9ce:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
     9d2:	89 2b       	or	r24, r25
     9d4:	19 f5       	brne	.+70     	; 0xa1c <handle_uart_buffer+0x158>
		{
			address_type = 0x0b; // serial_number
     9d6:	8b e0       	ldi	r24, 0x0B	; 11
     9d8:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
			address_length = ADDRESS_LEN;
     9dc:	86 e0       	ldi	r24, 0x06	; 6
     9de:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
			
			if (recv[7] == TEMP_ADDR_BYTE) // a
     9e2:	80 91 a3 39 	lds	r24, 0x39A3	; 0x8039a3 <recv+0x7>
     9e6:	81 36       	cpi	r24, 0x61	; 97
     9e8:	39 f4       	brne	.+14     	; 0x9f8 <handle_uart_buffer+0x134>
			{
				address_type = 0x0c;
     9ea:	8c e0       	ldi	r24, 0x0C	; 12
     9ec:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = ADDRESS_LEN + 1;
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     9f6:	14 c0       	rjmp	.+40     	; 0xa20 <handle_uart_buffer+0x15c>
			}
			else if (recv[7] == RH_ADDR_BYTE) // n
     9f8:	8e 36       	cpi	r24, 0x6E	; 110
     9fa:	39 f4       	brne	.+14     	; 0xa0a <handle_uart_buffer+0x146>
			{
				address_type = 0x0d;
     9fc:	8d e0       	ldi	r24, 0x0D	; 13
     9fe:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = ADDRESS_LEN + 1;
     a02:	87 e0       	ldi	r24, 0x07	; 7
     a04:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     a08:	0b c0       	rjmp	.+22     	; 0xa20 <handle_uart_buffer+0x15c>
			}
			else if (recv[7] == RH_TEMP_ADDR_BYTE) // m
     a0a:	8d 36       	cpi	r24, 0x6D	; 109
     a0c:	49 f4       	brne	.+18     	; 0xa20 <handle_uart_buffer+0x15c>
			{
				address_type = 0x0e;
     a0e:	8e e0       	ldi	r24, 0x0E	; 14
     a10:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <address_type>
				address_length = ADDRESS_LEN + 1;
     a14:	87 e0       	ldi	r24, 0x07	; 7
     a16:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <address_length>
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <handle_uart_buffer+0x15c>
			}
			
		}
		else
		{
			address_type = 0;
     a1c:	10 92 92 39 	sts	0x3992, r1	; 0x803992 <address_type>
		}
		
		recv[0] = '*';
     a20:	8a e2       	ldi	r24, 0x2A	; 42
     a22:	80 93 9c 39 	sts	0x399C, r24	; 0x80399c <recv>
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
     a26:	c0 91 92 39 	lds	r28, 0x3992	; 0x803992 <address_type>
     a2a:	c2 30       	cpi	r28, 0x02	; 2
     a2c:	09 f4       	brne	.+2      	; 0xa30 <handle_uart_buffer+0x16c>
     a2e:	51 c7       	rjmp	.+3746   	; 0x18d2 <handle_uart_buffer+0x100e>
     a30:	c5 30       	cpi	r28, 0x05	; 5
     a32:	29 f0       	breq	.+10     	; 0xa3e <handle_uart_buffer+0x17a>
     a34:	8c 2f       	mov	r24, r28
     a36:	8b 7f       	andi	r24, 0xFB	; 251
     a38:	88 30       	cpi	r24, 0x08	; 8
     a3a:	09 f0       	breq	.+2      	; 0xa3e <handle_uart_buffer+0x17a>
     a3c:	68 c0       	rjmp	.+208    	; 0xb0e <handle_uart_buffer+0x24a>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     a3e:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     a42:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     a46:	fb 01       	movw	r30, r22
     a48:	01 90       	ld	r0, Z+
     a4a:	00 20       	and	r0, r0
     a4c:	e9 f7       	brne	.-6      	; 0xa48 <handle_uart_buffer+0x184>
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	af 01       	movw	r20, r30
     a52:	46 1b       	sub	r20, r22
     a54:	57 0b       	sbc	r21, r23
     a56:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     a5a:	8d 2f       	mov	r24, r29
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	83 56       	subi	r24, 0x63	; 99
     a60:	96 4c       	sbci	r25, 0xC6	; 198
     a62:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			address_type = 0;
		}
		
		recv[0] = '*';
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
     a66:	89 2b       	or	r24, r25
     a68:	09 f0       	breq	.+2      	; 0xa6c <handle_uart_buffer+0x1a8>
     a6a:	51 c0       	rjmp	.+162    	; 0xb0e <handle_uart_buffer+0x24a>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
     a6c:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
		}
		
		recv[0] = '*';
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	8d 2f       	mov	r24, r29
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	04 96       	adiw	r24, 0x04	; 4
     a78:	28 17       	cp	r18, r24
     a7a:	39 07       	cpc	r19, r25
     a7c:	09 f0       	breq	.+2      	; 0xa80 <handle_uart_buffer+0x1bc>
     a7e:	47 c0       	rjmp	.+142    	; 0xb0e <handle_uart_buffer+0x24a>
		v == address_length + 2 + cmd_len[RD])
		{
			get_avg_data(&temp_data, 0);
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	8f e2       	ldi	r24, 0x2F	; 47
     a86:	9a e3       	ldi	r25, 0x3A	; 58
     a88:	0e 94 8d 01 	call	0x31a	; 0x31a <get_avg_data>
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
     a8c:	c0 90 2f 3a 	lds	r12, 0x3A2F	; 0x803a2f <temp_data>
     a90:	d0 90 30 3a 	lds	r13, 0x3A30	; 0x803a30 <temp_data+0x1>
     a94:	e0 90 31 3a 	lds	r14, 0x3A31	; 0x803a31 <temp_data+0x2>
     a98:	f0 90 32 3a 	lds	r15, 0x3A32	; 0x803a32 <temp_data+0x3>
     a9c:	20 91 54 3a 	lds	r18, 0x3A54	; 0x803a54 <cal_b>
     aa0:	30 91 55 3a 	lds	r19, 0x3A55	; 0x803a55 <cal_b+0x1>
     aa4:	40 91 56 3a 	lds	r20, 0x3A56	; 0x803a56 <cal_b+0x2>
     aa8:	50 91 57 3a 	lds	r21, 0x3A57	; 0x803a57 <cal_b+0x3>
     aac:	c7 01       	movw	r24, r14
     aae:	b6 01       	movw	r22, r12
     ab0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     ab4:	20 91 41 3a 	lds	r18, 0x3A41	; 0x803a41 <cal_a>
     ab8:	30 91 42 3a 	lds	r19, 0x3A42	; 0x803a42 <cal_a+0x1>
     abc:	40 91 43 3a 	lds	r20, 0x3A43	; 0x803a43 <cal_a+0x2>
     ac0:	50 91 44 3a 	lds	r21, 0x3A44	; 0x803a44 <cal_a+0x3>
     ac4:	0e 94 ac 13 	call	0x2758	; 0x2758 <__addsf3>
     ac8:	4b 01       	movw	r8, r22
     aca:	5c 01       	movw	r10, r24
     acc:	20 91 94 39 	lds	r18, 0x3994	; 0x803994 <cal_c>
     ad0:	30 91 95 39 	lds	r19, 0x3995	; 0x803995 <cal_c+0x1>
     ad4:	40 91 96 39 	lds	r20, 0x3996	; 0x803996 <cal_c+0x2>
     ad8:	50 91 97 39 	lds	r21, 0x3997	; 0x803997 <cal_c+0x3>
     adc:	c7 01       	movw	r24, r14
     ade:	b6 01       	movw	r22, r12
     ae0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     ae4:	a7 01       	movw	r20, r14
     ae6:	96 01       	movw	r18, r12
     ae8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     aec:	9b 01       	movw	r18, r22
     aee:	ac 01       	movw	r20, r24
     af0:	c5 01       	movw	r24, r10
     af2:	b4 01       	movw	r22, r8
     af4:	0e 94 ac 13 	call	0x2758	; 0x2758 <__addsf3>
     af8:	60 93 2f 3a 	sts	0x3A2F, r22	; 0x803a2f <temp_data>
     afc:	70 93 30 3a 	sts	0x3A30, r23	; 0x803a30 <temp_data+0x1>
     b00:	80 93 31 3a 	sts	0x3A31, r24	; 0x803a31 <temp_data+0x2>
     b04:	90 93 32 3a 	sts	0x3A32, r25	; 0x803a32 <temp_data+0x3>
			build_output(temp_data);
     b08:	0e 94 a4 02 	call	0x548	; 0x548 <build_output>
     b0c:	92 c5       	rjmp	.+2852   	; 0x1632 <handle_uart_buffer+0xd6e>
		} // RD RH sensor response, all address cases
		else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
     b0e:	c3 30       	cpi	r28, 0x03	; 3
     b10:	09 f4       	brne	.+2      	; 0xb14 <handle_uart_buffer+0x250>
     b12:	f7 c6       	rjmp	.+3566   	; 0x1902 <handle_uart_buffer+0x103e>
     b14:	c6 30       	cpi	r28, 0x06	; 6
     b16:	29 f0       	breq	.+10     	; 0xb22 <handle_uart_buffer+0x25e>
     b18:	8c 2f       	mov	r24, r28
     b1a:	8b 7f       	andi	r24, 0xFB	; 251
     b1c:	89 30       	cpi	r24, 0x09	; 9
     b1e:	09 f0       	breq	.+2      	; 0xb22 <handle_uart_buffer+0x25e>
     b20:	68 c0       	rjmp	.+208    	; 0xbf2 <handle_uart_buffer+0x32e>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     b22:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     b26:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     b2a:	fb 01       	movw	r30, r22
     b2c:	01 90       	ld	r0, Z+
     b2e:	00 20       	and	r0, r0
     b30:	e9 f7       	brne	.-6      	; 0xb2c <handle_uart_buffer+0x268>
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	af 01       	movw	r20, r30
     b36:	46 1b       	sub	r20, r22
     b38:	57 0b       	sbc	r21, r23
     b3a:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     b3e:	8d 2f       	mov	r24, r29
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	83 56       	subi	r24, 0x63	; 99
     b44:	96 4c       	sbci	r25, 0xC6	; 198
     b46:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		{
			get_avg_data(&temp_data, 0);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
     b4a:	89 2b       	or	r24, r25
     b4c:	09 f0       	breq	.+2      	; 0xb50 <handle_uart_buffer+0x28c>
     b4e:	51 c0       	rjmp	.+162    	; 0xbf2 <handle_uart_buffer+0x32e>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
     b50:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			get_avg_data(&temp_data, 0);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	8d 2f       	mov	r24, r29
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	04 96       	adiw	r24, 0x04	; 4
     b5c:	28 17       	cp	r18, r24
     b5e:	39 07       	cpc	r19, r25
     b60:	09 f0       	breq	.+2      	; 0xb64 <handle_uart_buffer+0x2a0>
     b62:	47 c0       	rjmp	.+142    	; 0xbf2 <handle_uart_buffer+0x32e>
		v == address_length + 2 + cmd_len[RD])
		{
			get_avg_data(&rh_data, 1);
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	86 e7       	ldi	r24, 0x76	; 118
     b6a:	9a e3       	ldi	r25, 0x3A	; 58
     b6c:	0e 94 8d 01 	call	0x31a	; 0x31a <get_avg_data>
			rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;
     b70:	c0 90 76 3a 	lds	r12, 0x3A76	; 0x803a76 <rh_data>
     b74:	d0 90 77 3a 	lds	r13, 0x3A77	; 0x803a77 <rh_data+0x1>
     b78:	e0 90 78 3a 	lds	r14, 0x3A78	; 0x803a78 <rh_data+0x2>
     b7c:	f0 90 79 3a 	lds	r15, 0x3A79	; 0x803a79 <rh_data+0x3>
     b80:	20 91 3d 3a 	lds	r18, 0x3A3D	; 0x803a3d <cal_e>
     b84:	30 91 3e 3a 	lds	r19, 0x3A3E	; 0x803a3e <cal_e+0x1>
     b88:	40 91 3f 3a 	lds	r20, 0x3A3F	; 0x803a3f <cal_e+0x2>
     b8c:	50 91 40 3a 	lds	r21, 0x3A40	; 0x803a40 <cal_e+0x3>
     b90:	c7 01       	movw	r24, r14
     b92:	b6 01       	movw	r22, r12
     b94:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     b98:	20 91 33 3a 	lds	r18, 0x3A33	; 0x803a33 <cal_d>
     b9c:	30 91 34 3a 	lds	r19, 0x3A34	; 0x803a34 <cal_d+0x1>
     ba0:	40 91 35 3a 	lds	r20, 0x3A35	; 0x803a35 <cal_d+0x2>
     ba4:	50 91 36 3a 	lds	r21, 0x3A36	; 0x803a36 <cal_d+0x3>
     ba8:	0e 94 ac 13 	call	0x2758	; 0x2758 <__addsf3>
     bac:	4b 01       	movw	r8, r22
     bae:	5c 01       	movw	r10, r24
     bb0:	20 91 7a 3a 	lds	r18, 0x3A7A	; 0x803a7a <cal_f>
     bb4:	30 91 7b 3a 	lds	r19, 0x3A7B	; 0x803a7b <cal_f+0x1>
     bb8:	40 91 7c 3a 	lds	r20, 0x3A7C	; 0x803a7c <cal_f+0x2>
     bbc:	50 91 7d 3a 	lds	r21, 0x3A7D	; 0x803a7d <cal_f+0x3>
     bc0:	c7 01       	movw	r24, r14
     bc2:	b6 01       	movw	r22, r12
     bc4:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     bc8:	a7 01       	movw	r20, r14
     bca:	96 01       	movw	r18, r12
     bcc:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	c5 01       	movw	r24, r10
     bd6:	b4 01       	movw	r22, r8
     bd8:	0e 94 ac 13 	call	0x2758	; 0x2758 <__addsf3>
     bdc:	60 93 76 3a 	sts	0x3A76, r22	; 0x803a76 <rh_data>
     be0:	70 93 77 3a 	sts	0x3A77, r23	; 0x803a77 <rh_data+0x1>
     be4:	80 93 78 3a 	sts	0x3A78, r24	; 0x803a78 <rh_data+0x2>
     be8:	90 93 79 3a 	sts	0x3A79, r25	; 0x803a79 <rh_data+0x3>
			build_output(rh_data);
     bec:	0e 94 a4 02 	call	0x548	; 0x548 <build_output>
     bf0:	20 c5       	rjmp	.+2624   	; 0x1632 <handle_uart_buffer+0xd6e>
		} // RD RH temp sensor response, all address cases
		else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
     bf2:	c4 30       	cpi	r28, 0x04	; 4
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <handle_uart_buffer+0x334>
     bf6:	9d c6       	rjmp	.+3386   	; 0x1932 <handle_uart_buffer+0x106e>
     bf8:	8c 2f       	mov	r24, r28
     bfa:	8b 7f       	andi	r24, 0xFB	; 251
     bfc:	8a 30       	cpi	r24, 0x0A	; 10
     bfe:	81 f5       	brne	.+96     	; 0xc60 <handle_uart_buffer+0x39c>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     c00:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     c04:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     c08:	fb 01       	movw	r30, r22
     c0a:	01 90       	ld	r0, Z+
     c0c:	00 20       	and	r0, r0
     c0e:	e9 f7       	brne	.-6      	; 0xc0a <handle_uart_buffer+0x346>
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	af 01       	movw	r20, r30
     c14:	46 1b       	sub	r20, r22
     c16:	57 0b       	sbc	r21, r23
     c18:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     c1c:	8d 2f       	mov	r24, r29
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	83 56       	subi	r24, 0x63	; 99
     c22:	96 4c       	sbci	r25, 0xC6	; 198
     c24:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		{
			get_avg_data(&rh_data, 1);
			rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;
			build_output(rh_data);
		} // RD RH temp sensor response, all address cases
		else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
     c28:	89 2b       	or	r24, r25
     c2a:	d1 f4       	brne	.+52     	; 0xc60 <handle_uart_buffer+0x39c>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
     c2c:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			get_avg_data(&rh_data, 1);
			rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;
			build_output(rh_data);
		} // RD RH temp sensor response, all address cases
		else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	8d 2f       	mov	r24, r29
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	04 96       	adiw	r24, 0x04	; 4
     c38:	28 17       	cp	r18, r24
     c3a:	39 07       	cpc	r19, r25
     c3c:	89 f4       	brne	.+34     	; 0xc60 <handle_uart_buffer+0x39c>
		v == address_length + 2 + cmd_len[RD])
		{
			get_avg_data(&temp_data, 2);
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	8f e2       	ldi	r24, 0x2F	; 47
     c44:	9a e3       	ldi	r25, 0x3A	; 58
     c46:	0e 94 8d 01 	call	0x31a	; 0x31a <get_avg_data>
			build_output(temp_data);
     c4a:	60 91 2f 3a 	lds	r22, 0x3A2F	; 0x803a2f <temp_data>
     c4e:	70 91 30 3a 	lds	r23, 0x3A30	; 0x803a30 <temp_data+0x1>
     c52:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <temp_data+0x2>
     c56:	90 91 32 3a 	lds	r25, 0x3A32	; 0x803a32 <temp_data+0x3>
     c5a:	0e 94 a4 02 	call	0x548	; 0x548 <build_output>
     c5e:	e9 c4       	rjmp	.+2514   	; 0x1632 <handle_uart_buffer+0xd6e>
		} // Other RD output
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
     c60:	c1 30       	cpi	r28, 0x01	; 1
     c62:	09 f4       	brne	.+2      	; 0xc66 <handle_uart_buffer+0x3a2>
     c64:	38 c5       	rjmp	.+2672   	; 0x16d6 <handle_uart_buffer+0xe12>
     c66:	c7 30       	cpi	r28, 0x07	; 7
     c68:	19 f0       	breq	.+6      	; 0xc70 <handle_uart_buffer+0x3ac>
     c6a:	cb 30       	cpi	r28, 0x0B	; 11
     c6c:	09 f0       	breq	.+2      	; 0xc70 <handle_uart_buffer+0x3ac>
     c6e:	4b c5       	rjmp	.+2710   	; 0x1706 <handle_uart_buffer+0xe42>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     c70:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     c74:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     c78:	fb 01       	movw	r30, r22
     c7a:	01 90       	ld	r0, Z+
     c7c:	00 20       	and	r0, r0
     c7e:	e9 f7       	brne	.-6      	; 0xc7a <handle_uart_buffer+0x3b6>
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	af 01       	movw	r20, r30
     c84:	46 1b       	sub	r20, r22
     c86:	57 0b       	sbc	r21, r23
     c88:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     c8c:	8d 2f       	mov	r24, r29
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	83 56       	subi	r24, 0x63	; 99
     c92:	96 4c       	sbci	r25, 0xC6	; 198
     c94:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		v == address_length + 2 + cmd_len[RD])
		{
			get_avg_data(&temp_data, 2);
			build_output(temp_data);
		} // Other RD output
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
     c98:	89 2b       	or	r24, r25
     c9a:	81 f4       	brne	.+32     	; 0xcbc <handle_uart_buffer+0x3f8>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
     c9c:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
		{
			get_avg_data(&temp_data, 2);
			build_output(temp_data);
		} // Other RD output
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	8d 2f       	mov	r24, r29
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	04 96       	adiw	r24, 0x04	; 4
     ca8:	28 17       	cp	r18, r24
     caa:	39 07       	cpc	r19, r25
     cac:	39 f4       	brne	.+14     	; 0xcbc <handle_uart_buffer+0x3f8>
		v == address_length + 2 + cmd_len[RD])
		{
			build_output(ERROR_SYNTAX);
     cae:	63 e8       	ldi	r22, 0x83	; 131
     cb0:	7f e4       	ldi	r23, 0x4F	; 79
     cb2:	83 ec       	ldi	r24, 0xC3	; 195
     cb4:	97 e4       	ldi	r25, 0x47	; 71
     cb6:	0e 94 a4 02 	call	0x548	; 0x548 <build_output>
     cba:	bb c4       	rjmp	.+2422   	; 0x1632 <handle_uart_buffer+0xd6e>
		} // WE
		else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) &&
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	8c 0f       	add	r24, r28
     cc0:	83 30       	cpi	r24, 0x03	; 3
     cc2:	60 f0       	brcs	.+24     	; 0xcdc <handle_uart_buffer+0x418>
     cc4:	c7 30       	cpi	r28, 0x07	; 7
     cc6:	09 f4       	brne	.+2      	; 0xcca <handle_uart_buffer+0x406>
     cc8:	57 c6       	rjmp	.+3246   	; 0x1978 <handle_uart_buffer+0x10b4>
     cca:	88 ef       	ldi	r24, 0xF8	; 248
     ccc:	8c 0f       	add	r24, r28
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	28 f0       	brcs	.+10     	; 0xcdc <handle_uart_buffer+0x418>
     cd2:	85 ef       	ldi	r24, 0xF5	; 245
     cd4:	8c 0f       	add	r24, r28
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <handle_uart_buffer+0x418>
     cda:	1b c5       	rjmp	.+2614   	; 0x1712 <handle_uart_buffer+0xe4e>
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
     cdc:	60 91 02 38 	lds	r22, 0x3802	; 0x803802 <__data_start+0x2>
     ce0:	70 91 03 38 	lds	r23, 0x3803	; 0x803803 <__data_start+0x3>
     ce4:	fb 01       	movw	r30, r22
     ce6:	01 90       	ld	r0, Z+
     ce8:	00 20       	and	r0, r0
     cea:	e9 f7       	brne	.-6      	; 0xce6 <handle_uart_buffer+0x422>
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	af 01       	movw	r20, r30
     cf0:	46 1b       	sub	r20, r22
     cf2:	57 0b       	sbc	r21, r23
     cf4:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     cf8:	0d 2f       	mov	r16, r29
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	03 56       	subi	r16, 0x63	; 99
     cfe:	16 4c       	sbci	r17, 0xC6	; 198
     d00:	c8 01       	movw	r24, r16
     d02:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
		{
			build_output(ERROR_SYNTAX);
		} // WE
		else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) &&
     d06:	89 2b       	or	r24, r25
     d08:	a9 f4       	brne	.+42     	; 0xd34 <handle_uart_buffer+0x470>
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
		v == address_length + 2 + cmd_len[WE])
     d0a:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
		v == address_length + 2 + cmd_len[RD])
		{
			build_output(ERROR_SYNTAX);
		} // WE
		else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	8d 2f       	mov	r24, r29
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	04 96       	adiw	r24, 0x04	; 4
     d16:	28 17       	cp	r18, r24
     d18:	39 07       	cpc	r19, r25
     d1a:	61 f4       	brne	.+24     	; 0xd34 <handle_uart_buffer+0x470>
		v == address_length + 2 + cmd_len[WE])
		{
			write_enabled = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 93 39 	sts	0x3993, r24	; 0x803993 <write_enabled>
			send_enable = 1;
			send_size = v - 1;
     d22:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
     d2e:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
     d32:	86 c4       	rjmp	.+2316   	; 0x1640 <handle_uart_buffer+0xd7c>
		} // Read Temp Cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
     d34:	c2 30       	cpi	r28, 0x02	; 2
     d36:	09 f4       	brne	.+2      	; 0xd3a <handle_uart_buffer+0x476>
     d38:	f0 c4       	rjmp	.+2528   	; 0x171a <handle_uart_buffer+0xe56>
     d3a:	8c 2f       	mov	r24, r28
     d3c:	8b 7f       	andi	r24, 0xFB	; 251
     d3e:	88 30       	cpi	r24, 0x08	; 8
     d40:	d1 f5       	brne	.+116    	; 0xdb6 <handle_uart_buffer+0x4f2>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     d42:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
     d46:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
     d4a:	fb 01       	movw	r30, r22
     d4c:	01 90       	ld	r0, Z+
     d4e:	00 20       	and	r0, r0
     d50:	e9 f7       	brne	.-6      	; 0xd4c <handle_uart_buffer+0x488>
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	af 01       	movw	r20, r30
     d56:	46 1b       	sub	r20, r22
     d58:	57 0b       	sbc	r21, r23
     d5a:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     d5e:	8d 2f       	mov	r24, r29
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	83 56       	subi	r24, 0x63	; 99
     d64:	96 4c       	sbci	r25, 0xC6	; 198
     d66:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		{
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
     d6a:	89 2b       	or	r24, r25
     d6c:	21 f5       	brne	.+72     	; 0xdb6 <handle_uart_buffer+0x4f2>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
     d6e:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	8d 2f       	mov	r24, r29
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	06 96       	adiw	r24, 0x06	; 6
     d7a:	28 17       	cp	r18, r24
     d7c:	39 07       	cpc	r19, r25
     d7e:	d9 f4       	brne	.+54     	; 0xdb6 <handle_uart_buffer+0x4f2>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
     d80:	e0 90 94 39 	lds	r14, 0x3994	; 0x803994 <cal_c>
     d84:	f0 90 95 39 	lds	r15, 0x3995	; 0x803995 <cal_c+0x1>
     d88:	00 91 96 39 	lds	r16, 0x3996	; 0x803996 <cal_c+0x2>
     d8c:	10 91 97 39 	lds	r17, 0x3997	; 0x803997 <cal_c+0x3>
     d90:	20 91 54 3a 	lds	r18, 0x3A54	; 0x803a54 <cal_b>
     d94:	30 91 55 3a 	lds	r19, 0x3A55	; 0x803a55 <cal_b+0x1>
     d98:	40 91 56 3a 	lds	r20, 0x3A56	; 0x803a56 <cal_b+0x2>
     d9c:	50 91 57 3a 	lds	r21, 0x3A57	; 0x803a57 <cal_b+0x3>
     da0:	60 91 41 3a 	lds	r22, 0x3A41	; 0x803a41 <cal_a>
     da4:	70 91 42 3a 	lds	r23, 0x3A42	; 0x803a42 <cal_a+0x1>
     da8:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <cal_a+0x2>
     dac:	90 91 44 3a 	lds	r25, 0x3A44	; 0x803a44 <cal_a+0x3>
     db0:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <build_cal_out_put>
     db4:	3e c4       	rjmp	.+2172   	; 0x1632 <handle_uart_buffer+0xd6e>
		} // Read RH Cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
     db6:	c3 30       	cpi	r28, 0x03	; 3
     db8:	09 f4       	brne	.+2      	; 0xdbc <handle_uart_buffer+0x4f8>
     dba:	c2 c4       	rjmp	.+2436   	; 0x1740 <handle_uart_buffer+0xe7c>
     dbc:	8c 2f       	mov	r24, r28
     dbe:	8b 7f       	andi	r24, 0xFB	; 251
     dc0:	89 30       	cpi	r24, 0x09	; 9
     dc2:	d9 f5       	brne	.+118    	; 0xe3a <handle_uart_buffer+0x576>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     dc4:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
     dc8:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
     dcc:	fb 01       	movw	r30, r22
     dce:	01 90       	ld	r0, Z+
     dd0:	00 20       	and	r0, r0
     dd2:	e9 f7       	brne	.-6      	; 0xdce <handle_uart_buffer+0x50a>
     dd4:	31 97       	sbiw	r30, 0x01	; 1
     dd6:	af 01       	movw	r20, r30
     dd8:	46 1b       	sub	r20, r22
     dda:	57 0b       	sbc	r21, r23
     ddc:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     de0:	8d 2f       	mov	r24, r29
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	83 56       	subi	r24, 0x63	; 99
     de6:	96 4c       	sbci	r25, 0xC6	; 198
     de8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Read RH Cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
     dec:	89 2b       	or	r24, r25
     dee:	09 f0       	breq	.+2      	; 0xdf2 <handle_uart_buffer+0x52e>
     df0:	f2 c5       	rjmp	.+3044   	; 0x19d6 <handle_uart_buffer+0x1112>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
     df2:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Read RH Cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	8d 2f       	mov	r24, r29
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	06 96       	adiw	r24, 0x06	; 6
     dfe:	28 17       	cp	r18, r24
     e00:	39 07       	cpc	r19, r25
     e02:	d9 f4       	brne	.+54     	; 0xe3a <handle_uart_buffer+0x576>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_d, cal_e, cal_f);
     e04:	e0 90 7a 3a 	lds	r14, 0x3A7A	; 0x803a7a <cal_f>
     e08:	f0 90 7b 3a 	lds	r15, 0x3A7B	; 0x803a7b <cal_f+0x1>
     e0c:	00 91 7c 3a 	lds	r16, 0x3A7C	; 0x803a7c <cal_f+0x2>
     e10:	10 91 7d 3a 	lds	r17, 0x3A7D	; 0x803a7d <cal_f+0x3>
     e14:	20 91 3d 3a 	lds	r18, 0x3A3D	; 0x803a3d <cal_e>
     e18:	30 91 3e 3a 	lds	r19, 0x3A3E	; 0x803a3e <cal_e+0x1>
     e1c:	40 91 3f 3a 	lds	r20, 0x3A3F	; 0x803a3f <cal_e+0x2>
     e20:	50 91 40 3a 	lds	r21, 0x3A40	; 0x803a40 <cal_e+0x3>
     e24:	60 91 33 3a 	lds	r22, 0x3A33	; 0x803a33 <cal_d>
     e28:	70 91 34 3a 	lds	r23, 0x3A34	; 0x803a34 <cal_d+0x1>
     e2c:	80 91 35 3a 	lds	r24, 0x3A35	; 0x803a35 <cal_d+0x2>
     e30:	90 91 36 3a 	lds	r25, 0x3A36	; 0x803a36 <cal_d+0x3>
     e34:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <build_cal_out_put>
     e38:	fc c3       	rjmp	.+2040   	; 0x1632 <handle_uart_buffer+0xd6e>
		} // write temp cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
     e3a:	c2 30       	cpi	r28, 0x02	; 2
     e3c:	29 f0       	breq	.+10     	; 0xe48 <handle_uart_buffer+0x584>
     e3e:	8c 2f       	mov	r24, r28
     e40:	8b 7f       	andi	r24, 0xFB	; 251
     e42:	88 30       	cpi	r24, 0x08	; 8
     e44:	09 f0       	breq	.+2      	; 0xe48 <handle_uart_buffer+0x584>
     e46:	9c c0       	rjmp	.+312    	; 0xf80 <handle_uart_buffer+0x6bc>
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     e48:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_start+0x6>
     e4c:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_start+0x7>
     e50:	fb 01       	movw	r30, r22
     e52:	01 90       	ld	r0, Z+
     e54:	00 20       	and	r0, r0
     e56:	e9 f7       	brne	.-6      	; 0xe52 <handle_uart_buffer+0x58e>
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	af 01       	movw	r20, r30
     e5c:	46 1b       	sub	r20, r22
     e5e:	57 0b       	sbc	r21, r23
     e60:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     e64:	0d 2f       	mov	r16, r29
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	c8 01       	movw	r24, r16
     e6a:	83 56       	subi	r24, 0x63	; 99
     e6c:	96 4c       	sbci	r25, 0xC6	; 198
     e6e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // write temp cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
     e72:	89 2b       	or	r24, r25
     e74:	09 f0       	breq	.+2      	; 0xe78 <handle_uart_buffer+0x5b4>
     e76:	84 c0       	rjmp	.+264    	; 0xf80 <handle_uart_buffer+0x6bc>
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
		v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     e78:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // write temp cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	c8 01       	movw	r24, r16
     e80:	8a 96       	adiw	r24, 0x2a	; 42
     e82:	28 17       	cp	r18, r24
     e84:	39 07       	cpc	r19, r25
     e86:	09 f0       	breq	.+2      	; 0xe8a <handle_uart_buffer+0x5c6>
     e88:	7b c0       	rjmp	.+246    	; 0xf80 <handle_uart_buffer+0x6bc>
		v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     e8a:	80 91 93 39 	lds	r24, 0x3993	; 0x803993 <write_enabled>
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	09 f0       	breq	.+2      	; 0xe94 <handle_uart_buffer+0x5d0>
     e92:	76 c0       	rjmp	.+236    	; 0xf80 <handle_uart_buffer+0x6bc>
		write_enabled == 1)
		{
			memset(parse_buf, 0, sizeof(parse_buf));
     e94:	c2 e6       	ldi	r28, 0x62	; 98
     e96:	da e3       	ldi	r29, 0x3A	; 58
     e98:	0f 2e       	mov	r0, r31
     e9a:	f4 e1       	ldi	r31, 0x14	; 20
     e9c:	ff 2e       	mov	r15, r31
     e9e:	f0 2d       	mov	r31, r0
     ea0:	fe 01       	movw	r30, r28
     ea2:	2f 2d       	mov	r18, r15
     ea4:	11 92       	st	Z+, r1
     ea6:	2a 95       	dec	r18
     ea8:	e9 f7       	brne	.-6      	; 0xea4 <handle_uart_buffer+0x5e0>
			memcpy(parse_buf, recv + address_length + 1 + cmd_len[WCAL], CAL_NUM_LEN);
     eaa:	f8 01       	movw	r30, r16
     eac:	ef 55       	subi	r30, 0x5F	; 95
     eae:	f6 4c       	sbci	r31, 0xC6	; 198
     eb0:	8c e0       	ldi	r24, 0x0C	; 12
     eb2:	de 01       	movw	r26, r28
     eb4:	01 90       	ld	r0, Z+
     eb6:	0d 92       	st	X+, r0
     eb8:	8a 95       	dec	r24
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <handle_uart_buffer+0x5f0>
			cal_a = atof((char*)parse_buf);
     ebc:	ce 01       	movw	r24, r28
     ebe:	0e 94 83 19 	call	0x3306	; 0x3306 <atof>
     ec2:	60 93 41 3a 	sts	0x3A41, r22	; 0x803a41 <cal_a>
     ec6:	70 93 42 3a 	sts	0x3A42, r23	; 0x803a42 <cal_a+0x1>
     eca:	80 93 43 3a 	sts	0x3A43, r24	; 0x803a43 <cal_a+0x2>
     ece:	90 93 44 3a 	sts	0x3A44, r25	; 0x803a44 <cal_a+0x3>
			memset(parse_buf, 0, sizeof(parse_buf));
     ed2:	fe 01       	movw	r30, r28
     ed4:	2f 2d       	mov	r18, r15
     ed6:	11 92       	st	Z+, r1
     ed8:	2a 95       	dec	r18
     eda:	e9 f7       	brne	.-6      	; 0xed6 <handle_uart_buffer+0x612>
			memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN + cmd_len[WCAL], CAL_NUM_LEN);
     edc:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <address_length>
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	e3 55       	subi	r30, 0x53	; 83
     ee4:	f6 4c       	sbci	r31, 0xC6	; 198
     ee6:	8c e0       	ldi	r24, 0x0C	; 12
     ee8:	de 01       	movw	r26, r28
     eea:	01 90       	ld	r0, Z+
     eec:	0d 92       	st	X+, r0
     eee:	8a 95       	dec	r24
     ef0:	e1 f7       	brne	.-8      	; 0xeea <handle_uart_buffer+0x626>
			cal_b = atof((char*)parse_buf);
     ef2:	ce 01       	movw	r24, r28
     ef4:	0e 94 83 19 	call	0x3306	; 0x3306 <atof>
     ef8:	60 93 54 3a 	sts	0x3A54, r22	; 0x803a54 <cal_b>
     efc:	70 93 55 3a 	sts	0x3A55, r23	; 0x803a55 <cal_b+0x1>
     f00:	80 93 56 3a 	sts	0x3A56, r24	; 0x803a56 <cal_b+0x2>
     f04:	90 93 57 3a 	sts	0x3A57, r25	; 0x803a57 <cal_b+0x3>
			memset(parse_buf, 0, sizeof(parse_buf));
     f08:	fe 01       	movw	r30, r28
     f0a:	11 92       	st	Z+, r1
     f0c:	fa 94       	dec	r15
     f0e:	e9 f7       	brne	.-6      	; 0xf0a <handle_uart_buffer+0x646>
			memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN * 2 + cmd_len[WCAL], CAL_NUM_LEN);
     f10:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <address_length>
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	e7 54       	subi	r30, 0x47	; 71
     f18:	f6 4c       	sbci	r31, 0xC6	; 198
     f1a:	8c e0       	ldi	r24, 0x0C	; 12
     f1c:	de 01       	movw	r26, r28
     f1e:	01 90       	ld	r0, Z+
     f20:	0d 92       	st	X+, r0
     f22:	8a 95       	dec	r24
     f24:	e1 f7       	brne	.-8      	; 0xf1e <handle_uart_buffer+0x65a>
			cal_c = atof((char*)parse_buf);
     f26:	ce 01       	movw	r24, r28
     f28:	0e 94 83 19 	call	0x3306	; 0x3306 <atof>
     f2c:	60 93 94 39 	sts	0x3994, r22	; 0x803994 <cal_c>
     f30:	70 93 95 39 	sts	0x3995, r23	; 0x803995 <cal_c+0x1>
     f34:	80 93 96 39 	sts	0x3996, r24	; 0x803996 <cal_c+0x2>
     f38:	90 93 97 39 	sts	0x3997, r25	; 0x803997 <cal_c+0x3>
			v -= CAL_NUM_LEN * 3;
     f3c:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
     f40:	84 52       	subi	r24, 0x24	; 36
     f42:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			
			write_temp_cal_eeprom();
     f46:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <write_temp_cal_eeprom>
			build_cal_out_put(cal_a, cal_b, cal_c);
     f4a:	e0 90 94 39 	lds	r14, 0x3994	; 0x803994 <cal_c>
     f4e:	f0 90 95 39 	lds	r15, 0x3995	; 0x803995 <cal_c+0x1>
     f52:	00 91 96 39 	lds	r16, 0x3996	; 0x803996 <cal_c+0x2>
     f56:	10 91 97 39 	lds	r17, 0x3997	; 0x803997 <cal_c+0x3>
     f5a:	20 91 54 3a 	lds	r18, 0x3A54	; 0x803a54 <cal_b>
     f5e:	30 91 55 3a 	lds	r19, 0x3A55	; 0x803a55 <cal_b+0x1>
     f62:	40 91 56 3a 	lds	r20, 0x3A56	; 0x803a56 <cal_b+0x2>
     f66:	50 91 57 3a 	lds	r21, 0x3A57	; 0x803a57 <cal_b+0x3>
     f6a:	60 91 41 3a 	lds	r22, 0x3A41	; 0x803a41 <cal_a>
     f6e:	70 91 42 3a 	lds	r23, 0x3A42	; 0x803a42 <cal_a+0x1>
     f72:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <cal_a+0x2>
     f76:	90 91 44 3a 	lds	r25, 0x3A44	; 0x803a44 <cal_a+0x3>
     f7a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <build_cal_out_put>
     f7e:	59 c3       	rjmp	.+1714   	; 0x1632 <handle_uart_buffer+0xd6e>
		} // write RH cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
     f80:	c3 30       	cpi	r28, 0x03	; 3
     f82:	09 f4       	brne	.+2      	; 0xf86 <handle_uart_buffer+0x6c2>
     f84:	2c c5       	rjmp	.+2648   	; 0x19de <handle_uart_buffer+0x111a>
     f86:	8c 2f       	mov	r24, r28
     f88:	8b 7f       	andi	r24, 0xFB	; 251
     f8a:	89 30       	cpi	r24, 0x09	; 9
     f8c:	09 f0       	breq	.+2      	; 0xf90 <handle_uart_buffer+0x6cc>
     f8e:	9d c0       	rjmp	.+314    	; 0x10ca <handle_uart_buffer+0x806>
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     f90:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_start+0x6>
     f94:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_start+0x7>
     f98:	fb 01       	movw	r30, r22
     f9a:	01 90       	ld	r0, Z+
     f9c:	00 20       	and	r0, r0
     f9e:	e9 f7       	brne	.-6      	; 0xf9a <handle_uart_buffer+0x6d6>
     fa0:	31 97       	sbiw	r30, 0x01	; 1
     fa2:	af 01       	movw	r20, r30
     fa4:	46 1b       	sub	r20, r22
     fa6:	57 0b       	sbc	r21, r23
     fa8:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
     fac:	0d 2f       	mov	r16, r29
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	c8 01       	movw	r24, r16
     fb2:	83 56       	subi	r24, 0x63	; 99
     fb4:	96 4c       	sbci	r25, 0xC6	; 198
     fb6:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			v -= CAL_NUM_LEN * 3;
			
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // write RH cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
     fba:	89 2b       	or	r24, r25
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <handle_uart_buffer+0x6fc>
     fbe:	85 c0       	rjmp	.+266    	; 0x10ca <handle_uart_buffer+0x806>
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
		v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     fc0:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // write RH cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8d 2f       	mov	r24, r29
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	8a 96       	adiw	r24, 0x2a	; 42
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <handle_uart_buffer+0x710>
     fd2:	7b c0       	rjmp	.+246    	; 0x10ca <handle_uart_buffer+0x806>
		v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     fd4:	80 91 93 39 	lds	r24, 0x3993	; 0x803993 <write_enabled>
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	09 f0       	breq	.+2      	; 0xfde <handle_uart_buffer+0x71a>
     fdc:	76 c0       	rjmp	.+236    	; 0x10ca <handle_uart_buffer+0x806>
		write_enabled == 1)
		{
			memset(parse_buf, 0, sizeof(parse_buf));
     fde:	c2 e6       	ldi	r28, 0x62	; 98
     fe0:	da e3       	ldi	r29, 0x3A	; 58
     fe2:	0f 2e       	mov	r0, r31
     fe4:	f4 e1       	ldi	r31, 0x14	; 20
     fe6:	ff 2e       	mov	r15, r31
     fe8:	f0 2d       	mov	r31, r0
     fea:	fe 01       	movw	r30, r28
     fec:	2f 2d       	mov	r18, r15
     fee:	11 92       	st	Z+, r1
     ff0:	2a 95       	dec	r18
     ff2:	e9 f7       	brne	.-6      	; 0xfee <handle_uart_buffer+0x72a>
			memcpy(parse_buf, recv + address_length + 1 + cmd_len[WCAL], CAL_NUM_LEN);
     ff4:	f8 01       	movw	r30, r16
     ff6:	ef 55       	subi	r30, 0x5F	; 95
     ff8:	f6 4c       	sbci	r31, 0xC6	; 198
     ffa:	8c e0       	ldi	r24, 0x0C	; 12
     ffc:	de 01       	movw	r26, r28
     ffe:	01 90       	ld	r0, Z+
    1000:	0d 92       	st	X+, r0
    1002:	8a 95       	dec	r24
    1004:	e1 f7       	brne	.-8      	; 0xffe <handle_uart_buffer+0x73a>
			cal_d = atof((char*)parse_buf);
    1006:	ce 01       	movw	r24, r28
    1008:	0e 94 83 19 	call	0x3306	; 0x3306 <atof>
    100c:	60 93 33 3a 	sts	0x3A33, r22	; 0x803a33 <cal_d>
    1010:	70 93 34 3a 	sts	0x3A34, r23	; 0x803a34 <cal_d+0x1>
    1014:	80 93 35 3a 	sts	0x3A35, r24	; 0x803a35 <cal_d+0x2>
    1018:	90 93 36 3a 	sts	0x3A36, r25	; 0x803a36 <cal_d+0x3>
			memset(parse_buf, 0, sizeof(parse_buf));
    101c:	fe 01       	movw	r30, r28
    101e:	2f 2d       	mov	r18, r15
    1020:	11 92       	st	Z+, r1
    1022:	2a 95       	dec	r18
    1024:	e9 f7       	brne	.-6      	; 0x1020 <handle_uart_buffer+0x75c>
			memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN + cmd_len[WCAL], CAL_NUM_LEN);
    1026:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <address_length>
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	e3 55       	subi	r30, 0x53	; 83
    102e:	f6 4c       	sbci	r31, 0xC6	; 198
    1030:	8c e0       	ldi	r24, 0x0C	; 12
    1032:	de 01       	movw	r26, r28
    1034:	01 90       	ld	r0, Z+
    1036:	0d 92       	st	X+, r0
    1038:	8a 95       	dec	r24
    103a:	e1 f7       	brne	.-8      	; 0x1034 <handle_uart_buffer+0x770>
			cal_e = atof((char*)parse_buf);
    103c:	ce 01       	movw	r24, r28
    103e:	0e 94 83 19 	call	0x3306	; 0x3306 <atof>
    1042:	60 93 3d 3a 	sts	0x3A3D, r22	; 0x803a3d <cal_e>
    1046:	70 93 3e 3a 	sts	0x3A3E, r23	; 0x803a3e <cal_e+0x1>
    104a:	80 93 3f 3a 	sts	0x3A3F, r24	; 0x803a3f <cal_e+0x2>
    104e:	90 93 40 3a 	sts	0x3A40, r25	; 0x803a40 <cal_e+0x3>
			memset(parse_buf, 0, sizeof(parse_buf));
    1052:	fe 01       	movw	r30, r28
    1054:	11 92       	st	Z+, r1
    1056:	fa 94       	dec	r15
    1058:	e9 f7       	brne	.-6      	; 0x1054 <handle_uart_buffer+0x790>
			memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN * 2 + cmd_len[WCAL], CAL_NUM_LEN);
    105a:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <address_length>
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	e7 54       	subi	r30, 0x47	; 71
    1062:	f6 4c       	sbci	r31, 0xC6	; 198
    1064:	8c e0       	ldi	r24, 0x0C	; 12
    1066:	de 01       	movw	r26, r28
    1068:	01 90       	ld	r0, Z+
    106a:	0d 92       	st	X+, r0
    106c:	8a 95       	dec	r24
    106e:	e1 f7       	brne	.-8      	; 0x1068 <handle_uart_buffer+0x7a4>
			cal_f = atof((char*)parse_buf);
    1070:	ce 01       	movw	r24, r28
    1072:	0e 94 83 19 	call	0x3306	; 0x3306 <atof>
    1076:	60 93 7a 3a 	sts	0x3A7A, r22	; 0x803a7a <cal_f>
    107a:	70 93 7b 3a 	sts	0x3A7B, r23	; 0x803a7b <cal_f+0x1>
    107e:	80 93 7c 3a 	sts	0x3A7C, r24	; 0x803a7c <cal_f+0x2>
    1082:	90 93 7d 3a 	sts	0x3A7D, r25	; 0x803a7d <cal_f+0x3>
			v -= CAL_NUM_LEN * 3;
    1086:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    108a:	84 52       	subi	r24, 0x24	; 36
    108c:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			
			write_rh_cal_eeprom();
    1090:	0e 94 ef 03 	call	0x7de	; 0x7de <write_rh_cal_eeprom>
			build_cal_out_put(cal_d, cal_e, cal_f);
    1094:	e0 90 7a 3a 	lds	r14, 0x3A7A	; 0x803a7a <cal_f>
    1098:	f0 90 7b 3a 	lds	r15, 0x3A7B	; 0x803a7b <cal_f+0x1>
    109c:	00 91 7c 3a 	lds	r16, 0x3A7C	; 0x803a7c <cal_f+0x2>
    10a0:	10 91 7d 3a 	lds	r17, 0x3A7D	; 0x803a7d <cal_f+0x3>
    10a4:	20 91 3d 3a 	lds	r18, 0x3A3D	; 0x803a3d <cal_e>
    10a8:	30 91 3e 3a 	lds	r19, 0x3A3E	; 0x803a3e <cal_e+0x1>
    10ac:	40 91 3f 3a 	lds	r20, 0x3A3F	; 0x803a3f <cal_e+0x2>
    10b0:	50 91 40 3a 	lds	r21, 0x3A40	; 0x803a40 <cal_e+0x3>
    10b4:	60 91 33 3a 	lds	r22, 0x3A33	; 0x803a33 <cal_d>
    10b8:	70 91 34 3a 	lds	r23, 0x3A34	; 0x803a34 <cal_d+0x1>
    10bc:	80 91 35 3a 	lds	r24, 0x3A35	; 0x803a35 <cal_d+0x2>
    10c0:	90 91 36 3a 	lds	r25, 0x3A36	; 0x803a36 <cal_d+0x3>
    10c4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <build_cal_out_put>
    10c8:	b4 c2       	rjmp	.+1384   	; 0x1632 <handle_uart_buffer+0xd6e>
		} // RSRN
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    10ca:	c1 30       	cpi	r28, 0x01	; 1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <handle_uart_buffer+0x80c>
    10ce:	50 c3       	rjmp	.+1696   	; 0x1770 <handle_uart_buffer+0xeac>
    10d0:	c7 30       	cpi	r28, 0x07	; 7
    10d2:	19 f0       	breq	.+6      	; 0x10da <handle_uart_buffer+0x816>
    10d4:	cb 30       	cpi	r28, 0x0B	; 11
    10d6:	09 f0       	breq	.+2      	; 0x10da <handle_uart_buffer+0x816>
    10d8:	87 c0       	rjmp	.+270    	; 0x11e8 <handle_uart_buffer+0x924>
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    10da:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <__data_start+0x8>
    10de:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <__data_start+0x9>
    10e2:	fb 01       	movw	r30, r22
    10e4:	01 90       	ld	r0, Z+
    10e6:	00 20       	and	r0, r0
    10e8:	e9 f7       	brne	.-6      	; 0x10e4 <handle_uart_buffer+0x820>
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	af 01       	movw	r20, r30
    10ee:	46 1b       	sub	r20, r22
    10f0:	57 0b       	sbc	r21, r23
    10f2:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    10f6:	8d 2f       	mov	r24, r29
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	83 56       	subi	r24, 0x63	; 99
    10fc:	96 4c       	sbci	r25, 0xC6	; 198
    10fe:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			v -= CAL_NUM_LEN * 3;
			
			write_rh_cal_eeprom();
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // RSRN
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1102:	89 2b       	or	r24, r25
    1104:	09 f4       	brne	.+2      	; 0x1108 <handle_uart_buffer+0x844>
    1106:	84 c4       	rjmp	.+2312   	; 0x1a10 <handle_uart_buffer+0x114c>
    1108:	2b c0       	rjmp	.+86     	; 0x1160 <handle_uart_buffer+0x89c>
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
		v == address_length + 2 + cmd_len[RSRN])
    110a:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			
			write_rh_cal_eeprom();
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // RSRN
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	8d 2f       	mov	r24, r29
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	06 96       	adiw	r24, 0x06	; 6
    1116:	28 17       	cp	r18, r24
    1118:	39 07       	cpc	r19, r25
    111a:	01 f5       	brne	.+64     	; 0x115c <handle_uart_buffer+0x898>
		v == address_length + 2 + cmd_len[RSRN])
		{
			v--;
    111c:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    1120:	81 50       	subi	r24, 0x01	; 1
    1122:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			write_enabled = 0;
    1126:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
			memcpy(recv + v, addr, ADDRESS_LEN);
    112a:	a0 91 89 39 	lds	r26, 0x3989	; 0x803989 <v>
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	a4 56       	subi	r26, 0x64	; 100
    1132:	b6 4c       	sbci	r27, 0xC6	; 198
    1134:	86 e0       	ldi	r24, 0x06	; 6
    1136:	ed e4       	ldi	r30, 0x4D	; 77
    1138:	fa e3       	ldi	r31, 0x3A	; 58
    113a:	01 90       	ld	r0, Z+
    113c:	0d 92       	st	X+, r0
    113e:	8a 95       	dec	r24
    1140:	e1 f7       	brne	.-8      	; 0x113a <handle_uart_buffer+0x876>
			v += ADDRESS_LEN;
    1142:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    1146:	8a 5f       	subi	r24, 0xFA	; 250
    1148:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			send_size = v;
    114c:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
    1156:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
			send_enable = 1;
    115a:	72 c2       	rjmp	.+1252   	; 0x1640 <handle_uart_buffer+0xd7c>
		} // RS read settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    115c:	c1 30       	cpi	r28, 0x01	; 1
    115e:	29 f0       	breq	.+10     	; 0x116a <handle_uart_buffer+0x8a6>
    1160:	c7 30       	cpi	r28, 0x07	; 7
    1162:	19 f0       	breq	.+6      	; 0x116a <handle_uart_buffer+0x8a6>
    1164:	cb 30       	cpi	r28, 0x0B	; 11
    1166:	09 f0       	breq	.+2      	; 0x116a <handle_uart_buffer+0x8a6>
    1168:	3f c0       	rjmp	.+126    	; 0x11e8 <handle_uart_buffer+0x924>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    116a:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    116e:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1172:	fb 01       	movw	r30, r22
    1174:	01 90       	ld	r0, Z+
    1176:	00 20       	and	r0, r0
    1178:	e9 f7       	brne	.-6      	; 0x1174 <handle_uart_buffer+0x8b0>
    117a:	31 97       	sbiw	r30, 0x01	; 1
    117c:	af 01       	movw	r20, r30
    117e:	46 1b       	sub	r20, r22
    1180:	57 0b       	sbc	r21, r23
    1182:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    1186:	8d 2f       	mov	r24, r29
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	83 56       	subi	r24, 0x63	; 99
    118c:	96 4c       	sbci	r25, 0xC6	; 198
    118e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, addr, ADDRESS_LEN);
			v += ADDRESS_LEN;
			send_size = v;
			send_enable = 1;
		} // RS read settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1192:	89 2b       	or	r24, r25
    1194:	49 f5       	brne	.+82     	; 0x11e8 <handle_uart_buffer+0x924>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
		v == address_length + 2 + cmd_len[RS])
    1196:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			v += ADDRESS_LEN;
			send_size = v;
			send_enable = 1;
		} // RS read settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8d 2f       	mov	r24, r29
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	04 96       	adiw	r24, 0x04	; 4
    11a2:	28 17       	cp	r18, r24
    11a4:	39 07       	cpc	r19, r25
    11a6:	01 f5       	brne	.+64     	; 0x11e8 <handle_uart_buffer+0x924>
		v == address_length + 2 + cmd_len[RS])
		{
			v--;
    11a8:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    11ac:	81 50       	subi	r24, 0x01	; 1
    11ae:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			write_enabled = 0;
    11b2:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
			memcpy(recv + v, setting, sizeof(setting));
    11b6:	a0 91 89 39 	lds	r26, 0x3989	; 0x803989 <v>
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	a4 56       	subi	r26, 0x64	; 100
    11be:	b6 4c       	sbci	r27, 0xC6	; 198
    11c0:	88 e0       	ldi	r24, 0x08	; 8
    11c2:	e5 e4       	ldi	r30, 0x45	; 69
    11c4:	fa e3       	ldi	r31, 0x3A	; 58
    11c6:	01 90       	ld	r0, Z+
    11c8:	0d 92       	st	X+, r0
    11ca:	8a 95       	dec	r24
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <handle_uart_buffer+0x902>
			v += sizeof(setting);
    11ce:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    11d2:	88 5f       	subi	r24, 0xF8	; 248
    11d4:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			send_size = v;
    11d8:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
    11e2:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
			send_enable = 1;
    11e6:	2c c2       	rjmp	.+1112   	; 0x1640 <handle_uart_buffer+0xd7c>
		}  // RS read settings temp address
		else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    11e8:	c2 30       	cpi	r28, 0x02	; 2
    11ea:	09 f4       	brne	.+2      	; 0x11ee <handle_uart_buffer+0x92a>
    11ec:	d9 c2       	rjmp	.+1458   	; 0x17a0 <handle_uart_buffer+0xedc>
    11ee:	c5 30       	cpi	r28, 0x05	; 5
    11f0:	29 f0       	breq	.+10     	; 0x11fc <handle_uart_buffer+0x938>
    11f2:	8c 2f       	mov	r24, r28
    11f4:	8b 7f       	andi	r24, 0xFB	; 251
    11f6:	88 30       	cpi	r24, 0x08	; 8
    11f8:	09 f0       	breq	.+2      	; 0x11fc <handle_uart_buffer+0x938>
    11fa:	45 c0       	rjmp	.+138    	; 0x1286 <handle_uart_buffer+0x9c2>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    11fc:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1200:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1204:	fb 01       	movw	r30, r22
    1206:	01 90       	ld	r0, Z+
    1208:	00 20       	and	r0, r0
    120a:	e9 f7       	brne	.-6      	; 0x1206 <handle_uart_buffer+0x942>
    120c:	31 97       	sbiw	r30, 0x01	; 1
    120e:	af 01       	movw	r20, r30
    1210:	46 1b       	sub	r20, r22
    1212:	57 0b       	sbc	r21, r23
    1214:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    1218:	8d 2f       	mov	r24, r29
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	83 56       	subi	r24, 0x63	; 99
    121e:	96 4c       	sbci	r25, 0xC6	; 198
    1220:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, setting, sizeof(setting));
			v += sizeof(setting);
			send_size = v;
			send_enable = 1;
		}  // RS read settings temp address
		else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    1224:	89 2b       	or	r24, r25
    1226:	09 f0       	breq	.+2      	; 0x122a <handle_uart_buffer+0x966>
    1228:	fe c3       	rjmp	.+2044   	; 0x1a26 <handle_uart_buffer+0x1162>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
		v == address_length + 2 + cmd_len[RS])
    122a:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			v += sizeof(setting);
			send_size = v;
			send_enable = 1;
		}  // RS read settings temp address
		else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	8d 2f       	mov	r24, r29
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	04 96       	adiw	r24, 0x04	; 4
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	29 f5       	brne	.+74     	; 0x1286 <handle_uart_buffer+0x9c2>
		v == address_length + 2 + cmd_len[RS])
		{
			v--;
    123c:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    1240:	81 50       	subi	r24, 0x01	; 1
    1242:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			write_enabled = 0;
    1246:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
			GetHexString(single_temp_addr, hex_tmp);
    124a:	6d e1       	ldi	r22, 0x1D	; 29
    124c:	7a e3       	ldi	r23, 0x3A	; 58
    124e:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <single_temp_addr>
    1252:	0e 94 19 13 	call	0x2632	; 0x2632 <GetHexString>
			memcpy(recv + v, hex_tmp, 2);
    1256:	e0 91 89 39 	lds	r30, 0x3989	; 0x803989 <v>
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	e4 56       	subi	r30, 0x64	; 100
    125e:	f6 4c       	sbci	r31, 0xC6	; 198
    1260:	80 91 1d 3a 	lds	r24, 0x3A1D	; 0x803a1d <hex_tmp>
    1264:	90 91 1e 3a 	lds	r25, 0x3A1E	; 0x803a1e <hex_tmp+0x1>
    1268:	80 83       	st	Z, r24
    126a:	91 83       	std	Z+1, r25	; 0x01
			v += 2;
    126c:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    1270:	8e 5f       	subi	r24, 0xFE	; 254
    1272:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			send_size = v;
    1276:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
    1280:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
			send_enable = 1;
    1284:	dd c1       	rjmp	.+954    	; 0x1640 <handle_uart_buffer+0xd7c>
		} // RS read settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1286:	c3 30       	cpi	r28, 0x03	; 3
    1288:	09 f4       	brne	.+2      	; 0x128c <handle_uart_buffer+0x9c8>
    128a:	ea c2       	rjmp	.+1492   	; 0x1860 <handle_uart_buffer+0xf9c>
    128c:	c6 30       	cpi	r28, 0x06	; 6
    128e:	09 f4       	brne	.+2      	; 0x1292 <handle_uart_buffer+0x9ce>
    1290:	b7 c2       	rjmp	.+1390   	; 0x1800 <handle_uart_buffer+0xf3c>
    1292:	c9 30       	cpi	r28, 0x09	; 9
    1294:	09 f4       	brne	.+2      	; 0x1298 <handle_uart_buffer+0x9d4>
    1296:	cc c2       	rjmp	.+1432   	; 0x1830 <handle_uart_buffer+0xf6c>
    1298:	cd 30       	cpi	r28, 0x0D	; 13
    129a:	31 f5       	brne	.+76     	; 0x12e8 <handle_uart_buffer+0xa24>
    129c:	99 c2       	rjmp	.+1330   	; 0x17d0 <handle_uart_buffer+0xf0c>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
		v == address_length + 2 + cmd_len[RS])
		{
			v--;
    129e:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    12a2:	81 50       	subi	r24, 0x01	; 1
    12a4:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			write_enabled = 0;
    12a8:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
			GetHexString(single_rh_addr, hex_tmp);
    12ac:	6d e1       	ldi	r22, 0x1D	; 29
    12ae:	7a e3       	ldi	r23, 0x3A	; 58
    12b0:	80 91 3c 3a 	lds	r24, 0x3A3C	; 0x803a3c <single_rh_addr>
    12b4:	0e 94 19 13 	call	0x2632	; 0x2632 <GetHexString>
			memcpy(recv + v, hex_tmp, 2);
    12b8:	e0 91 89 39 	lds	r30, 0x3989	; 0x803989 <v>
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	e4 56       	subi	r30, 0x64	; 100
    12c0:	f6 4c       	sbci	r31, 0xC6	; 198
    12c2:	80 91 1d 3a 	lds	r24, 0x3A1D	; 0x803a1d <hex_tmp>
    12c6:	90 91 1e 3a 	lds	r25, 0x3A1E	; 0x803a1e <hex_tmp+0x1>
    12ca:	80 83       	st	Z, r24
    12cc:	91 83       	std	Z+1, r25	; 0x01
			v += 2;
    12ce:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    12d2:	8e 5f       	subi	r24, 0xFE	; 254
    12d4:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			send_size = v;
    12d8:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
    12e2:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
			send_enable = 1;
    12e6:	ac c1       	rjmp	.+856    	; 0x1640 <handle_uart_buffer+0xd7c>
		} // SU write settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    12e8:	c1 30       	cpi	r28, 0x01	; 1
    12ea:	09 f4       	brne	.+2      	; 0x12ee <handle_uart_buffer+0xa2a>
    12ec:	d1 c2       	rjmp	.+1442   	; 0x1890 <handle_uart_buffer+0xfcc>
    12ee:	c7 30       	cpi	r28, 0x07	; 7
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <handle_uart_buffer+0xa30>
    12f2:	a8 c3       	rjmp	.+1872   	; 0x1a44 <handle_uart_buffer+0x1180>
    12f4:	cb 30       	cpi	r28, 0x0B	; 11
    12f6:	09 f0       	breq	.+2      	; 0x12fa <handle_uart_buffer+0xa36>
    12f8:	d0 c0       	rjmp	.+416    	; 0x149a <handle_uart_buffer+0xbd6>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    12fa:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    12fe:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    1302:	fb 01       	movw	r30, r22
    1304:	01 90       	ld	r0, Z+
    1306:	00 20       	and	r0, r0
    1308:	e9 f7       	brne	.-6      	; 0x1304 <handle_uart_buffer+0xa40>
    130a:	31 97       	sbiw	r30, 0x01	; 1
    130c:	af 01       	movw	r20, r30
    130e:	46 1b       	sub	r20, r22
    1310:	57 0b       	sbc	r21, r23
    1312:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    1316:	0d 2f       	mov	r16, r29
    1318:	10 e0       	ldi	r17, 0x00	; 0
    131a:	c8 01       	movw	r24, r16
    131c:	83 56       	subi	r24, 0x63	; 99
    131e:	96 4c       	sbci	r25, 0xC6	; 198
    1320:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, hex_tmp, 2);
			v += 2;
			send_size = v;
			send_enable = 1;
		} // SU write settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1324:	89 2b       	or	r24, r25
    1326:	09 f0       	breq	.+2      	; 0x132a <handle_uart_buffer+0xa66>
    1328:	b8 c0       	rjmp	.+368    	; 0x149a <handle_uart_buffer+0xbd6>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
		v >= address_length + 2 + cmd_len[SU] &&
    132a:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			v += 2;
			send_size = v;
			send_enable = 1;
		} // SU write settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	8d 2f       	mov	r24, r29
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	04 96       	adiw	r24, 0x04	; 4
    1336:	28 17       	cp	r18, r24
    1338:	39 07       	cpc	r19, r25
    133a:	0c f4       	brge	.+2      	; 0x133e <handle_uart_buffer+0xa7a>
    133c:	ae c0       	rjmp	.+348    	; 0x149a <handle_uart_buffer+0xbd6>
		v >= address_length + 2 + cmd_len[SU] &&
    133e:	80 91 93 39 	lds	r24, 0x3993	; 0x803993 <write_enabled>
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	09 f0       	breq	.+2      	; 0x1348 <handle_uart_buffer+0xa84>
    1346:	a9 c0       	rjmp	.+338    	; 0x149a <handle_uart_buffer+0xbd6>
		write_enabled == 1)
		{
			v--;
    1348:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    134c:	81 50       	subi	r24, 0x01	; 1
    134e:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			write_enabled = 0;
    1352:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
			memcpy(hex_tmp, recv + address_length + 1 + cmd_len[SU], 2);
    1356:	f8 01       	movw	r30, r16
    1358:	e1 56       	subi	r30, 0x61	; 97
    135a:	f6 4c       	sbci	r31, 0xC6	; 198
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <hex_tmp>
    1364:	90 93 1e 3a 	sts	0x3A1E, r25	; 0x803a1e <hex_tmp+0x1>
			tmp_addr = GetByteFromString(hex_tmp);
    1368:	8d e1       	ldi	r24, 0x1D	; 29
    136a:	9a e3       	ldi	r25, 0x3A	; 58
    136c:	0e 94 2c 13 	call	0x2658	; 0x2658 <GetByteFromString>
    1370:	80 93 1c 3a 	sts	0x3A1C, r24	; 0x803a1c <tmp_addr>
			memcpy(hex_tmp, recv + address_length + 3 + cmd_len[SU], 2);
    1374:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <address_length>
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	ef 55       	subi	r30, 0x5F	; 95
    137c:	f6 4c       	sbci	r31, 0xC6	; 198
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <hex_tmp>
    1386:	90 93 1e 3a 	sts	0x3A1E, r25	; 0x803a1e <hex_tmp+0x1>
			tmp_uart = GetByteFromString(hex_tmp);
    138a:	8d e1       	ldi	r24, 0x1D	; 29
    138c:	9a e3       	ldi	r25, 0x3A	; 58
    138e:	0e 94 2c 13 	call	0x2658	; 0x2658 <GetByteFromString>
    1392:	80 93 53 3a 	sts	0x3A53, r24	; 0x803a53 <tmp_uart>
			
			if (tmp_addr >= 0x21 && temp_data <= 0x7E)
    1396:	c0 91 1c 3a 	lds	r28, 0x3A1C	; 0x803a1c <tmp_addr>
    139a:	c1 32       	cpi	r28, 0x21	; 33
    139c:	18 f1       	brcs	.+70     	; 0x13e4 <handle_uart_buffer+0xb20>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4c ef       	ldi	r20, 0xFC	; 252
    13a4:	52 e4       	ldi	r21, 0x42	; 66
    13a6:	60 91 2f 3a 	lds	r22, 0x3A2F	; 0x803a2f <temp_data>
    13aa:	70 91 30 3a 	lds	r23, 0x3A30	; 0x803a30 <temp_data+0x1>
    13ae:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <temp_data+0x2>
    13b2:	90 91 32 3a 	lds	r25, 0x3A32	; 0x803a32 <temp_data+0x3>
    13b6:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    13ba:	18 16       	cp	r1, r24
    13bc:	9c f0       	brlt	.+38     	; 0x13e4 <handle_uart_buffer+0xb20>
			{
				setting[0] = recv[address_length + 1 + cmd_len[SU]];
    13be:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <address_length>
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	a5 e4       	ldi	r26, 0x45	; 69
    13c6:	ba e3       	ldi	r27, 0x3A	; 58
    13c8:	e4 56       	subi	r30, 0x64	; 100
    13ca:	f6 4c       	sbci	r31, 0xC6	; 198
    13cc:	83 81       	ldd	r24, Z+3	; 0x03
    13ce:	8c 93       	st	X, r24
				setting[1] = recv[address_length + 2 + cmd_len[SU]];
    13d0:	84 81       	ldd	r24, Z+4	; 0x04
    13d2:	11 96       	adiw	r26, 0x01	; 1
    13d4:	8c 93       	st	X, r24
				single_primary_addr = tmp_addr;
    13d6:	c0 93 61 3a 	sts	0x3A61, r28	; 0x803a61 <single_primary_addr>
				EEPROM_write(EEPROM_PRIMARY_ID_START_BYTE, single_primary_addr);
    13da:	6c 2f       	mov	r22, r28
    13dc:	81 e2       	ldi	r24, 0x21	; 33
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
			}
			
			if (tmp_uart == 0x02 || tmp_uart == 0x04 || tmp_uart == 0x05 || tmp_uart == 0x06 || tmp_uart == 0x07)
    13e4:	80 91 53 3a 	lds	r24, 0x3A53	; 0x803a53 <tmp_uart>
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	21 f0       	breq	.+8      	; 0x13f4 <handle_uart_buffer+0xb30>
    13ec:	9c ef       	ldi	r25, 0xFC	; 252
    13ee:	98 0f       	add	r25, r24
    13f0:	94 30       	cpi	r25, 0x04	; 4
    13f2:	b8 f4       	brcc	.+46     	; 0x1422 <handle_uart_buffer+0xb5e>
			{
				if (tmp_uart != uart_baud_rate) {
    13f4:	90 91 58 3a 	lds	r25, 0x3A58	; 0x803a58 <uart_baud_rate>
    13f8:	89 17       	cp	r24, r25
    13fa:	19 f0       	breq	.+6      	; 0x1402 <handle_uart_buffer+0xb3e>
					bUpdateUart = 1;
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	90 93 80 39 	sts	0x3980, r25	; 0x803980 <bUpdateUart>
				}
				uart_baud_rate = tmp_uart;
    1402:	80 93 58 3a 	sts	0x3A58, r24	; 0x803a58 <uart_baud_rate>
				setting[2] = recv[address_length + 3 + cmd_len[SU]];
    1406:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <address_length>
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	a5 e4       	ldi	r26, 0x45	; 69
    140e:	ba e3       	ldi	r27, 0x3A	; 58
    1410:	e4 56       	subi	r30, 0x64	; 100
    1412:	f6 4c       	sbci	r31, 0xC6	; 198
    1414:	85 81       	ldd	r24, Z+5	; 0x05
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	8c 93       	st	X, r24
    141a:	12 97       	sbiw	r26, 0x02	; 2
				setting[3] = recv[address_length + 4 + cmd_len[SU]];
    141c:	86 81       	ldd	r24, Z+6	; 0x06
    141e:	13 96       	adiw	r26, 0x03	; 3
    1420:	8c 93       	st	X, r24
			}
			
			setting[4] = recv[address_length + 5 + cmd_len[SU]];
    1422:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <address_length>
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	e4 56       	subi	r30, 0x64	; 100
    142a:	f6 4c       	sbci	r31, 0xC6	; 198
    142c:	47 81       	ldd	r20, Z+7	; 0x07
    142e:	a5 e4       	ldi	r26, 0x45	; 69
    1430:	ba e3       	ldi	r27, 0x3A	; 58
    1432:	14 96       	adiw	r26, 0x04	; 4
    1434:	4c 93       	st	X, r20
    1436:	14 97       	sbiw	r26, 0x04	; 4
			setting[5] = recv[address_length + 6 + cmd_len[SU]];
    1438:	20 85       	ldd	r18, Z+8	; 0x08
    143a:	15 96       	adiw	r26, 0x05	; 5
    143c:	2c 93       	st	X, r18
    143e:	15 97       	sbiw	r26, 0x05	; 5
			setting[6] = recv[address_length + 7 + cmd_len[SU]];
    1440:	81 85       	ldd	r24, Z+9	; 0x09
    1442:	16 96       	adiw	r26, 0x06	; 6
    1444:	8c 93       	st	X, r24
    1446:	16 97       	sbiw	r26, 0x06	; 6
			
			check_sum_enable = setting[4] - 0x30;
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	40 53       	subi	r20, 0x30	; 48
    144c:	51 09       	sbc	r21, r1
    144e:	40 93 8f 39 	sts	0x398F, r20	; 0x80398f <check_sum_enable>
    1452:	50 93 90 39 	sts	0x3990, r21	; 0x803990 <check_sum_enable+0x1>
			delay = setting[5] - 0x30;
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	20 53       	subi	r18, 0x30	; 48
    145a:	31 09       	sbc	r19, r1
    145c:	20 93 8d 39 	sts	0x398D, r18	; 0x80398d <delay>
    1460:	30 93 8e 39 	sts	0x398E, r19	; 0x80398e <delay+0x1>
			avg_level = setting[6] - 0x30;
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	c0 97       	sbiw	r24, 0x30	; 48
    1468:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <avg_level>
    146c:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <avg_level+0x1>
    1470:	8d 01       	movw	r16, r26
    1472:	c2 e2       	ldi	r28, 0x22	; 34
    1474:	d0 e0       	ldi	r29, 0x00	; 0
			
			for(int i = 0; i < 8; i++) {
				EEPROM_write(EEPROM_SETTING_START_BYTE + i, setting[i]);
    1476:	f8 01       	movw	r30, r16
    1478:	61 91       	ld	r22, Z+
    147a:	8f 01       	movw	r16, r30
    147c:	ce 01       	movw	r24, r28
    147e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
    1482:	21 96       	adiw	r28, 0x01	; 1
			
			check_sum_enable = setting[4] - 0x30;
			delay = setting[5] - 0x30;
			avg_level = setting[6] - 0x30;
			
			for(int i = 0; i < 8; i++) {
    1484:	ca 32       	cpi	r28, 0x2A	; 42
    1486:	d1 05       	cpc	r29, r1
    1488:	b1 f7       	brne	.-20     	; 0x1476 <handle_uart_buffer+0xbb2>
				EEPROM_write(EEPROM_SETTING_START_BYTE + i, setting[i]);
			}
						
			send_size = v;
    148a:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
    1494:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
			send_enable = 1;
    1498:	d3 c0       	rjmp	.+422    	; 0x1640 <handle_uart_buffer+0xd7c>
		}  // SU write settings temp address
		else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    149a:	c2 30       	cpi	r28, 0x02	; 2
    149c:	39 f0       	breq	.+14     	; 0x14ac <handle_uart_buffer+0xbe8>
    149e:	c5 30       	cpi	r28, 0x05	; 5
    14a0:	29 f0       	breq	.+10     	; 0x14ac <handle_uart_buffer+0xbe8>
    14a2:	8c 2f       	mov	r24, r28
    14a4:	8b 7f       	andi	r24, 0xFB	; 251
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	09 f0       	breq	.+2      	; 0x14ac <handle_uart_buffer+0xbe8>
    14aa:	5e c0       	rjmp	.+188    	; 0x1568 <handle_uart_buffer+0xca4>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    14ac:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    14b0:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    14b4:	fb 01       	movw	r30, r22
    14b6:	01 90       	ld	r0, Z+
    14b8:	00 20       	and	r0, r0
    14ba:	e9 f7       	brne	.-6      	; 0x14b6 <handle_uart_buffer+0xbf2>
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	af 01       	movw	r20, r30
    14c0:	46 1b       	sub	r20, r22
    14c2:	57 0b       	sbc	r21, r23
    14c4:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    14c8:	0d 2f       	mov	r16, r29
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	c8 01       	movw	r24, r16
    14ce:	83 56       	subi	r24, 0x63	; 99
    14d0:	96 4c       	sbci	r25, 0xC6	; 198
    14d2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			}
						
			send_size = v;
			send_enable = 1;
		}  // SU write settings temp address
		else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    14d6:	89 2b       	or	r24, r25
    14d8:	09 f0       	breq	.+2      	; 0x14dc <handle_uart_buffer+0xc18>
    14da:	f3 c1       	rjmp	.+998    	; 0x18c2 <handle_uart_buffer+0xffe>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
		v >= address_length + 2 + cmd_len[SU] &&
    14dc:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
						
			send_size = v;
			send_enable = 1;
		}  // SU write settings temp address
		else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	c8 01       	movw	r24, r16
    14e4:	04 96       	adiw	r24, 0x04	; 4
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	0c f4       	brge	.+2      	; 0x14ee <handle_uart_buffer+0xc2a>
    14ec:	ee c1       	rjmp	.+988    	; 0x18ca <handle_uart_buffer+0x1006>
		v >= address_length + 2 + cmd_len[SU] &&
    14ee:	80 91 93 39 	lds	r24, 0x3993	; 0x803993 <write_enabled>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <handle_uart_buffer+0xc34>
    14f6:	e9 c1       	rjmp	.+978    	; 0x18ca <handle_uart_buffer+0x1006>
		write_enabled == 1)
		{
			v--;
    14f8:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    14fc:	81 50       	subi	r24, 0x01	; 1
    14fe:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			write_enabled = 0;
    1502:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
			memcpy(hex_tmp, recv + address_length + 1 + cmd_len[SU], 2);
    1506:	f8 01       	movw	r30, r16
    1508:	e1 56       	subi	r30, 0x61	; 97
    150a:	f6 4c       	sbci	r31, 0xC6	; 198
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <hex_tmp>
    1514:	90 93 1e 3a 	sts	0x3A1E, r25	; 0x803a1e <hex_tmp+0x1>
			tmp_addr = GetByteFromString(hex_tmp);
    1518:	8d e1       	ldi	r24, 0x1D	; 29
    151a:	9a e3       	ldi	r25, 0x3A	; 58
    151c:	0e 94 2c 13 	call	0x2658	; 0x2658 <GetByteFromString>
    1520:	c8 2f       	mov	r28, r24
    1522:	80 93 1c 3a 	sts	0x3A1C, r24	; 0x803a1c <tmp_addr>
			
			if (tmp_addr >= 0x21 && temp_data <= 0x7E)
    1526:	81 32       	cpi	r24, 0x21	; 33
    1528:	b8 f0       	brcs	.+46     	; 0x1558 <handle_uart_buffer+0xc94>
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4c ef       	ldi	r20, 0xFC	; 252
    1530:	52 e4       	ldi	r21, 0x42	; 66
    1532:	60 91 2f 3a 	lds	r22, 0x3A2F	; 0x803a2f <temp_data>
    1536:	70 91 30 3a 	lds	r23, 0x3A30	; 0x803a30 <temp_data+0x1>
    153a:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <temp_data+0x2>
    153e:	90 91 32 3a 	lds	r25, 0x3A32	; 0x803a32 <temp_data+0x3>
    1542:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    1546:	18 16       	cp	r1, r24
    1548:	3c f0       	brlt	.+14     	; 0x1558 <handle_uart_buffer+0xc94>
			{
				single_temp_addr = tmp_addr;
    154a:	c0 93 37 3a 	sts	0x3A37, r28	; 0x803a37 <single_temp_addr>
				EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
    154e:	6c 2f       	mov	r22, r28
    1550:	8f e1       	ldi	r24, 0x1F	; 31
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
			}
			send_size = v;
    1558:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
    1562:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
			send_enable = 1;
    1566:	6c c0       	rjmp	.+216    	; 0x1640 <handle_uart_buffer+0xd7c>
		} // SU write settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1568:	c3 30       	cpi	r28, 0x03	; 3
    156a:	31 f0       	breq	.+12     	; 0x1578 <handle_uart_buffer+0xcb4>
    156c:	c6 30       	cpi	r28, 0x06	; 6
    156e:	21 f0       	breq	.+8      	; 0x1578 <handle_uart_buffer+0xcb4>
    1570:	cb 7f       	andi	r28, 0xFB	; 251
    1572:	c9 30       	cpi	r28, 0x09	; 9
    1574:	09 f0       	breq	.+2      	; 0x1578 <handle_uart_buffer+0xcb4>
    1576:	5d c0       	rjmp	.+186    	; 0x1632 <handle_uart_buffer+0xd6e>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1578:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    157c:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    1580:	fb 01       	movw	r30, r22
    1582:	01 90       	ld	r0, Z+
    1584:	00 20       	and	r0, r0
    1586:	e9 f7       	brne	.-6      	; 0x1582 <handle_uart_buffer+0xcbe>
    1588:	31 97       	sbiw	r30, 0x01	; 1
    158a:	af 01       	movw	r20, r30
    158c:	46 1b       	sub	r20, r22
    158e:	57 0b       	sbc	r21, r23
    1590:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    1594:	0d 2f       	mov	r16, r29
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	c8 01       	movw	r24, r16
    159a:	83 56       	subi	r24, 0x63	; 99
    159c:	96 4c       	sbci	r25, 0xC6	; 198
    159e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
				EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
			}
			send_size = v;
			send_enable = 1;
		} // SU write settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    15a2:	89 2b       	or	r24, r25
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <handle_uart_buffer+0xce4>
    15a6:	45 c0       	rjmp	.+138    	; 0x1632 <handle_uart_buffer+0xd6e>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
		v >= address_length + 2 + cmd_len[SU] &&
    15a8:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			}
			send_size = v;
			send_enable = 1;
		} // SU write settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	8d 2f       	mov	r24, r29
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	04 96       	adiw	r24, 0x04	; 4
    15b4:	28 17       	cp	r18, r24
    15b6:	39 07       	cpc	r19, r25
    15b8:	e4 f1       	brlt	.+120    	; 0x1632 <handle_uart_buffer+0xd6e>
		v >= address_length + 2 + cmd_len[SU] &&
    15ba:	80 91 93 39 	lds	r24, 0x3993	; 0x803993 <write_enabled>
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	c1 f5       	brne	.+112    	; 0x1632 <handle_uart_buffer+0xd6e>
		write_enabled == 1)
		{
			v--;
    15c2:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    15c6:	81 50       	subi	r24, 0x01	; 1
    15c8:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <v>
			write_enabled = 0;
    15cc:	10 92 93 39 	sts	0x3993, r1	; 0x803993 <write_enabled>
			memcpy(hex_tmp, recv + address_length + 1 + cmd_len[SU], 2);
    15d0:	f8 01       	movw	r30, r16
    15d2:	e1 56       	subi	r30, 0x61	; 97
    15d4:	f6 4c       	sbci	r31, 0xC6	; 198
    15d6:	80 81       	ld	r24, Z
    15d8:	91 81       	ldd	r25, Z+1	; 0x01
    15da:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <hex_tmp>
    15de:	90 93 1e 3a 	sts	0x3A1E, r25	; 0x803a1e <hex_tmp+0x1>
			tmp_addr = GetByteFromString(hex_tmp);
    15e2:	8d e1       	ldi	r24, 0x1D	; 29
    15e4:	9a e3       	ldi	r25, 0x3A	; 58
    15e6:	0e 94 2c 13 	call	0x2658	; 0x2658 <GetByteFromString>
    15ea:	c8 2f       	mov	r28, r24
    15ec:	80 93 1c 3a 	sts	0x3A1C, r24	; 0x803a1c <tmp_addr>
			
			if (tmp_addr >= 0x21 && temp_data <= 0x7E)
    15f0:	81 32       	cpi	r24, 0x21	; 33
    15f2:	b8 f0       	brcs	.+46     	; 0x1622 <handle_uart_buffer+0xd5e>
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	4c ef       	ldi	r20, 0xFC	; 252
    15fa:	52 e4       	ldi	r21, 0x42	; 66
    15fc:	60 91 2f 3a 	lds	r22, 0x3A2F	; 0x803a2f <temp_data>
    1600:	70 91 30 3a 	lds	r23, 0x3A30	; 0x803a30 <temp_data+0x1>
    1604:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <temp_data+0x2>
    1608:	90 91 32 3a 	lds	r25, 0x3A32	; 0x803a32 <temp_data+0x3>
    160c:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    1610:	18 16       	cp	r1, r24
    1612:	3c f0       	brlt	.+14     	; 0x1622 <handle_uart_buffer+0xd5e>
			{
				single_rh_addr = tmp_addr;
    1614:	c0 93 3c 3a 	sts	0x3A3C, r28	; 0x803a3c <single_rh_addr>
				EEPROM_write(EEPROM_RH_ADDR_START_BYTE, single_rh_addr);
    1618:	6c 2f       	mov	r22, r28
    161a:	80 e2       	ldi	r24, 0x20	; 32
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
			}
			send_size = v;
    1622:	80 91 89 39 	lds	r24, 0x3989	; 0x803989 <v>
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	80 93 83 39 	sts	0x3983, r24	; 0x803983 <send_size>
    162c:	90 93 84 39 	sts	0x3984, r25	; 0x803984 <send_size+0x1>
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <handle_uart_buffer+0xd7c>
			send_enable = 1;
		}
		
		if (send_enable == 1)
    1632:	80 91 85 39 	lds	r24, 0x3985	; 0x803985 <send_enable>
    1636:	90 91 86 39 	lds	r25, 0x3986	; 0x803986 <send_enable+0x1>
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	09 f0       	breq	.+2      	; 0x1640 <handle_uart_buffer+0xd7c>
    163e:	42 c0       	rjmp	.+132    	; 0x16c4 <handle_uart_buffer+0xe00>
		{
			send_enable = 0;
    1640:	10 92 85 39 	sts	0x3985, r1	; 0x803985 <send_enable>
    1644:	10 92 86 39 	sts	0x3986, r1	; 0x803986 <send_enable+0x1>
			if (delay != 0)
    1648:	80 91 8d 39 	lds	r24, 0x398D	; 0x80398d <delay>
    164c:	90 91 8e 39 	lds	r25, 0x398E	; 0x80398e <delay+0x1>
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	e1 f0       	breq	.+56     	; 0x168c <handle_uart_buffer+0xdc8>
			{
				for(n = 0; n < delay; n++)
    1654:	10 92 87 39 	sts	0x3987, r1	; 0x803987 <n>
    1658:	20 91 87 39 	lds	r18, 0x3987	; 0x803987 <n>
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	28 17       	cp	r18, r24
    1660:	39 07       	cpc	r19, r25
    1662:	a4 f4       	brge	.+40     	; 0x168c <handle_uart_buffer+0xdc8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1664:	82 e6       	ldi	r24, 0x62	; 98
    1666:	93 e0       	ldi	r25, 0x03	; 3
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <handle_uart_buffer+0xda4>
    166c:	00 c0       	rjmp	.+0      	; 0x166e <handle_uart_buffer+0xdaa>
    166e:	80 91 87 39 	lds	r24, 0x3987	; 0x803987 <n>
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	80 93 87 39 	sts	0x3987, r24	; 0x803987 <n>
    1678:	80 91 87 39 	lds	r24, 0x3987	; 0x803987 <n>
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	20 91 8d 39 	lds	r18, 0x398D	; 0x80398d <delay>
    1682:	30 91 8e 39 	lds	r19, 0x398E	; 0x80398e <delay+0x1>
    1686:	82 17       	cp	r24, r18
    1688:	93 07       	cpc	r25, r19
    168a:	64 f3       	brlt	.-40     	; 0x1664 <handle_uart_buffer+0xda0>
				{
					_delay_us(1040);
				}
			}
			print_bytes((uint8_t *)recv, send_size, check_sum_enable);
    168c:	40 91 8f 39 	lds	r20, 0x398F	; 0x80398f <check_sum_enable>
    1690:	50 91 90 39 	lds	r21, 0x3990	; 0x803990 <check_sum_enable+0x1>
    1694:	60 91 83 39 	lds	r22, 0x3983	; 0x803983 <send_size>
    1698:	8c e9       	ldi	r24, 0x9C	; 156
    169a:	99 e3       	ldi	r25, 0x39	; 57
    169c:	0e 94 4e 13 	call	0x269c	; 0x269c <print_bytes>
			
			if (bUpdateUart)
    16a0:	80 91 80 39 	lds	r24, 0x3980	; 0x803980 <bUpdateUart>
    16a4:	88 23       	and	r24, r24
    16a6:	71 f0       	breq	.+28     	; 0x16c4 <handle_uart_buffer+0xe00>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16a8:	9a e2       	ldi	r25, 0x2A	; 42
    16aa:	ec e2       	ldi	r30, 0x2C	; 44
    16ac:	fa e0       	ldi	r31, 0x0A	; 10
    16ae:	91 50       	subi	r25, 0x01	; 1
    16b0:	e0 40       	sbci	r30, 0x00	; 0
    16b2:	f0 40       	sbci	r31, 0x00	; 0
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <handle_uart_buffer+0xdea>
    16b6:	00 00       	nop
			{
				_delay_ms(1000);
				bUpdateUart = 0;
    16b8:	10 92 80 39 	sts	0x3980, r1	; 0x803980 <bUpdateUart>
				initUSART(uart_baud_rate);
    16bc:	80 91 58 3a 	lds	r24, 0x3A58	; 0x803a58 <uart_baud_rate>
    16c0:	0e 94 b7 12 	call	0x256e	; 0x256e <initUSART>
			}
		}
		address_type = 0;
    16c4:	10 92 92 39 	sts	0x3992, r1	; 0x803992 <address_type>
		v = 0;
    16c8:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <v>
		
		handle_uart_flag = 0;
    16cc:	10 92 7a 39 	sts	0x397A, r1	; 0x80397a <handle_uart_flag>
    16d0:	10 92 7b 39 	sts	0x397B, r1	; 0x80397b <handle_uart_flag+0x1>
	}
}
    16d4:	e8 c1       	rjmp	.+976    	; 0x1aa6 <handle_uart_buffer+0x11e2>
		{
			get_avg_data(&temp_data, 2);
			build_output(temp_data);
		} // Other RD output
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    16d6:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    16da:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    16de:	fb 01       	movw	r30, r22
    16e0:	01 90       	ld	r0, Z+
    16e2:	00 20       	and	r0, r0
    16e4:	e9 f7       	brne	.-6      	; 0x16e0 <handle_uart_buffer+0xe1c>
    16e6:	31 97       	sbiw	r30, 0x01	; 1
    16e8:	af 01       	movw	r20, r30
    16ea:	46 1b       	sub	r20, r22
    16ec:	57 0b       	sbc	r21, r23
    16ee:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    16f2:	8d 2f       	mov	r24, r29
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	83 56       	subi	r24, 0x63	; 99
    16f8:	96 4c       	sbci	r25, 0xC6	; 198
    16fa:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		v == address_length + 2 + cmd_len[RD])
		{
			get_avg_data(&temp_data, 2);
			build_output(temp_data);
		} // Other RD output
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    16fe:	89 2b       	or	r24, r25
    1700:	09 f4       	brne	.+2      	; 0x1704 <handle_uart_buffer+0xe40>
    1702:	2f c1       	rjmp	.+606    	; 0x1962 <handle_uart_buffer+0x109e>
    1704:	39 c1       	rjmp	.+626    	; 0x1978 <handle_uart_buffer+0x10b4>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
		{
			build_output(ERROR_SYNTAX);
		} // WE
		else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) &&
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	8c 0f       	add	r24, r28
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	08 f0       	brcs	.+2      	; 0x1710 <handle_uart_buffer+0xe4c>
    170e:	dd ca       	rjmp	.-2630   	; 0xcca <handle_uart_buffer+0x406>
    1710:	e5 ca       	rjmp	.-2614   	; 0xcdc <handle_uart_buffer+0x418>
		{
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
    1712:	c2 30       	cpi	r28, 0x02	; 2
    1714:	09 f0       	breq	.+2      	; 0x1718 <handle_uart_buffer+0xe54>
    1716:	4f cb       	rjmp	.-2402   	; 0xdb6 <handle_uart_buffer+0x4f2>
    1718:	14 cb       	rjmp	.-2520   	; 0xd42 <handle_uart_buffer+0x47e>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    171a:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
    171e:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
    1722:	fb 01       	movw	r30, r22
    1724:	01 90       	ld	r0, Z+
    1726:	00 20       	and	r0, r0
    1728:	e9 f7       	brne	.-6      	; 0x1724 <handle_uart_buffer+0xe60>
    172a:	31 97       	sbiw	r30, 0x01	; 1
    172c:	af 01       	movw	r20, r30
    172e:	46 1b       	sub	r20, r22
    1730:	57 0b       	sbc	r21, r23
    1732:	c8 01       	movw	r24, r16
    1734:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		{
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
    1738:	89 2b       	or	r24, r25
    173a:	09 f4       	brne	.+2      	; 0x173e <handle_uart_buffer+0xe7a>
    173c:	36 c1       	rjmp	.+620    	; 0x19aa <handle_uart_buffer+0x10e6>
    173e:	84 cb       	rjmp	.-2296   	; 0xe48 <handle_uart_buffer+0x584>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Read RH Cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    1740:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
    1744:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
    1748:	fb 01       	movw	r30, r22
    174a:	01 90       	ld	r0, Z+
    174c:	00 20       	and	r0, r0
    174e:	e9 f7       	brne	.-6      	; 0x174a <handle_uart_buffer+0xe86>
    1750:	31 97       	sbiw	r30, 0x01	; 1
    1752:	af 01       	movw	r20, r30
    1754:	46 1b       	sub	r20, r22
    1756:	57 0b       	sbc	r21, r23
    1758:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    175c:	8d 2f       	mov	r24, r29
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	83 56       	subi	r24, 0x63	; 99
    1762:	96 4c       	sbci	r25, 0xC6	; 198
    1764:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Read RH Cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
    1768:	89 2b       	or	r24, r25
    176a:	09 f4       	brne	.+2      	; 0x176e <handle_uart_buffer+0xeaa>
    176c:	29 c1       	rjmp	.+594    	; 0x19c0 <handle_uart_buffer+0x10fc>
    176e:	37 c1       	rjmp	.+622    	; 0x19de <handle_uart_buffer+0x111a>
			
			write_rh_cal_eeprom();
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // RSRN
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    1770:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <__data_start+0x8>
    1774:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <__data_start+0x9>
    1778:	fb 01       	movw	r30, r22
    177a:	01 90       	ld	r0, Z+
    177c:	00 20       	and	r0, r0
    177e:	e9 f7       	brne	.-6      	; 0x177a <handle_uart_buffer+0xeb6>
    1780:	31 97       	sbiw	r30, 0x01	; 1
    1782:	af 01       	movw	r20, r30
    1784:	46 1b       	sub	r20, r22
    1786:	57 0b       	sbc	r21, r23
    1788:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    178c:	8d 2f       	mov	r24, r29
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	83 56       	subi	r24, 0x63	; 99
    1792:	96 4c       	sbci	r25, 0xC6	; 198
    1794:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			v -= CAL_NUM_LEN * 3;
			
			write_rh_cal_eeprom();
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // RSRN
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1798:	89 2b       	or	r24, r25
    179a:	09 f4       	brne	.+2      	; 0x179e <handle_uart_buffer+0xeda>
    179c:	b6 cc       	rjmp	.-1684   	; 0x110a <handle_uart_buffer+0x846>
    179e:	e5 cc       	rjmp	.-1590   	; 0x116a <handle_uart_buffer+0x8a6>
			v += sizeof(setting);
			send_size = v;
			send_enable = 1;
		}  // RS read settings temp address
		else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    17a0:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    17a4:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    17a8:	fb 01       	movw	r30, r22
    17aa:	01 90       	ld	r0, Z+
    17ac:	00 20       	and	r0, r0
    17ae:	e9 f7       	brne	.-6      	; 0x17aa <handle_uart_buffer+0xee6>
    17b0:	31 97       	sbiw	r30, 0x01	; 1
    17b2:	af 01       	movw	r20, r30
    17b4:	46 1b       	sub	r20, r22
    17b6:	57 0b       	sbc	r21, r23
    17b8:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    17bc:	8d 2f       	mov	r24, r29
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	83 56       	subi	r24, 0x63	; 99
    17c2:	96 4c       	sbci	r25, 0xC6	; 198
    17c4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, setting, sizeof(setting));
			v += sizeof(setting);
			send_size = v;
			send_enable = 1;
		}  // RS read settings temp address
		else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    17c8:	89 2b       	or	r24, r25
    17ca:	09 f4       	brne	.+2      	; 0x17ce <handle_uart_buffer+0xf0a>
    17cc:	2e cd       	rjmp	.-1444   	; 0x122a <handle_uart_buffer+0x966>
    17ce:	6e ce       	rjmp	.-804    	; 0x14ac <handle_uart_buffer+0xbe8>
			v += 2;
			send_size = v;
			send_enable = 1;
		} // RS read settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    17d0:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    17d4:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    17d8:	fb 01       	movw	r30, r22
    17da:	01 90       	ld	r0, Z+
    17dc:	00 20       	and	r0, r0
    17de:	e9 f7       	brne	.-6      	; 0x17da <handle_uart_buffer+0xf16>
    17e0:	31 97       	sbiw	r30, 0x01	; 1
    17e2:	af 01       	movw	r20, r30
    17e4:	46 1b       	sub	r20, r22
    17e6:	57 0b       	sbc	r21, r23
    17e8:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    17ec:	8d 2f       	mov	r24, r29
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	83 56       	subi	r24, 0x63	; 99
    17f2:	96 4c       	sbci	r25, 0xC6	; 198
    17f4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, hex_tmp, 2);
			v += 2;
			send_size = v;
			send_enable = 1;
		} // RS read settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    17f8:	89 2b       	or	r24, r25
    17fa:	09 f4       	brne	.+2      	; 0x17fe <handle_uart_buffer+0xf3a>
    17fc:	18 c1       	rjmp	.+560    	; 0x1a2e <handle_uart_buffer+0x116a>
    17fe:	bc ce       	rjmp	.-648    	; 0x1578 <handle_uart_buffer+0xcb4>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1800:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1804:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1808:	fb 01       	movw	r30, r22
    180a:	01 90       	ld	r0, Z+
    180c:	00 20       	and	r0, r0
    180e:	e9 f7       	brne	.-6      	; 0x180a <handle_uart_buffer+0xf46>
    1810:	31 97       	sbiw	r30, 0x01	; 1
    1812:	af 01       	movw	r20, r30
    1814:	46 1b       	sub	r20, r22
    1816:	57 0b       	sbc	r21, r23
    1818:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    181c:	8d 2f       	mov	r24, r29
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	83 56       	subi	r24, 0x63	; 99
    1822:	96 4c       	sbci	r25, 0xC6	; 198
    1824:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, hex_tmp, 2);
			v += 2;
			send_size = v;
			send_enable = 1;
		} // RS read settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1828:	89 2b       	or	r24, r25
    182a:	09 f0       	breq	.+2      	; 0x182e <handle_uart_buffer+0xf6a>
    182c:	a5 ce       	rjmp	.-694    	; 0x1578 <handle_uart_buffer+0xcb4>
    182e:	ff c0       	rjmp	.+510    	; 0x1a2e <handle_uart_buffer+0x116a>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1830:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1834:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1838:	fb 01       	movw	r30, r22
    183a:	01 90       	ld	r0, Z+
    183c:	00 20       	and	r0, r0
    183e:	e9 f7       	brne	.-6      	; 0x183a <handle_uart_buffer+0xf76>
    1840:	31 97       	sbiw	r30, 0x01	; 1
    1842:	af 01       	movw	r20, r30
    1844:	46 1b       	sub	r20, r22
    1846:	57 0b       	sbc	r21, r23
    1848:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    184c:	8d 2f       	mov	r24, r29
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	83 56       	subi	r24, 0x63	; 99
    1852:	96 4c       	sbci	r25, 0xC6	; 198
    1854:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, hex_tmp, 2);
			v += 2;
			send_size = v;
			send_enable = 1;
		} // RS read settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1858:	89 2b       	or	r24, r25
    185a:	09 f4       	brne	.+2      	; 0x185e <handle_uart_buffer+0xf9a>
    185c:	e8 c0       	rjmp	.+464    	; 0x1a2e <handle_uart_buffer+0x116a>
    185e:	8c ce       	rjmp	.-744    	; 0x1578 <handle_uart_buffer+0xcb4>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1860:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1864:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1868:	fb 01       	movw	r30, r22
    186a:	01 90       	ld	r0, Z+
    186c:	00 20       	and	r0, r0
    186e:	e9 f7       	brne	.-6      	; 0x186a <handle_uart_buffer+0xfa6>
    1870:	31 97       	sbiw	r30, 0x01	; 1
    1872:	af 01       	movw	r20, r30
    1874:	46 1b       	sub	r20, r22
    1876:	57 0b       	sbc	r21, r23
    1878:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    187c:	8d 2f       	mov	r24, r29
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	83 56       	subi	r24, 0x63	; 99
    1882:	96 4c       	sbci	r25, 0xC6	; 198
    1884:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, hex_tmp, 2);
			v += 2;
			send_size = v;
			send_enable = 1;
		} // RS read settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1888:	89 2b       	or	r24, r25
    188a:	09 f4       	brne	.+2      	; 0x188e <handle_uart_buffer+0xfca>
    188c:	d0 c0       	rjmp	.+416    	; 0x1a2e <handle_uart_buffer+0x116a>
    188e:	74 ce       	rjmp	.-792    	; 0x1578 <handle_uart_buffer+0xcb4>
			v += 2;
			send_size = v;
			send_enable = 1;
		} // SU write settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1890:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    1894:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    1898:	fb 01       	movw	r30, r22
    189a:	01 90       	ld	r0, Z+
    189c:	00 20       	and	r0, r0
    189e:	e9 f7       	brne	.-6      	; 0x189a <handle_uart_buffer+0xfd6>
    18a0:	31 97       	sbiw	r30, 0x01	; 1
    18a2:	af 01       	movw	r20, r30
    18a4:	46 1b       	sub	r20, r22
    18a6:	57 0b       	sbc	r21, r23
    18a8:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    18ac:	0d 2f       	mov	r16, r29
    18ae:	10 e0       	ldi	r17, 0x00	; 0
    18b0:	c8 01       	movw	r24, r16
    18b2:	83 56       	subi	r24, 0x63	; 99
    18b4:	96 4c       	sbci	r25, 0xC6	; 198
    18b6:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, hex_tmp, 2);
			v += 2;
			send_size = v;
			send_enable = 1;
		} // SU write settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    18ba:	89 2b       	or	r24, r25
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <handle_uart_buffer+0xffc>
    18be:	db c0       	rjmp	.+438    	; 0x1a76 <handle_uart_buffer+0x11b2>
    18c0:	b8 ce       	rjmp	.-656    	; 0x1632 <handle_uart_buffer+0xd6e>
				EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
			}
			send_size = v;
			send_enable = 1;
		} // SU write settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    18c2:	c3 30       	cpi	r28, 0x03	; 3
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <handle_uart_buffer+0x1004>
    18c6:	e2 c0       	rjmp	.+452    	; 0x1a8c <handle_uart_buffer+0x11c8>
    18c8:	b4 ce       	rjmp	.-664    	; 0x1632 <handle_uart_buffer+0xd6e>
    18ca:	c3 30       	cpi	r28, 0x03	; 3
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <handle_uart_buffer+0x100c>
    18ce:	6c ce       	rjmp	.-808    	; 0x15a8 <handle_uart_buffer+0xce4>
    18d0:	e6 c0       	rjmp	.+460    	; 0x1a9e <handle_uart_buffer+0x11da>
		}
		
		recv[0] = '*';
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    18d2:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    18d6:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    18da:	fb 01       	movw	r30, r22
    18dc:	01 90       	ld	r0, Z+
    18de:	00 20       	and	r0, r0
    18e0:	e9 f7       	brne	.-6      	; 0x18dc <handle_uart_buffer+0x1018>
    18e2:	31 97       	sbiw	r30, 0x01	; 1
    18e4:	af 01       	movw	r20, r30
    18e6:	46 1b       	sub	r20, r22
    18e8:	57 0b       	sbc	r21, r23
    18ea:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    18ee:	8d 2f       	mov	r24, r29
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	83 56       	subi	r24, 0x63	; 99
    18f4:	96 4c       	sbci	r25, 0xC6	; 198
    18f6:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			address_type = 0;
		}
		
		recv[0] = '*';
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    18fa:	89 2b       	or	r24, r25
    18fc:	09 f4       	brne	.+2      	; 0x1900 <handle_uart_buffer+0x103c>
    18fe:	b6 c8       	rjmp	.-3732   	; 0xa6c <handle_uart_buffer+0x1a8>
    1900:	0b c9       	rjmp	.-3562   	; 0xb18 <handle_uart_buffer+0x254>
			get_avg_data(&temp_data, 0);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    1902:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    1906:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    190a:	fb 01       	movw	r30, r22
    190c:	01 90       	ld	r0, Z+
    190e:	00 20       	and	r0, r0
    1910:	e9 f7       	brne	.-6      	; 0x190c <handle_uart_buffer+0x1048>
    1912:	31 97       	sbiw	r30, 0x01	; 1
    1914:	af 01       	movw	r20, r30
    1916:	46 1b       	sub	r20, r22
    1918:	57 0b       	sbc	r21, r23
    191a:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    191e:	8d 2f       	mov	r24, r29
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	83 56       	subi	r24, 0x63	; 99
    1924:	96 4c       	sbci	r25, 0xC6	; 198
    1926:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		{
			get_avg_data(&temp_data, 0);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    192a:	89 2b       	or	r24, r25
    192c:	09 f4       	brne	.+2      	; 0x1930 <handle_uart_buffer+0x106c>
    192e:	10 c9       	rjmp	.-3552   	; 0xb50 <handle_uart_buffer+0x28c>
    1930:	63 c9       	rjmp	.-3386   	; 0xbf8 <handle_uart_buffer+0x334>
			get_avg_data(&rh_data, 1);
			rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;
			build_output(rh_data);
		} // RD RH temp sensor response, all address cases
		else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    1932:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    1936:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    193a:	fb 01       	movw	r30, r22
    193c:	01 90       	ld	r0, Z+
    193e:	00 20       	and	r0, r0
    1940:	e9 f7       	brne	.-6      	; 0x193c <handle_uart_buffer+0x1078>
    1942:	31 97       	sbiw	r30, 0x01	; 1
    1944:	af 01       	movw	r20, r30
    1946:	46 1b       	sub	r20, r22
    1948:	57 0b       	sbc	r21, r23
    194a:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    194e:	8d 2f       	mov	r24, r29
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	83 56       	subi	r24, 0x63	; 99
    1954:	96 4c       	sbci	r25, 0xC6	; 198
    1956:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		{
			get_avg_data(&rh_data, 1);
			rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;
			build_output(rh_data);
		} // RD RH temp sensor response, all address cases
		else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
    195a:	89 2b       	or	r24, r25
    195c:	09 f4       	brne	.+2      	; 0x1960 <handle_uart_buffer+0x109c>
    195e:	66 c9       	rjmp	.-3380   	; 0xc2c <handle_uart_buffer+0x368>
    1960:	d2 ce       	rjmp	.-604    	; 0x1706 <handle_uart_buffer+0xe42>
			get_avg_data(&temp_data, 2);
			build_output(temp_data);
		} // Other RD output
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
    1962:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
		{
			get_avg_data(&temp_data, 2);
			build_output(temp_data);
		} // Other RD output
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	8d 2f       	mov	r24, r29
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	04 96       	adiw	r24, 0x04	; 4
    196e:	28 17       	cp	r18, r24
    1970:	39 07       	cpc	r19, r25
    1972:	09 f0       	breq	.+2      	; 0x1976 <handle_uart_buffer+0x10b2>
    1974:	b3 c9       	rjmp	.-3226   	; 0xcdc <handle_uart_buffer+0x418>
    1976:	9b c9       	rjmp	.-3274   	; 0xcae <handle_uart_buffer+0x3ea>
		v == address_length + 2 + cmd_len[RD])
		{
			build_output(ERROR_SYNTAX);
		} // WE
		else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
    1978:	60 91 02 38 	lds	r22, 0x3802	; 0x803802 <__data_start+0x2>
    197c:	70 91 03 38 	lds	r23, 0x3803	; 0x803803 <__data_start+0x3>
    1980:	fb 01       	movw	r30, r22
    1982:	01 90       	ld	r0, Z+
    1984:	00 20       	and	r0, r0
    1986:	e9 f7       	brne	.-6      	; 0x1982 <handle_uart_buffer+0x10be>
    1988:	31 97       	sbiw	r30, 0x01	; 1
    198a:	af 01       	movw	r20, r30
    198c:	46 1b       	sub	r20, r22
    198e:	57 0b       	sbc	r21, r23
    1990:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    1994:	0d 2f       	mov	r16, r29
    1996:	10 e0       	ldi	r17, 0x00	; 0
    1998:	03 56       	subi	r16, 0x63	; 99
    199a:	16 4c       	sbci	r17, 0xC6	; 198
    199c:	c8 01       	movw	r24, r16
    199e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
		{
			build_output(ERROR_SYNTAX);
		} // WE
		else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) &&
    19a2:	89 2b       	or	r24, r25
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <handle_uart_buffer+0x10e4>
    19a6:	c9 c9       	rjmp	.-3182   	; 0xd3a <handle_uart_buffer+0x476>
    19a8:	b0 c9       	rjmp	.-3232   	; 0xd0a <handle_uart_buffer+0x446>
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
    19aa:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	8d 2f       	mov	r24, r29
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	06 96       	adiw	r24, 0x06	; 6
    19b6:	28 17       	cp	r18, r24
    19b8:	39 07       	cpc	r19, r25
    19ba:	09 f0       	breq	.+2      	; 0x19be <handle_uart_buffer+0x10fa>
    19bc:	ff c9       	rjmp	.-3074   	; 0xdbc <handle_uart_buffer+0x4f8>
    19be:	e0 c9       	rjmp	.-3136   	; 0xd80 <handle_uart_buffer+0x4bc>
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Read RH Cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
    19c0:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Read RH Cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8d 2f       	mov	r24, r29
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	06 96       	adiw	r24, 0x06	; 6
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	09 f0       	breq	.+2      	; 0x19d4 <handle_uart_buffer+0x1110>
    19d2:	35 ca       	rjmp	.-2966   	; 0xe3e <handle_uart_buffer+0x57a>
    19d4:	17 ca       	rjmp	.-3026   	; 0xe04 <handle_uart_buffer+0x540>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // write temp cal
		else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
    19d6:	c2 30       	cpi	r28, 0x02	; 2
    19d8:	09 f0       	breq	.+2      	; 0x19dc <handle_uart_buffer+0x1118>
    19da:	d5 ca       	rjmp	.-2646   	; 0xf86 <handle_uart_buffer+0x6c2>
    19dc:	35 ca       	rjmp	.-2966   	; 0xe48 <handle_uart_buffer+0x584>
			
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // write RH cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
    19de:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_start+0x6>
    19e2:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_start+0x7>
    19e6:	fb 01       	movw	r30, r22
    19e8:	01 90       	ld	r0, Z+
    19ea:	00 20       	and	r0, r0
    19ec:	e9 f7       	brne	.-6      	; 0x19e8 <handle_uart_buffer+0x1124>
    19ee:	31 97       	sbiw	r30, 0x01	; 1
    19f0:	af 01       	movw	r20, r30
    19f2:	46 1b       	sub	r20, r22
    19f4:	57 0b       	sbc	r21, r23
    19f6:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    19fa:	0d 2f       	mov	r16, r29
    19fc:	10 e0       	ldi	r17, 0x00	; 0
    19fe:	c8 01       	movw	r24, r16
    1a00:	83 56       	subi	r24, 0x63	; 99
    1a02:	96 4c       	sbci	r25, 0xC6	; 198
    1a04:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			v -= CAL_NUM_LEN * 3;
			
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // write RH cal
		else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
    1a08:	89 2b       	or	r24, r25
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <handle_uart_buffer+0x114a>
    1a0c:	d9 ca       	rjmp	.-2638   	; 0xfc0 <handle_uart_buffer+0x6fc>
    1a0e:	f1 cb       	rjmp	.-2078   	; 0x11f2 <handle_uart_buffer+0x92e>
			write_rh_cal_eeprom();
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // RSRN
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
		v == address_length + 2 + cmd_len[RSRN])
    1a10:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			
			write_rh_cal_eeprom();
			build_cal_out_put(cal_d, cal_e, cal_f);
		} // RSRN
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	8d 2f       	mov	r24, r29
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	06 96       	adiw	r24, 0x06	; 6
    1a1c:	28 17       	cp	r18, r24
    1a1e:	39 07       	cpc	r19, r25
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <handle_uart_buffer+0x1160>
    1a22:	9e cb       	rjmp	.-2244   	; 0x1160 <handle_uart_buffer+0x89c>
    1a24:	7b cb       	rjmp	.-2314   	; 0x111c <handle_uart_buffer+0x858>
			memcpy(recv + v, hex_tmp, 2);
			v += 2;
			send_size = v;
			send_enable = 1;
		} // RS read settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1a26:	c3 30       	cpi	r28, 0x03	; 3
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <handle_uart_buffer+0x1168>
    1a2a:	30 cc       	rjmp	.-1952   	; 0x128c <handle_uart_buffer+0x9c8>
    1a2c:	a5 cd       	rjmp	.-1206   	; 0x1578 <handle_uart_buffer+0xcb4>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
		v == address_length + 2 + cmd_len[RS])
    1a2e:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			v += 2;
			send_size = v;
			send_enable = 1;
		} // RS read settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	8d 2f       	mov	r24, r29
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	04 96       	adiw	r24, 0x04	; 4
    1a3a:	28 17       	cp	r18, r24
    1a3c:	39 07       	cpc	r19, r25
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <handle_uart_buffer+0x117e>
    1a40:	2e cc       	rjmp	.-1956   	; 0x129e <handle_uart_buffer+0x9da>
    1a42:	2f cd       	rjmp	.-1442   	; 0x14a2 <handle_uart_buffer+0xbde>
			v += 2;
			send_size = v;
			send_enable = 1;
		} // SU write settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1a44:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    1a48:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    1a4c:	fb 01       	movw	r30, r22
    1a4e:	01 90       	ld	r0, Z+
    1a50:	00 20       	and	r0, r0
    1a52:	e9 f7       	brne	.-6      	; 0x1a4e <handle_uart_buffer+0x118a>
    1a54:	31 97       	sbiw	r30, 0x01	; 1
    1a56:	af 01       	movw	r20, r30
    1a58:	46 1b       	sub	r20, r22
    1a5a:	57 0b       	sbc	r21, r23
    1a5c:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    1a60:	0d 2f       	mov	r16, r29
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	c8 01       	movw	r24, r16
    1a66:	83 56       	subi	r24, 0x63	; 99
    1a68:	96 4c       	sbci	r25, 0xC6	; 198
    1a6a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <memcmp>
			memcpy(recv + v, hex_tmp, 2);
			v += 2;
			send_size = v;
			send_enable = 1;
		} // SU write settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1a6e:	89 2b       	or	r24, r25
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <handle_uart_buffer+0x11b0>
    1a72:	17 cd       	rjmp	.-1490   	; 0x14a2 <handle_uart_buffer+0xbde>
    1a74:	5a cc       	rjmp	.-1868   	; 0x132a <handle_uart_buffer+0xa66>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
		v >= address_length + 2 + cmd_len[SU] &&
    1a76:	20 91 89 39 	lds	r18, 0x3989	; 0x803989 <v>
			v += 2;
			send_size = v;
			send_enable = 1;
		} // SU write settings address + baud + rate
		else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	8d 2f       	mov	r24, r29
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	04 96       	adiw	r24, 0x04	; 4
    1a82:	28 17       	cp	r18, r24
    1a84:	39 07       	cpc	r19, r25
    1a86:	0c f0       	brlt	.+2      	; 0x1a8a <handle_uart_buffer+0x11c6>
    1a88:	5a cc       	rjmp	.-1868   	; 0x133e <handle_uart_buffer+0xa7a>
    1a8a:	0b cd       	rjmp	.-1514   	; 0x14a2 <handle_uart_buffer+0xbde>
				EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
			}
			send_size = v;
			send_enable = 1;
		} // SU write settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1a8c:	c6 30       	cpi	r28, 0x06	; 6
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <handle_uart_buffer+0x11ce>
    1a90:	6f cd       	rjmp	.-1314   	; 0x1570 <handle_uart_buffer+0xcac>
    1a92:	cf cd       	rjmp	.-1122   	; 0x1632 <handle_uart_buffer+0xd6e>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1a94:	d0 91 91 39 	lds	r29, 0x3991	; 0x803991 <address_length>
    1a98:	0d 2f       	mov	r16, r29
    1a9a:	10 e0       	ldi	r17, 0x00	; 0
    1a9c:	85 cd       	rjmp	.-1270   	; 0x15a8 <handle_uart_buffer+0xce4>
				EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
			}
			send_size = v;
			send_enable = 1;
		} // SU write settings rh address
		else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1a9e:	c6 30       	cpi	r28, 0x06	; 6
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <handle_uart_buffer+0x11e0>
    1aa2:	66 cd       	rjmp	.-1332   	; 0x1570 <handle_uart_buffer+0xcac>
    1aa4:	f7 cf       	rjmp	.-18     	; 0x1a94 <handle_uart_buffer+0x11d0>
		address_type = 0;
		v = 0;
		
		handle_uart_flag = 0;
	}
}
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	9f 90       	pop	r9
    1abc:	8f 90       	pop	r8
    1abe:	08 95       	ret

00001ac0 <init_config>:

void init_config()
{
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
	int i;
	
	
	cal_a = DEFAULT_CAL_A;
    1acc:	10 92 41 3a 	sts	0x3A41, r1	; 0x803a41 <cal_a>
    1ad0:	10 92 42 3a 	sts	0x3A42, r1	; 0x803a42 <cal_a+0x1>
    1ad4:	10 92 43 3a 	sts	0x3A43, r1	; 0x803a43 <cal_a+0x2>
    1ad8:	10 92 44 3a 	sts	0x3A44, r1	; 0x803a44 <cal_a+0x3>
	cal_b = DEFAULT_CAL_B;
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e8       	ldi	r26, 0x80	; 128
    1ae2:	bf e3       	ldi	r27, 0x3F	; 63
    1ae4:	80 93 54 3a 	sts	0x3A54, r24	; 0x803a54 <cal_b>
    1ae8:	90 93 55 3a 	sts	0x3A55, r25	; 0x803a55 <cal_b+0x1>
    1aec:	a0 93 56 3a 	sts	0x3A56, r26	; 0x803a56 <cal_b+0x2>
    1af0:	b0 93 57 3a 	sts	0x3A57, r27	; 0x803a57 <cal_b+0x3>
	cal_c = DEFAULT_CAL_C;
    1af4:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <cal_c>
    1af8:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <cal_c+0x1>
    1afc:	10 92 96 39 	sts	0x3996, r1	; 0x803996 <cal_c+0x2>
    1b00:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <cal_c+0x3>
	
	cal_d = DEFAULT_CAL_D;
    1b04:	10 92 33 3a 	sts	0x3A33, r1	; 0x803a33 <cal_d>
    1b08:	10 92 34 3a 	sts	0x3A34, r1	; 0x803a34 <cal_d+0x1>
    1b0c:	10 92 35 3a 	sts	0x3A35, r1	; 0x803a35 <cal_d+0x2>
    1b10:	10 92 36 3a 	sts	0x3A36, r1	; 0x803a36 <cal_d+0x3>
	cal_e = DEFAULT_CAL_E;
    1b14:	80 93 3d 3a 	sts	0x3A3D, r24	; 0x803a3d <cal_e>
    1b18:	90 93 3e 3a 	sts	0x3A3E, r25	; 0x803a3e <cal_e+0x1>
    1b1c:	a0 93 3f 3a 	sts	0x3A3F, r26	; 0x803a3f <cal_e+0x2>
    1b20:	b0 93 40 3a 	sts	0x3A40, r27	; 0x803a40 <cal_e+0x3>
	cal_f = DEFAULT_CAL_F;
    1b24:	10 92 7a 3a 	sts	0x3A7A, r1	; 0x803a7a <cal_f>
    1b28:	10 92 7b 3a 	sts	0x3A7B, r1	; 0x803a7b <cal_f+0x1>
    1b2c:	10 92 7c 3a 	sts	0x3A7C, r1	; 0x803a7c <cal_f+0x2>
    1b30:	10 92 7d 3a 	sts	0x3A7D, r1	; 0x803a7d <cal_f+0x3>
    1b34:	0f 2e       	mov	r0, r31
    1b36:	fc ec       	ldi	r31, 0xCC	; 204
    1b38:	ef 2e       	mov	r14, r31
    1b3a:	f9 eb       	ldi	r31, 0xB9	; 185
    1b3c:	ff 2e       	mov	r15, r31
    1b3e:	f0 2d       	mov	r31, r0
    1b40:	0d e4       	ldi	r16, 0x4D	; 77
    1b42:	1a e3       	ldi	r17, 0x3A	; 58

	for(i = 0; i < 6; i++)
    1b44:	c0 e0       	ldi	r28, 0x00	; 0
    1b46:	d0 e0       	ldi	r29, 0x00	; 0
	{
		addr[i] = DEFAULT_ADDR[i];
    1b48:	f7 01       	movw	r30, r14
    1b4a:	61 91       	ld	r22, Z+
    1b4c:	7f 01       	movw	r14, r30
    1b4e:	f8 01       	movw	r30, r16
    1b50:	61 93       	st	Z+, r22
    1b52:	8f 01       	movw	r16, r30
		EEPROM_write(EEPROM_ADDR_START_BYTE + i, DEFAULT_ADDR[i]);
    1b54:	21 96       	adiw	r28, 0x01	; 1
    1b56:	ce 01       	movw	r24, r28
    1b58:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
	
	cal_d = DEFAULT_CAL_D;
	cal_e = DEFAULT_CAL_E;
	cal_f = DEFAULT_CAL_F;

	for(i = 0; i < 6; i++)
    1b5c:	c6 30       	cpi	r28, 0x06	; 6
    1b5e:	d1 05       	cpc	r29, r1
    1b60:	99 f7       	brne	.-26     	; 0x1b48 <init_config+0x88>
    1b62:	0f 2e       	mov	r0, r31
    1b64:	f3 ed       	ldi	r31, 0xD3	; 211
    1b66:	ef 2e       	mov	r14, r31
    1b68:	f9 eb       	ldi	r31, 0xB9	; 185
    1b6a:	ff 2e       	mov	r15, r31
    1b6c:	f0 2d       	mov	r31, r0
    1b6e:	05 e4       	ldi	r16, 0x45	; 69
    1b70:	1a e3       	ldi	r17, 0x3A	; 58
    1b72:	c2 e2       	ldi	r28, 0x22	; 34
    1b74:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	// setting = [Single Address x 2 bytes] + [uart baud rate x 2 bytes] + [check_sum_enable x 1 byte] + [delay x 1 byte] + [avg_level x 1 byte]
	for(i = 0; i < 8; i++)
	{
		setting[i] = DEFAULT_SETTING[i];
    1b76:	f7 01       	movw	r30, r14
    1b78:	61 91       	ld	r22, Z+
    1b7a:	7f 01       	movw	r14, r30
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	61 93       	st	Z+, r22
    1b80:	8f 01       	movw	r16, r30
		EEPROM_write(EEPROM_SETTING_START_BYTE + i, DEFAULT_SETTING[i]);
    1b82:	ce 01       	movw	r24, r28
    1b84:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
    1b88:	21 96       	adiw	r28, 0x01	; 1
		addr[i] = DEFAULT_ADDR[i];
		EEPROM_write(EEPROM_ADDR_START_BYTE + i, DEFAULT_ADDR[i]);
	}
	
	// setting = [Single Address x 2 bytes] + [uart baud rate x 2 bytes] + [check_sum_enable x 1 byte] + [delay x 1 byte] + [avg_level x 1 byte]
	for(i = 0; i < 8; i++)
    1b8a:	ca 32       	cpi	r28, 0x2A	; 42
    1b8c:	d1 05       	cpc	r29, r1
    1b8e:	99 f7       	brne	.-26     	; 0x1b76 <init_config+0xb6>
	{
		setting[i] = DEFAULT_SETTING[i];
		EEPROM_write(EEPROM_SETTING_START_BYTE + i, DEFAULT_SETTING[i]);
	}
	
	memcpy(hex_tmp, setting, 2);
    1b90:	c5 e4       	ldi	r28, 0x45	; 69
    1b92:	da e3       	ldi	r29, 0x3A	; 58
    1b94:	88 81       	ld	r24, Y
    1b96:	99 81       	ldd	r25, Y+1	; 0x01
    1b98:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <hex_tmp>
    1b9c:	90 93 1e 3a 	sts	0x3A1E, r25	; 0x803a1e <hex_tmp+0x1>
	single_primary_addr = GetByteFromString(hex_tmp);
    1ba0:	8d e1       	ldi	r24, 0x1D	; 29
    1ba2:	9a e3       	ldi	r25, 0x3A	; 58
    1ba4:	0e 94 2c 13 	call	0x2658	; 0x2658 <GetByteFromString>
    1ba8:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <single_primary_addr>
			
	memcpy(hex_tmp, setting + 2, 2);
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb0:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <hex_tmp>
    1bb4:	90 93 1e 3a 	sts	0x3A1E, r25	; 0x803a1e <hex_tmp+0x1>
	uart_baud_rate = GetByteFromString(hex_tmp);
    1bb8:	8d e1       	ldi	r24, 0x1D	; 29
    1bba:	9a e3       	ldi	r25, 0x3A	; 58
    1bbc:	0e 94 2c 13 	call	0x2658	; 0x2658 <GetByteFromString>
    1bc0:	80 93 58 3a 	sts	0x3A58, r24	; 0x803a58 <uart_baud_rate>
	
	check_sum_enable = DEFAULT_SETTING[4] - 0x30;
    1bc4:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <check_sum_enable>
    1bc8:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <check_sum_enable+0x1>
	delay = DEFAULT_SETTING[5] - 0x30;
    1bcc:	10 92 8d 39 	sts	0x398D, r1	; 0x80398d <delay>
    1bd0:	10 92 8e 39 	sts	0x398E, r1	; 0x80398e <delay+0x1>
	avg_level = DEFAULT_SETTING[6] - 0x30;
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <avg_level>
    1bdc:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <avg_level+0x1>
	

	
	write_temp_cal_eeprom();
    1be0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <write_temp_cal_eeprom>
	write_rh_cal_eeprom();
    1be4:	0e 94 ef 03 	call	0x7de	; 0x7de <write_rh_cal_eeprom>


	
	EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, DEFAULT_SINGLE_TEMP_ADDR);
    1be8:	62 e4       	ldi	r22, 0x42	; 66
    1bea:	8f e1       	ldi	r24, 0x1F	; 31
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
	EEPROM_write(EEPROM_RH_ADDR_START_BYTE, DEFAULT_SINGLE_RH_ADDR);
    1bf2:	63 e4       	ldi	r22, 0x43	; 67
    1bf4:	80 e2       	ldi	r24, 0x20	; 32
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
	EEPROM_write(EEPROM_PRIMARY_ID_START_BYTE, DEFAULT_SINGLE_PRIMARY_ID);
    1bfc:	61 e4       	ldi	r22, 0x41	; 65
    1bfe:	81 e2       	ldi	r24, 0x21	; 33
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
	
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	08 95       	ret

00001c14 <read_init>:

uint8_t read_init()
{
	return EEPROM_read(EEPROM_INIT_STATUS_BYTE);
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
}
    1c1c:	08 95       	ret

00001c1e <load_config>:

void load_config()
{
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	0d e4       	ldi	r16, 0x4D	; 77
    1c28:	1a e3       	ldi	r17, 0x3A	; 58
	int i;
	for(i = 0; i < 6; i++)
    1c2a:	c0 e0       	ldi	r28, 0x00	; 0
    1c2c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		addr[i] = EEPROM_read(EEPROM_ADDR_START_BYTE + i);
    1c2e:	21 96       	adiw	r28, 0x01	; 1
    1c30:	ce 01       	movw	r24, r28
    1c32:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1c36:	d8 01       	movw	r26, r16
    1c38:	8d 93       	st	X+, r24
    1c3a:	8d 01       	movw	r16, r26
}

void load_config()
{
	int i;
	for(i = 0; i < 6; i++)
    1c3c:	c6 30       	cpi	r28, 0x06	; 6
    1c3e:	d1 05       	cpc	r29, r1
    1c40:	b1 f7       	brne	.-20     	; 0x1c2e <load_config+0x10>
    1c42:	05 e4       	ldi	r16, 0x45	; 69
    1c44:	1a e3       	ldi	r17, 0x3A	; 58
    1c46:	c2 e2       	ldi	r28, 0x22	; 34
    1c48:	d0 e0       	ldi	r29, 0x00	; 0
		addr[i] = EEPROM_read(EEPROM_ADDR_START_BYTE + i);
	}
	
	for(i = 0; i < 8; i++)
	{
		setting[i] = EEPROM_read(EEPROM_SETTING_START_BYTE + i);
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1c50:	f8 01       	movw	r30, r16
    1c52:	81 93       	st	Z+, r24
    1c54:	8f 01       	movw	r16, r30
    1c56:	21 96       	adiw	r28, 0x01	; 1
	for(i = 0; i < 6; i++)
	{
		addr[i] = EEPROM_read(EEPROM_ADDR_START_BYTE + i);
	}
	
	for(i = 0; i < 8; i++)
    1c58:	ca 32       	cpi	r28, 0x2A	; 42
    1c5a:	d1 05       	cpc	r29, r1
    1c5c:	b1 f7       	brne	.-20     	; 0x1c4a <load_config+0x2c>
	{
		setting[i] = EEPROM_read(EEPROM_SETTING_START_BYTE + i);
	}
	
	check_sum_enable = setting[4] - 0x30;
    1c5e:	c5 e4       	ldi	r28, 0x45	; 69
    1c60:	da e3       	ldi	r29, 0x3A	; 58
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	c0 97       	sbiw	r24, 0x30	; 48
    1c68:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <check_sum_enable>
    1c6c:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <check_sum_enable+0x1>
	delay = setting[5] - 0x30;
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	c0 97       	sbiw	r24, 0x30	; 48
    1c76:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <delay>
    1c7a:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <delay+0x1>
	avg_level = setting[6] - 0x30;
    1c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	c0 97       	sbiw	r24, 0x30	; 48
    1c84:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <avg_level>
    1c88:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <avg_level+0x1>
	
	memcpy(hex_tmp, setting, 2);
    1c8c:	88 81       	ld	r24, Y
    1c8e:	99 81       	ldd	r25, Y+1	; 0x01
    1c90:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <hex_tmp>
    1c94:	90 93 1e 3a 	sts	0x3A1E, r25	; 0x803a1e <hex_tmp+0x1>
	single_primary_addr = GetByteFromString(hex_tmp);
    1c98:	8d e1       	ldi	r24, 0x1D	; 29
    1c9a:	9a e3       	ldi	r25, 0x3A	; 58
    1c9c:	0e 94 2c 13 	call	0x2658	; 0x2658 <GetByteFromString>
    1ca0:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <single_primary_addr>

	memcpy(hex_tmp, setting + 2, 2);
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <hex_tmp>
    1cac:	90 93 1e 3a 	sts	0x3A1E, r25	; 0x803a1e <hex_tmp+0x1>
	uart_baud_rate = GetByteFromString(hex_tmp);
    1cb0:	8d e1       	ldi	r24, 0x1D	; 29
    1cb2:	9a e3       	ldi	r25, 0x3A	; 58
    1cb4:	0e 94 2c 13 	call	0x2658	; 0x2658 <GetByteFromString>
    1cb8:	80 93 58 3a 	sts	0x3A58, r24	; 0x803a58 <uart_baud_rate>
	
	single_temp_addr = EEPROM_read(EEPROM_TEMP_ADDR_START_BYTE);
    1cbc:	8f e1       	ldi	r24, 0x1F	; 31
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1cc4:	80 93 37 3a 	sts	0x3A37, r24	; 0x803a37 <single_temp_addr>
	
	single_rh_addr = EEPROM_read(EEPROM_RH_ADDR_START_BYTE);
    1cc8:	80 e2       	ldi	r24, 0x20	; 32
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1cd0:	80 93 3c 3a 	sts	0x3A3C, r24	; 0x803a3c <single_rh_addr>
	

	memset(tmp,0,sizeof(tmp));
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	e8 e9       	ldi	r30, 0x98	; 152
    1cd8:	f9 e3       	ldi	r31, 0x39	; 57
    1cda:	df 01       	movw	r26, r30
    1cdc:	1d 92       	st	X+, r1
    1cde:	8a 95       	dec	r24
    1ce0:	e9 f7       	brne	.-6      	; 0x1cdc <load_config+0xbe>
	for(m = 0; m < 4; m++)
    1ce2:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <m>
    1ce6:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1cea:	84 30       	cpi	r24, 0x04	; 4
    1cec:	b0 f4       	brcc	.+44     	; 0x1d1a <load_config+0xfc>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
    1cee:	c0 91 88 39 	lds	r28, 0x3988	; 0x803988 <m>
    1cf2:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	07 96       	adiw	r24, 0x07	; 7
    1cfa:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1cfe:	ec 2f       	mov	r30, r28
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	e8 56       	subi	r30, 0x68	; 104
    1d04:	f6 4c       	sbci	r31, 0xC6	; 198
    1d06:	80 83       	st	Z, r24
	
	single_rh_addr = EEPROM_read(EEPROM_RH_ADDR_START_BYTE);
	

	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1d08:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <m>
    1d12:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1d16:	84 30       	cpi	r24, 0x04	; 4
    1d18:	50 f3       	brcs	.-44     	; 0x1cee <load_config+0xd0>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
	}
	memcpy(&cal_a, tmp, sizeof(float));
    1d1a:	e8 e9       	ldi	r30, 0x98	; 152
    1d1c:	f9 e3       	ldi	r31, 0x39	; 57
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	a2 81       	ldd	r26, Z+2	; 0x02
    1d24:	b3 81       	ldd	r27, Z+3	; 0x03
    1d26:	80 93 41 3a 	sts	0x3A41, r24	; 0x803a41 <cal_a>
    1d2a:	90 93 42 3a 	sts	0x3A42, r25	; 0x803a42 <cal_a+0x1>
    1d2e:	a0 93 43 3a 	sts	0x3A43, r26	; 0x803a43 <cal_a+0x2>
    1d32:	b0 93 44 3a 	sts	0x3A44, r27	; 0x803a44 <cal_a+0x3>
	
	memset(tmp,0,sizeof(tmp));
    1d36:	84 e0       	ldi	r24, 0x04	; 4
    1d38:	df 01       	movw	r26, r30
    1d3a:	1d 92       	st	X+, r1
    1d3c:	8a 95       	dec	r24
    1d3e:	e9 f7       	brne	.-6      	; 0x1d3a <load_config+0x11c>
	for(m = 0; m < 4; m++)
    1d40:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <m>
    1d44:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1d48:	84 30       	cpi	r24, 0x04	; 4
    1d4a:	b0 f4       	brcc	.+44     	; 0x1d78 <load_config+0x15a>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
    1d4c:	c0 91 88 39 	lds	r28, 0x3988	; 0x803988 <m>
    1d50:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0b 96       	adiw	r24, 0x0b	; 11
    1d58:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1d5c:	ec 2f       	mov	r30, r28
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	e8 56       	subi	r30, 0x68	; 104
    1d62:	f6 4c       	sbci	r31, 0xC6	; 198
    1d64:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
	}
	memcpy(&cal_a, tmp, sizeof(float));
	
	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1d66:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1d6a:	8f 5f       	subi	r24, 0xFF	; 255
    1d6c:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <m>
    1d70:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1d74:	84 30       	cpi	r24, 0x04	; 4
    1d76:	50 f3       	brcs	.-44     	; 0x1d4c <load_config+0x12e>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_b, tmp, sizeof(float));
    1d78:	e8 e9       	ldi	r30, 0x98	; 152
    1d7a:	f9 e3       	ldi	r31, 0x39	; 57
    1d7c:	80 81       	ld	r24, Z
    1d7e:	91 81       	ldd	r25, Z+1	; 0x01
    1d80:	a2 81       	ldd	r26, Z+2	; 0x02
    1d82:	b3 81       	ldd	r27, Z+3	; 0x03
    1d84:	80 93 54 3a 	sts	0x3A54, r24	; 0x803a54 <cal_b>
    1d88:	90 93 55 3a 	sts	0x3A55, r25	; 0x803a55 <cal_b+0x1>
    1d8c:	a0 93 56 3a 	sts	0x3A56, r26	; 0x803a56 <cal_b+0x2>
    1d90:	b0 93 57 3a 	sts	0x3A57, r27	; 0x803a57 <cal_b+0x3>

	memset(tmp,0,sizeof(tmp));
    1d94:	84 e0       	ldi	r24, 0x04	; 4
    1d96:	df 01       	movw	r26, r30
    1d98:	1d 92       	st	X+, r1
    1d9a:	8a 95       	dec	r24
    1d9c:	e9 f7       	brne	.-6      	; 0x1d98 <load_config+0x17a>
	for(m = 0; m < 4; m++)
    1d9e:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <m>
    1da2:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1da6:	84 30       	cpi	r24, 0x04	; 4
    1da8:	b0 f4       	brcc	.+44     	; 0x1dd6 <load_config+0x1b8>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x08 + m);
    1daa:	c0 91 88 39 	lds	r28, 0x3988	; 0x803988 <m>
    1dae:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0f 96       	adiw	r24, 0x0f	; 15
    1db6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1dba:	ec 2f       	mov	r30, r28
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	e8 56       	subi	r30, 0x68	; 104
    1dc0:	f6 4c       	sbci	r31, 0xC6	; 198
    1dc2:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_b, tmp, sizeof(float));

	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1dc4:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <m>
    1dce:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1dd2:	84 30       	cpi	r24, 0x04	; 4
    1dd4:	50 f3       	brcs	.-44     	; 0x1daa <load_config+0x18c>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x08 + m);
	}
	memcpy(&cal_c, tmp, sizeof(float));
    1dd6:	e8 e9       	ldi	r30, 0x98	; 152
    1dd8:	f9 e3       	ldi	r31, 0x39	; 57
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	a2 81       	ldd	r26, Z+2	; 0x02
    1de0:	b3 81       	ldd	r27, Z+3	; 0x03
    1de2:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <cal_c>
    1de6:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <cal_c+0x1>
    1dea:	a0 93 96 39 	sts	0x3996, r26	; 0x803996 <cal_c+0x2>
    1dee:	b0 93 97 39 	sts	0x3997, r27	; 0x803997 <cal_c+0x3>


	memset(tmp,0,sizeof(tmp));
    1df2:	84 e0       	ldi	r24, 0x04	; 4
    1df4:	df 01       	movw	r26, r30
    1df6:	1d 92       	st	X+, r1
    1df8:	8a 95       	dec	r24
    1dfa:	e9 f7       	brne	.-6      	; 0x1df6 <load_config+0x1d8>
	for(m = 0; m < 4; m++)
    1dfc:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <m>
    1e00:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1e04:	84 30       	cpi	r24, 0x04	; 4
    1e06:	b0 f4       	brcc	.+44     	; 0x1e34 <load_config+0x216>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
    1e08:	c0 91 88 39 	lds	r28, 0x3988	; 0x803988 <m>
    1e0c:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	43 96       	adiw	r24, 0x13	; 19
    1e14:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1e18:	ec 2f       	mov	r30, r28
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	e8 56       	subi	r30, 0x68	; 104
    1e1e:	f6 4c       	sbci	r31, 0xC6	; 198
    1e20:	80 83       	st	Z, r24
	}
	memcpy(&cal_c, tmp, sizeof(float));


	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1e22:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <m>
    1e2c:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	50 f3       	brcs	.-44     	; 0x1e08 <load_config+0x1ea>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
	}
	memcpy(&cal_d, tmp, sizeof(float));
    1e34:	e8 e9       	ldi	r30, 0x98	; 152
    1e36:	f9 e3       	ldi	r31, 0x39	; 57
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	a2 81       	ldd	r26, Z+2	; 0x02
    1e3e:	b3 81       	ldd	r27, Z+3	; 0x03
    1e40:	80 93 33 3a 	sts	0x3A33, r24	; 0x803a33 <cal_d>
    1e44:	90 93 34 3a 	sts	0x3A34, r25	; 0x803a34 <cal_d+0x1>
    1e48:	a0 93 35 3a 	sts	0x3A35, r26	; 0x803a35 <cal_d+0x2>
    1e4c:	b0 93 36 3a 	sts	0x3A36, r27	; 0x803a36 <cal_d+0x3>
	
	memset(tmp,0,sizeof(tmp));
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	df 01       	movw	r26, r30
    1e54:	1d 92       	st	X+, r1
    1e56:	8a 95       	dec	r24
    1e58:	e9 f7       	brne	.-6      	; 0x1e54 <load_config+0x236>
	for(m = 0; m < 4; m++)
    1e5a:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <m>
    1e5e:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	b0 f4       	brcc	.+44     	; 0x1e92 <load_config+0x274>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
    1e66:	c0 91 88 39 	lds	r28, 0x3988	; 0x803988 <m>
    1e6a:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	47 96       	adiw	r24, 0x17	; 23
    1e72:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1e76:	ec 2f       	mov	r30, r28
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	e8 56       	subi	r30, 0x68	; 104
    1e7c:	f6 4c       	sbci	r31, 0xC6	; 198
    1e7e:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
	}
	memcpy(&cal_d, tmp, sizeof(float));
	
	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1e80:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1e84:	8f 5f       	subi	r24, 0xFF	; 255
    1e86:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <m>
    1e8a:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1e8e:	84 30       	cpi	r24, 0x04	; 4
    1e90:	50 f3       	brcs	.-44     	; 0x1e66 <load_config+0x248>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_e, tmp, sizeof(float));
    1e92:	e8 e9       	ldi	r30, 0x98	; 152
    1e94:	f9 e3       	ldi	r31, 0x39	; 57
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	a2 81       	ldd	r26, Z+2	; 0x02
    1e9c:	b3 81       	ldd	r27, Z+3	; 0x03
    1e9e:	80 93 3d 3a 	sts	0x3A3D, r24	; 0x803a3d <cal_e>
    1ea2:	90 93 3e 3a 	sts	0x3A3E, r25	; 0x803a3e <cal_e+0x1>
    1ea6:	a0 93 3f 3a 	sts	0x3A3F, r26	; 0x803a3f <cal_e+0x2>
    1eaa:	b0 93 40 3a 	sts	0x3A40, r27	; 0x803a40 <cal_e+0x3>

	memset(tmp,0,sizeof(tmp));
    1eae:	84 e0       	ldi	r24, 0x04	; 4
    1eb0:	df 01       	movw	r26, r30
    1eb2:	1d 92       	st	X+, r1
    1eb4:	8a 95       	dec	r24
    1eb6:	e9 f7       	brne	.-6      	; 0x1eb2 <load_config+0x294>
	for(m = 0; m < 4; m++)
    1eb8:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <m>
    1ebc:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1ec0:	84 30       	cpi	r24, 0x04	; 4
    1ec2:	b0 f4       	brcc	.+44     	; 0x1ef0 <load_config+0x2d2>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x08 + m);
    1ec4:	c0 91 88 39 	lds	r28, 0x3988	; 0x803988 <m>
    1ec8:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	4b 96       	adiw	r24, 0x1b	; 27
    1ed0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
    1ed4:	ec 2f       	mov	r30, r28
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	e8 56       	subi	r30, 0x68	; 104
    1eda:	f6 4c       	sbci	r31, 0xC6	; 198
    1edc:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_e, tmp, sizeof(float));

	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1ede:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
    1ee4:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <m>
    1ee8:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <m>
    1eec:	84 30       	cpi	r24, 0x04	; 4
    1eee:	50 f3       	brcs	.-44     	; 0x1ec4 <load_config+0x2a6>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x08 + m);
	}
	memcpy(&cal_f, tmp, sizeof(float));
    1ef0:	80 91 98 39 	lds	r24, 0x3998	; 0x803998 <tmp>
    1ef4:	90 91 99 39 	lds	r25, 0x3999	; 0x803999 <tmp+0x1>
    1ef8:	a0 91 9a 39 	lds	r26, 0x399A	; 0x80399a <tmp+0x2>
    1efc:	b0 91 9b 39 	lds	r27, 0x399B	; 0x80399b <tmp+0x3>
    1f00:	80 93 7a 3a 	sts	0x3A7A, r24	; 0x803a7a <cal_f>
    1f04:	90 93 7b 3a 	sts	0x3A7B, r25	; 0x803a7b <cal_f+0x1>
    1f08:	a0 93 7c 3a 	sts	0x3A7C, r26	; 0x803a7c <cal_f+0x2>
    1f0c:	b0 93 7d 3a 	sts	0x3A7D, r27	; 0x803a7d <cal_f+0x3>
}
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	08 95       	ret

00001f1a <main>:

int main(void)
{
	RTC.CLKSEL = 0x00;
    1f1a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
	
	loop_until_bit_is_clear(RTC.STATUS, RTC_PERBUSY_bp);
    1f1e:	e1 e4       	ldi	r30, 0x41	; 65
    1f20:	f1 e0       	ldi	r31, 0x01	; 1
    1f22:	80 81       	ld	r24, Z
    1f24:	82 fd       	sbrc	r24, 2
    1f26:	fd cf       	rjmp	.-6      	; 0x1f22 <main+0x8>
	
	RTC_PER = 0x8000;  // set overflow to 32768, since clock is 32768Hz
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e8       	ldi	r25, 0x80	; 128
    1f2c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1f30:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>

	RTC.INTCTRL = (1 << RTC_OVF_bp);
    1f34:	e0 e4       	ldi	r30, 0x40	; 64
    1f36:	f1 e0       	ldi	r31, 0x01	; 1
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	82 83       	std	Z+2, r24	; 0x02
	
	RTC.CTRLA = 0x01;
    1f3c:	80 83       	st	Z, r24
	
	if (read_init() != INITED)
    1f3e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <read_init>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	39 f0       	breq	.+14     	; 0x1f54 <main+0x3a>
	{
		EEPROM_write(EEPROM_INIT_STATUS_BYTE, INITED);
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
		init_config();
    1f50:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <init_config>
	}

	load_config();
    1f54:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <load_config>
		
	initUSART(uart_baud_rate);
    1f58:	80 91 58 3a 	lds	r24, 0x3A58	; 0x803a58 <uart_baud_rate>
    1f5c:	0e 94 b7 12 	call	0x256e	; 0x256e <initUSART>
		
	init_sensor();
    1f60:	0e 94 b5 10 	call	0x216a	; 0x216a <init_sensor>
	
	enable_periodic_daq();
    1f64:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <enable_periodic_daq>
	
	sei();	
    1f68:	78 94       	sei
		if (read_data_flag) {
			read_data_flag = 0;
			// read temp and save to arr
			if (data_index >= DATA_RETAIN_SIZE) {
				data_index = 0;
				data_overflow_flag = 1;
    1f6a:	c1 e0       	ldi	r28, 0x01	; 1
    1f6c:	d0 e0       	ldi	r29, 0x00	; 0
	
	sei();	
	
	while(1)
	{
		handle_uart_buffer();
    1f6e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <handle_uart_buffer>
		
		if (read_data_flag) {
    1f72:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <read_data_flag>
    1f76:	88 23       	and	r24, r24
    1f78:	d1 f3       	breq	.-12     	; 0x1f6e <main+0x54>
			read_data_flag = 0;
    1f7a:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <read_data_flag>
			// read temp and save to arr
			if (data_index >= DATA_RETAIN_SIZE) {
    1f7e:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
    1f82:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
    1f86:	4e 97       	sbiw	r24, 0x1e	; 30
    1f88:	44 f0       	brlt	.+16     	; 0x1f9a <main+0x80>
				data_index = 0;
    1f8a:	10 92 7e 39 	sts	0x397E, r1	; 0x80397e <data_index>
    1f8e:	10 92 7f 39 	sts	0x397F, r1	; 0x80397f <data_index+0x1>
				data_overflow_flag = 1;
    1f92:	c0 93 78 39 	sts	0x3978, r28	; 0x803978 <data_overflow_flag>
    1f96:	d0 93 79 39 	sts	0x3979, r29	; 0x803979 <data_overflow_flag+0x1>
			}
					

			if (current_data_index < data_index) {
    1f9a:	20 91 7c 39 	lds	r18, 0x397C	; 0x80397c <current_data_index>
    1f9e:	30 91 7d 39 	lds	r19, 0x397D	; 0x80397d <current_data_index+0x1>
    1fa2:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
    1fa6:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
    1faa:	28 17       	cp	r18, r24
    1fac:	39 07       	cpc	r19, r25
    1fae:	44 f4       	brge	.+16     	; 0x1fc0 <main+0xa6>
				current_data_index = data_index;
    1fb0:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
    1fb4:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
    1fb8:	80 93 7c 39 	sts	0x397C, r24	; 0x80397c <current_data_index>
    1fbc:	90 93 7d 39 	sts	0x397D, r25	; 0x80397d <current_data_index+0x1>
			}

			get_periodic_temp_data(&tmp_reading_temp);
    1fc0:	89 e5       	ldi	r24, 0x59	; 89
    1fc2:	9a e3       	ldi	r25, 0x3A	; 58
    1fc4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <get_periodic_temp_data>
			get_periodic_rh_temp_data(&tmp_reading_rh,&tmp_reading_rh_temp);
    1fc8:	68 e3       	ldi	r22, 0x38	; 56
    1fca:	7a e3       	ldi	r23, 0x3A	; 58
    1fcc:	8d e5       	ldi	r24, 0x5D	; 93
    1fce:	9a e3       	ldi	r25, 0x3A	; 58
    1fd0:	0e 94 4d 11 	call	0x229a	; 0x229a <get_periodic_rh_temp_data>
			
			if (tmp_reading_temp >= -40 && tmp_reading_temp <= 125 && tmp_reading_rh_temp >= -40 && tmp_reading_rh_temp <= 125 && tmp_reading_rh >= 0 && tmp_reading_rh <= 100) {
    1fd4:	c0 90 59 3a 	lds	r12, 0x3A59	; 0x803a59 <tmp_reading_temp>
    1fd8:	d0 90 5a 3a 	lds	r13, 0x3A5A	; 0x803a5a <tmp_reading_temp+0x1>
    1fdc:	e0 90 5b 3a 	lds	r14, 0x3A5B	; 0x803a5b <tmp_reading_temp+0x2>
    1fe0:	f0 90 5c 3a 	lds	r15, 0x3A5C	; 0x803a5c <tmp_reading_temp+0x3>
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e2       	ldi	r20, 0x20	; 32
    1fea:	52 ec       	ldi	r21, 0xC2	; 194
    1fec:	c7 01       	movw	r24, r14
    1fee:	b6 01       	movw	r22, r12
    1ff0:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__gesf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	0c f4       	brge	.+2      	; 0x1ffa <main+0xe0>
    1ff8:	ba cf       	rjmp	.-140    	; 0x1f6e <main+0x54>
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4a ef       	ldi	r20, 0xFA	; 250
    2000:	52 e4       	ldi	r21, 0x42	; 66
    2002:	c7 01       	movw	r24, r14
    2004:	b6 01       	movw	r22, r12
    2006:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    200a:	18 16       	cp	r1, r24
    200c:	0c f4       	brge	.+2      	; 0x2010 <main+0xf6>
    200e:	af cf       	rjmp	.-162    	; 0x1f6e <main+0x54>
    2010:	80 90 38 3a 	lds	r8, 0x3A38	; 0x803a38 <tmp_reading_rh_temp>
    2014:	90 90 39 3a 	lds	r9, 0x3A39	; 0x803a39 <tmp_reading_rh_temp+0x1>
    2018:	a0 90 3a 3a 	lds	r10, 0x3A3A	; 0x803a3a <tmp_reading_rh_temp+0x2>
    201c:	b0 90 3b 3a 	lds	r11, 0x3A3B	; 0x803a3b <tmp_reading_rh_temp+0x3>
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	52 ec       	ldi	r21, 0xC2	; 194
    2028:	c5 01       	movw	r24, r10
    202a:	b4 01       	movw	r22, r8
    202c:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__gesf2>
    2030:	88 23       	and	r24, r24
    2032:	0c f4       	brge	.+2      	; 0x2036 <main+0x11c>
    2034:	9c cf       	rjmp	.-200    	; 0x1f6e <main+0x54>
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a ef       	ldi	r20, 0xFA	; 250
    203c:	52 e4       	ldi	r21, 0x42	; 66
    203e:	c5 01       	movw	r24, r10
    2040:	b4 01       	movw	r22, r8
    2042:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    2046:	18 16       	cp	r1, r24
    2048:	0c f4       	brge	.+2      	; 0x204c <main+0x132>
    204a:	91 cf       	rjmp	.-222    	; 0x1f6e <main+0x54>
    204c:	40 90 5d 3a 	lds	r4, 0x3A5D	; 0x803a5d <tmp_reading_rh>
    2050:	50 90 5e 3a 	lds	r5, 0x3A5E	; 0x803a5e <tmp_reading_rh+0x1>
    2054:	60 90 5f 3a 	lds	r6, 0x3A5F	; 0x803a5f <tmp_reading_rh+0x2>
    2058:	70 90 60 3a 	lds	r7, 0x3A60	; 0x803a60 <tmp_reading_rh+0x3>
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	a9 01       	movw	r20, r18
    2062:	c3 01       	movw	r24, r6
    2064:	b2 01       	movw	r22, r4
    2066:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__gesf2>
    206a:	88 23       	and	r24, r24
    206c:	0c f4       	brge	.+2      	; 0x2070 <main+0x156>
    206e:	7f cf       	rjmp	.-258    	; 0x1f6e <main+0x54>
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	48 ec       	ldi	r20, 0xC8	; 200
    2076:	52 e4       	ldi	r21, 0x42	; 66
    2078:	c3 01       	movw	r24, r6
    207a:	b2 01       	movw	r22, r4
    207c:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    2080:	18 16       	cp	r1, r24
    2082:	0c f4       	brge	.+2      	; 0x2086 <main+0x16c>
    2084:	74 cf       	rjmp	.-280    	; 0x1f6e <main+0x54>
				data_arr_temp[data_index] = tmp_reading_temp;
    2086:	e0 91 7e 39 	lds	r30, 0x397E	; 0x80397e <data_index>
    208a:	f0 91 7f 39 	lds	r31, 0x397F	; 0x80397f <data_index+0x1>
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	e0 50       	subi	r30, 0x00	; 0
    2098:	f7 4c       	sbci	r31, 0xC7	; 199
    209a:	c0 82       	st	Z, r12
    209c:	d1 82       	std	Z+1, r13	; 0x01
    209e:	e2 82       	std	Z+2, r14	; 0x02
    20a0:	f3 82       	std	Z+3, r15	; 0x03
				data_arr_rh[data_index] = tmp_reading_rh;
    20a2:	e0 91 7e 39 	lds	r30, 0x397E	; 0x80397e <data_index>
    20a6:	f0 91 7f 39 	lds	r31, 0x397F	; 0x80397f <data_index+0x1>
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	e8 57       	subi	r30, 0x78	; 120
    20b4:	f7 4c       	sbci	r31, 0xC7	; 199
    20b6:	40 82       	st	Z, r4
    20b8:	51 82       	std	Z+1, r5	; 0x01
    20ba:	62 82       	std	Z+2, r6	; 0x02
    20bc:	73 82       	std	Z+3, r7	; 0x03
				data_arr_rh_temp[data_index] = tmp_reading_rh_temp;
    20be:	e0 91 7e 39 	lds	r30, 0x397E	; 0x80397e <data_index>
    20c2:	f0 91 7f 39 	lds	r31, 0x397F	; 0x80397f <data_index+0x1>
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	e0 5f       	subi	r30, 0xF0	; 240
    20d0:	f7 4c       	sbci	r31, 0xC7	; 199
    20d2:	80 82       	st	Z, r8
    20d4:	91 82       	std	Z+1, r9	; 0x01
    20d6:	a2 82       	std	Z+2, r10	; 0x02
    20d8:	b3 82       	std	Z+3, r11	; 0x03
				data_index++;
    20da:	80 91 7e 39 	lds	r24, 0x397E	; 0x80397e <data_index>
    20de:	90 91 7f 39 	lds	r25, 0x397F	; 0x80397f <data_index+0x1>
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	80 93 7e 39 	sts	0x397E, r24	; 0x80397e <data_index>
    20e8:	90 93 7f 39 	sts	0x397F, r25	; 0x80397f <data_index+0x1>
    20ec:	40 cf       	rjmp	.-384    	; 0x1f6e <main+0x54>

000020ee <__vector_25>:

TWI_Master_t twi_master;
TWI_t inst;

ISR(TWI0_TWIM_vect)
{
    20ee:	1f 92       	push	r1
    20f0:	0f 92       	push	r0
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	0f 92       	push	r0
    20f6:	11 24       	eor	r1, r1
    20f8:	2f 93       	push	r18
    20fa:	3f 93       	push	r19
    20fc:	4f 93       	push	r20
    20fe:	5f 93       	push	r21
    2100:	6f 93       	push	r22
    2102:	7f 93       	push	r23
    2104:	8f 93       	push	r24
    2106:	9f 93       	push	r25
    2108:	af 93       	push	r26
    210a:	bf 93       	push	r27
    210c:	ef 93       	push	r30
    210e:	ff 93       	push	r31
	/* Needed for the TWI to complete transactions */
	TWI_MasterInterruptHandler(&twi_master);
    2110:	8e e8       	ldi	r24, 0x8E	; 142
    2112:	9a e3       	ldi	r25, 0x3A	; 58
    2114:	0e 94 9e 12 	call	0x253c	; 0x253c <TWI_MasterInterruptHandler>
}
    2118:	ff 91       	pop	r31
    211a:	ef 91       	pop	r30
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	0f 90       	pop	r0
    2136:	1f 90       	pop	r1
    2138:	18 95       	reti

0000213a <init_i2c>:


void init_i2c() {
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	1f 92       	push	r1
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62

	PORTMUX_CTRLB |= PORTMUX_TWI0_ALTERNATE_gc;
    2144:	e1 e0       	ldi	r30, 0x01	; 1
    2146:	f2 e0       	ldi	r31, 0x02	; 2
    2148:	80 81       	ld	r24, Z
    214a:	80 61       	ori	r24, 0x10	; 16
    214c:	80 83       	st	Z, r24

	volatile uint8_t baud_rate = (CLK_PER/(2*TWI_BAUDRATE) - 5);
    214e:	8b e0       	ldi	r24, 0x0B	; 11
    2150:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_MasterInit(&twi_master, &TWI0, (TWI_RIEN_bm | TWI_WIEN_bm), baud_rate);
    2152:	29 81       	ldd	r18, Y+1	; 0x01
    2154:	40 ec       	ldi	r20, 0xC0	; 192
    2156:	60 e1       	ldi	r22, 0x10	; 16
    2158:	78 e0       	ldi	r23, 0x08	; 8
    215a:	8e e8       	ldi	r24, 0x8E	; 142
    215c:	9a e3       	ldi	r25, 0x3A	; 58
    215e:	0e 94 c4 11 	call	0x2388	; 0x2388 <TWI_MasterInit>
}
    2162:	0f 90       	pop	r0
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	08 95       	ret

0000216a <init_sensor>:

void init_sensor() {
	init_i2c();
    216a:	0e 94 9d 10 	call	0x213a	; 0x213a <init_i2c>
    216e:	08 95       	ret

00002170 <crc8>:
   */

  const uint8_t POLYNOMIAL = 0x31;
  uint8_t crc = 0xFF;

  for (int j = len; j; --j) {
    2170:	61 15       	cp	r22, r1
    2172:	71 05       	cpc	r23, r1
    2174:	b1 f0       	breq	.+44     	; 0x21a2 <crc8+0x32>
    2176:	fc 01       	movw	r30, r24
    2178:	68 0f       	add	r22, r24
    217a:	79 1f       	adc	r23, r25
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    crc ^= *data++;

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
    217e:	91 e3       	ldi	r25, 0x31	; 49

  const uint8_t POLYNOMIAL = 0x31;
  uint8_t crc = 0xFF;

  for (int j = len; j; --j) {
    crc ^= *data++;
    2180:	21 91       	ld	r18, Z+
    2182:	82 27       	eor	r24, r18
    2184:	28 e0       	ldi	r18, 0x08	; 8
    2186:	30 e0       	ldi	r19, 0x00	; 0

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
    2188:	88 23       	and	r24, r24
    218a:	1c f4       	brge	.+6      	; 0x2192 <crc8+0x22>
    218c:	88 0f       	add	r24, r24
    218e:	89 27       	eor	r24, r25
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <crc8+0x24>
    2192:	88 0f       	add	r24, r24
    2194:	21 50       	subi	r18, 0x01	; 1
    2196:	31 09       	sbc	r19, r1
  uint8_t crc = 0xFF;

  for (int j = len; j; --j) {
    crc ^= *data++;

    for (int i = 8; i; --i) {
    2198:	b9 f7       	brne	.-18     	; 0x2188 <crc8+0x18>
   */

  const uint8_t POLYNOMIAL = 0x31;
  uint8_t crc = 0xFF;

  for (int j = len; j; --j) {
    219a:	e6 17       	cp	r30, r22
    219c:	f7 07       	cpc	r31, r23
    219e:	81 f7       	brne	.-32     	; 0x2180 <crc8+0x10>
    21a0:	08 95       	ret
   * Polynomial 0x31 (x8 + x5 +x4 +1)
   * Final XOR 0x00
   */

  const uint8_t POLYNOMIAL = 0x31;
  uint8_t crc = 0xFF;
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
    }
  }
  return crc;
}
    21a4:	08 95       	ret

000021a6 <enable_periodic_daq>:

void enable_periodic_daq() {
	
	data_buf[0] = STS3X_PERIODIC_DAQ_1_HIGH >> 8;
    21a6:	ef e1       	ldi	r30, 0x1F	; 31
    21a8:	fa e3       	ldi	r31, 0x3A	; 58
    21aa:	81 e2       	ldi	r24, 0x21	; 33
    21ac:	80 83       	st	Z, r24
	data_buf[1] = (uint8_t)STS3X_PERIODIC_DAQ_1_HIGH;
    21ae:	80 e3       	ldi	r24, 0x30	; 48
    21b0:	81 83       	std	Z+1, r24	; 0x01
	
	TWI_MasterWrite(&twi_master, SHT3X_DEFAULT_ADDR, data_buf, 2);
    21b2:	22 e0       	ldi	r18, 0x02	; 2
    21b4:	af 01       	movw	r20, r30
    21b6:	64 e4       	ldi	r22, 0x44	; 68
    21b8:	8e e8       	ldi	r24, 0x8E	; 142
    21ba:	9a e3       	ldi	r25, 0x3A	; 58
    21bc:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_MasterWrite>
    21c0:	2a e6       	ldi	r18, 0x6A	; 106
    21c2:	84 e0       	ldi	r24, 0x04	; 4
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	21 50       	subi	r18, 0x01	; 1
    21c8:	80 40       	sbci	r24, 0x00	; 0
    21ca:	90 40       	sbci	r25, 0x00	; 0
    21cc:	e1 f7       	brne	.-8      	; 0x21c6 <enable_periodic_daq+0x20>
    21ce:	00 c0       	rjmp	.+0      	; 0x21d0 <enable_periodic_daq+0x2a>
	
	_delay_ms(100);
	
	TWI_MasterWrite(&twi_master, STS3X_DEFAULT_ADDR, data_buf, 2);
    21d0:	22 e0       	ldi	r18, 0x02	; 2
    21d2:	4f e1       	ldi	r20, 0x1F	; 31
    21d4:	5a e3       	ldi	r21, 0x3A	; 58
    21d6:	6a e4       	ldi	r22, 0x4A	; 74
    21d8:	8e e8       	ldi	r24, 0x8E	; 142
    21da:	9a e3       	ldi	r25, 0x3A	; 58
    21dc:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_MasterWrite>
    21e0:	2a e6       	ldi	r18, 0x6A	; 106
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	21 50       	subi	r18, 0x01	; 1
    21e8:	80 40       	sbci	r24, 0x00	; 0
    21ea:	90 40       	sbci	r25, 0x00	; 0
    21ec:	e1 f7       	brne	.-8      	; 0x21e6 <enable_periodic_daq+0x40>
    21ee:	00 c0       	rjmp	.+0      	; 0x21f0 <enable_periodic_daq+0x4a>
    21f0:	08 95       	ret

000021f2 <get_periodic_temp_data>:
	

}


void get_periodic_temp_data(float *temp_out) {
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	ec 01       	movw	r28, r24
	float temp = 0;
	
	data_buf[0] = STS3X_FETCH_DATA >> 8;
    21f8:	ef e1       	ldi	r30, 0x1F	; 31
    21fa:	fa e3       	ldi	r31, 0x3A	; 58
    21fc:	80 ee       	ldi	r24, 0xE0	; 224
    21fe:	80 83       	st	Z, r24
	data_buf[1] = (uint8_t)STS3X_FETCH_DATA;
    2200:	11 82       	std	Z+1, r1	; 0x01
	
	TWI_MasterWrite(&twi_master, STS3X_DEFAULT_ADDR, data_buf, 2);
    2202:	22 e0       	ldi	r18, 0x02	; 2
    2204:	af 01       	movw	r20, r30
    2206:	6a e4       	ldi	r22, 0x4A	; 74
    2208:	8e e8       	ldi	r24, 0x8E	; 142
    220a:	9a e3       	ldi	r25, 0x3A	; 58
    220c:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_MasterWrite>
    2210:	82 ec       	ldi	r24, 0xC2	; 194
    2212:	92 ea       	ldi	r25, 0xA2	; 162
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <get_periodic_temp_data+0x22>
    2218:	00 c0       	rjmp	.+0      	; 0x221a <get_periodic_temp_data+0x28>
	
	_delay_ms(50);
	
	TWI_MasterRead(&twi_master, STS3X_DEFAULT_ADDR, 3);
    221a:	43 e0       	ldi	r20, 0x03	; 3
    221c:	6a e4       	ldi	r22, 0x4A	; 74
    221e:	8e e8       	ldi	r24, 0x8E	; 142
    2220:	9a e3       	ldi	r25, 0x3A	; 58
    2222:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_MasterRead>
    2226:	8d e8       	ldi	r24, 0x8D	; 141
    2228:	90 e2       	ldi	r25, 0x20	; 32
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <get_periodic_temp_data+0x38>
    222e:	00 00       	nop

	_delay_ms(10);

	if (crc8((uint8_t*)twi_master.readData, 2) == twi_master.readData[2])
    2230:	62 e0       	ldi	r22, 0x02	; 2
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	82 ea       	ldi	r24, 0xA2	; 162
    2236:	9a e3       	ldi	r25, 0x3A	; 58
    2238:	0e 94 b8 10 	call	0x2170	; 0x2170 <crc8>
    223c:	90 91 a4 3a 	lds	r25, 0x3AA4	; 0x803aa4 <twi_master+0x16>
    2240:	89 13       	cpse	r24, r25
    2242:	20 c0       	rjmp	.+64     	; 0x2284 <get_periodic_temp_data+0x92>
	{
		uint16_t tmp_raw = (twi_master.readData[0] * 256) + twi_master.readData[1];
    2244:	ee e8       	ldi	r30, 0x8E	; 142
    2246:	fa e3       	ldi	r31, 0x3A	; 58
    2248:	64 89       	ldd	r22, Z+20	; 0x14
    224a:	85 89       	ldd	r24, Z+21	; 0x15
		
		temp = (float)tmp_raw;
		
		temp = -45.0 + (175.0 * temp / 65535.0);
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	76 2f       	mov	r23, r22
    2250:	66 27       	eor	r22, r22
    2252:	68 0f       	add	r22, r24
    2254:	71 1d       	adc	r23, r1
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4f e2       	ldi	r20, 0x2F	; 47
    2264:	53 e4       	ldi	r21, 0x43	; 67
    2266:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 1d 14 	call	0x283a	; 0x283a <__divsf3>
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	44 e3       	ldi	r20, 0x34	; 52
    227c:	52 e4       	ldi	r21, 0x42	; 66
    227e:	0e 94 ab 13 	call	0x2756	; 0x2756 <__subsf3>
    2282:	04 c0       	rjmp	.+8      	; 0x228c <get_periodic_temp_data+0x9a>
	} 
	else 
	{
		temp = 999.99;
    2284:	6c e5       	ldi	r22, 0x5C	; 92
    2286:	7f ef       	ldi	r23, 0xFF	; 255
    2288:	89 e7       	ldi	r24, 0x79	; 121
    228a:	94 e4       	ldi	r25, 0x44	; 68
	}



	(*temp_out) = temp;
    228c:	68 83       	st	Y, r22
    228e:	79 83       	std	Y+1, r23	; 0x01
    2290:	8a 83       	std	Y+2, r24	; 0x02
    2292:	9b 83       	std	Y+3, r25	; 0x03
}
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	08 95       	ret

0000229a <get_periodic_rh_temp_data>:

void get_periodic_rh_temp_data(float *rh_out, float *temp_out) {
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	8c 01       	movw	r16, r24
    22b0:	5b 01       	movw	r10, r22
	float temp = 0;
	float hum = 0;
	uint16_t tmp_rd = 0;
	uint16_t hum_rd = 0;
	
	data_buf[0] = STS3X_FETCH_DATA >> 8;
    22b2:	ef e1       	ldi	r30, 0x1F	; 31
    22b4:	fa e3       	ldi	r31, 0x3A	; 58
    22b6:	80 ee       	ldi	r24, 0xE0	; 224
    22b8:	80 83       	st	Z, r24
	data_buf[1] = (uint8_t)STS3X_FETCH_DATA;
    22ba:	11 82       	std	Z+1, r1	; 0x01
	
	TWI_MasterWrite(&twi_master, SHT3X_DEFAULT_ADDR, data_buf, 2);
    22bc:	22 e0       	ldi	r18, 0x02	; 2
    22be:	af 01       	movw	r20, r30
    22c0:	64 e4       	ldi	r22, 0x44	; 68
    22c2:	8e e8       	ldi	r24, 0x8E	; 142
    22c4:	9a e3       	ldi	r25, 0x3A	; 58
    22c6:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_MasterWrite>
    22ca:	8a e1       	ldi	r24, 0x1A	; 26
    22cc:	91 e4       	ldi	r25, 0x41	; 65
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <get_periodic_rh_temp_data+0x34>
    22d2:	00 c0       	rjmp	.+0      	; 0x22d4 <get_periodic_rh_temp_data+0x3a>
	
	_delay_ms(20);
	
	TWI_MasterRead(&twi_master, SHT3X_DEFAULT_ADDR, 6);
    22d4:	46 e0       	ldi	r20, 0x06	; 6
    22d6:	64 e4       	ldi	r22, 0x44	; 68
    22d8:	8e e8       	ldi	r24, 0x8E	; 142
    22da:	9a e3       	ldi	r25, 0x3A	; 58
    22dc:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_MasterRead>
    22e0:	ed e8       	ldi	r30, 0x8D	; 141
    22e2:	f0 e2       	ldi	r31, 0x20	; 32
    22e4:	31 97       	sbiw	r30, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <get_periodic_rh_temp_data+0x4a>
    22e8:	00 00       	nop

	_delay_ms(10);

	
	tmp_rd = (twi_master.readData[0] * 256) + twi_master.readData[1];
    22ea:	ce e8       	ldi	r28, 0x8E	; 142
    22ec:	da e3       	ldi	r29, 0x3A	; 58
    22ee:	6c 89       	ldd	r22, Y+20	; 0x14
    22f0:	8d 89       	ldd	r24, Y+21	; 0x15
	temp = (float)tmp_rd;
	temp = -45.0 + (175.0 * temp / 65535.0);
    22f2:	70 e0       	ldi	r23, 0x00	; 0
    22f4:	76 2f       	mov	r23, r22
    22f6:	66 27       	eor	r22, r22
    22f8:	68 0f       	add	r22, r24
    22fa:	71 1d       	adc	r23, r1
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4f e2       	ldi	r20, 0x2F	; 47
    230a:	53 e4       	ldi	r21, 0x43	; 67
    230c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	57 e4       	ldi	r21, 0x47	; 71
    2318:	0e 94 1d 14 	call	0x283a	; 0x283a <__divsf3>
    231c:	6b 01       	movw	r12, r22
    231e:	7c 01       	movw	r14, r24
	hum_rd = (twi_master.readData[3] * 256) + twi_master.readData[4];
    2320:	6f 89       	ldd	r22, Y+23	; 0x17
    2322:	88 8d       	ldd	r24, Y+24	; 0x18
	hum = (float)hum_rd;
	hum = (100.0 * hum) / 65535.0;
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	76 2f       	mov	r23, r22
    2328:	66 27       	eor	r22, r22
    232a:	68 0f       	add	r22, r24
    232c:	71 1d       	adc	r23, r1
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	48 ec       	ldi	r20, 0xC8	; 200
    233c:	52 e4       	ldi	r21, 0x42	; 66
    233e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
	
	(*rh_out) = hum;
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 1d 14 	call	0x283a	; 0x283a <__divsf3>
    234e:	f8 01       	movw	r30, r16
    2350:	60 83       	st	Z, r22
    2352:	71 83       	std	Z+1, r23	; 0x01
    2354:	82 83       	std	Z+2, r24	; 0x02
    2356:	93 83       	std	Z+3, r25	; 0x03
	(*temp_out) = temp;
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	44 e3       	ldi	r20, 0x34	; 52
    235e:	52 e4       	ldi	r21, 0x42	; 66
    2360:	c7 01       	movw	r24, r14
    2362:	b6 01       	movw	r22, r12
    2364:	0e 94 ab 13 	call	0x2756	; 0x2756 <__subsf3>
    2368:	f5 01       	movw	r30, r10
    236a:	60 83       	st	Z, r22
    236c:	71 83       	std	Z+1, r23	; 0x01
    236e:	82 83       	std	Z+2, r24	; 0x02
    2370:	93 83       	std	Z+3, r25	; 0x03
}
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	ff 90       	pop	r15
    237c:	ef 90       	pop	r14
    237e:	df 90       	pop	r13
    2380:	cf 90       	pop	r12
    2382:	bf 90       	pop	r11
    2384:	af 90       	pop	r10
    2386:	08 95       	ret

00002388 <TWI_MasterInit>:
    2388:	fc 01       	movw	r30, r24
    238a:	60 83       	st	Z, r22
    238c:	71 83       	std	Z+1, r23	; 0x01
    238e:	41 60       	ori	r20, 0x01	; 1
    2390:	db 01       	movw	r26, r22
    2392:	13 96       	adiw	r26, 0x03	; 3
    2394:	4c 93       	st	X, r20
    2396:	a0 81       	ld	r26, Z
    2398:	b1 81       	ldd	r27, Z+1	; 0x01
    239a:	16 96       	adiw	r26, 0x06	; 6
    239c:	2c 93       	st	X, r18
    239e:	01 90       	ld	r0, Z+
    23a0:	f0 81       	ld	r31, Z
    23a2:	e0 2d       	mov	r30, r0
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	85 83       	std	Z+5, r24	; 0x05
    23a8:	08 95       	ret

000023aa <TWI_MasterWriteRead>:
    23aa:	0f 93       	push	r16
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	ec 01       	movw	r28, r24
    23b2:	22 31       	cpi	r18, 0x12	; 18
    23b4:	c0 f5       	brcc	.+112    	; 0x2426 <TWI_MasterWriteRead+0x7c>
    23b6:	01 31       	cpi	r16, 0x11	; 17
    23b8:	c0 f5       	brcc	.+112    	; 0x242a <TWI_MasterWriteRead+0x80>
    23ba:	88 a5       	ldd	r24, Y+40	; 0x28
    23bc:	81 11       	cpse	r24, r1
    23be:	37 c0       	rjmp	.+110    	; 0x242e <TWI_MasterWriteRead+0x84>
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	88 a7       	std	Y+40, r24	; 0x28
    23c4:	19 a6       	std	Y+41, r1	; 0x29
    23c6:	66 0f       	add	r22, r22
    23c8:	6a 83       	std	Y+2, r22	; 0x02
    23ca:	22 23       	and	r18, r18
    23cc:	a1 f0       	breq	.+40     	; 0x23f6 <TWI_MasterWriteRead+0x4c>
    23ce:	e4 2f       	mov	r30, r20
    23d0:	f5 2f       	mov	r31, r21
    23d2:	6f ef       	ldi	r22, 0xFF	; 255
    23d4:	62 0f       	add	r22, r18
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	6f 5f       	subi	r22, 0xFF	; 255
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	91 91       	ld	r25, Z+
    23e2:	de 01       	movw	r26, r28
    23e4:	a4 0f       	add	r26, r20
    23e6:	b5 1f       	adc	r27, r21
    23e8:	13 96       	adiw	r26, 0x03	; 3
    23ea:	9c 93       	st	X, r25
    23ec:	4f 5f       	subi	r20, 0xFF	; 255
    23ee:	5f 4f       	sbci	r21, 0xFF	; 255
    23f0:	46 17       	cp	r20, r22
    23f2:	57 07       	cpc	r21, r23
    23f4:	a9 f7       	brne	.-22     	; 0x23e0 <TWI_MasterWriteRead+0x36>
    23f6:	2c a3       	std	Y+36, r18	; 0x24
    23f8:	0d a3       	std	Y+37, r16	; 0x25
    23fa:	1e a2       	std	Y+38, r1	; 0x26
    23fc:	1f a2       	std	Y+39, r1	; 0x27
    23fe:	8c a1       	ldd	r24, Y+36	; 0x24
    2400:	88 23       	and	r24, r24
    2402:	39 f0       	breq	.+14     	; 0x2412 <TWI_MasterWriteRead+0x68>
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	8e 7f       	andi	r24, 0xFE	; 254
    2408:	e8 81       	ld	r30, Y
    240a:	f9 81       	ldd	r31, Y+1	; 0x01
    240c:	87 83       	std	Z+7, r24	; 0x07
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	11 c0       	rjmp	.+34     	; 0x2434 <TWI_MasterWriteRead+0x8a>
    2412:	8d a1       	ldd	r24, Y+37	; 0x25
    2414:	88 23       	and	r24, r24
    2416:	69 f0       	breq	.+26     	; 0x2432 <TWI_MasterWriteRead+0x88>
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	81 60       	ori	r24, 0x01	; 1
    241c:	e8 81       	ld	r30, Y
    241e:	f9 81       	ldd	r31, Y+1	; 0x01
    2420:	87 83       	std	Z+7, r24	; 0x07
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	07 c0       	rjmp	.+14     	; 0x2434 <TWI_MasterWriteRead+0x8a>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	05 c0       	rjmp	.+10     	; 0x2434 <TWI_MasterWriteRead+0x8a>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	03 c0       	rjmp	.+6      	; 0x2434 <TWI_MasterWriteRead+0x8a>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <TWI_MasterWriteRead+0x8a>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	0f 91       	pop	r16
    243a:	08 95       	ret

0000243c <TWI_MasterWrite>:
    243c:	0f 93       	push	r16
    243e:	00 e0       	ldi	r16, 0x00	; 0
    2440:	0e 94 d5 11 	call	0x23aa	; 0x23aa <TWI_MasterWriteRead>
    2444:	0f 91       	pop	r16
    2446:	08 95       	ret

00002448 <TWI_MasterRead>:
    2448:	0f 93       	push	r16
    244a:	04 2f       	mov	r16, r20
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	0e 94 d5 11 	call	0x23aa	; 0x23aa <TWI_MasterWriteRead>
    2456:	0f 91       	pop	r16
    2458:	08 95       	ret

0000245a <TWI_MasterArbitrationLostBusErrorHandler>:
    245a:	fc 01       	movw	r30, r24
    245c:	a0 81       	ld	r26, Z
    245e:	b1 81       	ldd	r27, Z+1	; 0x01
    2460:	15 96       	adiw	r26, 0x05	; 5
    2462:	9c 91       	ld	r25, X
    2464:	15 97       	sbiw	r26, 0x05	; 5
    2466:	92 ff       	sbrs	r25, 2
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
    246a:	84 e0       	ldi	r24, 0x04	; 4
    246c:	81 a7       	std	Z+41, r24	; 0x29
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	81 a7       	std	Z+41, r24	; 0x29
    2474:	98 60       	ori	r25, 0x08	; 8
    2476:	15 96       	adiw	r26, 0x05	; 5
    2478:	9c 93       	st	X, r25
    247a:	10 a6       	std	Z+40, r1	; 0x28
    247c:	08 95       	ret

0000247e <TWI_MasterWriteHandler>:
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	fc 01       	movw	r30, r24
    2484:	94 a1       	ldd	r25, Z+36	; 0x24
    2486:	25 a1       	ldd	r18, Z+37	; 0x25
    2488:	a0 81       	ld	r26, Z
    248a:	b1 81       	ldd	r27, Z+1	; 0x01
    248c:	15 96       	adiw	r26, 0x05	; 5
    248e:	8c 91       	ld	r24, X
    2490:	15 97       	sbiw	r26, 0x05	; 5
    2492:	84 ff       	sbrs	r24, 4
    2494:	07 c0       	rjmp	.+14     	; 0x24a4 <TWI_MasterWriteHandler+0x26>
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	14 96       	adiw	r26, 0x04	; 4
    249a:	8c 93       	st	X, r24
    249c:	85 e0       	ldi	r24, 0x05	; 5
    249e:	81 a7       	std	Z+41, r24	; 0x29
    24a0:	10 a6       	std	Z+40, r1	; 0x28
    24a2:	1c c0       	rjmp	.+56     	; 0x24dc <TWI_MasterWriteHandler+0x5e>
    24a4:	86 a1       	ldd	r24, Z+38	; 0x26
    24a6:	89 17       	cp	r24, r25
    24a8:	58 f4       	brcc	.+22     	; 0x24c0 <TWI_MasterWriteHandler+0x42>
    24aa:	86 a1       	ldd	r24, Z+38	; 0x26
    24ac:	ef 01       	movw	r28, r30
    24ae:	c8 0f       	add	r28, r24
    24b0:	d1 1d       	adc	r29, r1
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	18 96       	adiw	r26, 0x08	; 8
    24b6:	8c 93       	st	X, r24
    24b8:	86 a1       	ldd	r24, Z+38	; 0x26
    24ba:	8f 5f       	subi	r24, 0xFF	; 255
    24bc:	86 a3       	std	Z+38, r24	; 0x26
    24be:	0e c0       	rjmp	.+28     	; 0x24dc <TWI_MasterWriteHandler+0x5e>
    24c0:	87 a1       	ldd	r24, Z+39	; 0x27
    24c2:	82 17       	cp	r24, r18
    24c4:	28 f4       	brcc	.+10     	; 0x24d0 <TWI_MasterWriteHandler+0x52>
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	81 60       	ori	r24, 0x01	; 1
    24ca:	17 96       	adiw	r26, 0x07	; 7
    24cc:	8c 93       	st	X, r24
    24ce:	06 c0       	rjmp	.+12     	; 0x24dc <TWI_MasterWriteHandler+0x5e>
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	14 96       	adiw	r26, 0x04	; 4
    24d4:	8c 93       	st	X, r24
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	81 a7       	std	Z+41, r24	; 0x29
    24da:	10 a6       	std	Z+40, r1	; 0x28
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	08 95       	ret

000024e2 <TWI_MasterReadHandler>:
    24e2:	fc 01       	movw	r30, r24
    24e4:	87 a1       	ldd	r24, Z+39	; 0x27
    24e6:	80 31       	cpi	r24, 0x10	; 16
    24e8:	70 f4       	brcc	.+28     	; 0x2506 <TWI_MasterReadHandler+0x24>
    24ea:	a0 81       	ld	r26, Z
    24ec:	b1 81       	ldd	r27, Z+1	; 0x01
    24ee:	18 96       	adiw	r26, 0x08	; 8
    24f0:	8c 91       	ld	r24, X
    24f2:	97 a1       	ldd	r25, Z+39	; 0x27
    24f4:	df 01       	movw	r26, r30
    24f6:	a9 0f       	add	r26, r25
    24f8:	b1 1d       	adc	r27, r1
    24fa:	54 96       	adiw	r26, 0x14	; 20
    24fc:	8c 93       	st	X, r24
    24fe:	87 a1       	ldd	r24, Z+39	; 0x27
    2500:	8f 5f       	subi	r24, 0xFF	; 255
    2502:	87 a3       	std	Z+39, r24	; 0x27
    2504:	08 c0       	rjmp	.+16     	; 0x2516 <TWI_MasterReadHandler+0x34>
    2506:	a0 81       	ld	r26, Z
    2508:	b1 81       	ldd	r27, Z+1	; 0x01
    250a:	83 e0       	ldi	r24, 0x03	; 3
    250c:	14 96       	adiw	r26, 0x04	; 4
    250e:	8c 93       	st	X, r24
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	81 a7       	std	Z+41, r24	; 0x29
    2514:	10 a6       	std	Z+40, r1	; 0x28
    2516:	95 a1       	ldd	r25, Z+37	; 0x25
    2518:	87 a1       	ldd	r24, Z+39	; 0x27
    251a:	89 17       	cp	r24, r25
    251c:	30 f4       	brcc	.+12     	; 0x252a <TWI_MasterReadHandler+0x48>
    251e:	01 90       	ld	r0, Z+
    2520:	f0 81       	ld	r31, Z
    2522:	e0 2d       	mov	r30, r0
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	84 83       	std	Z+4, r24	; 0x04
    2528:	08 95       	ret
    252a:	a0 81       	ld	r26, Z
    252c:	b1 81       	ldd	r27, Z+1	; 0x01
    252e:	87 e0       	ldi	r24, 0x07	; 7
    2530:	14 96       	adiw	r26, 0x04	; 4
    2532:	8c 93       	st	X, r24
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	81 a7       	std	Z+41, r24	; 0x29
    2538:	10 a6       	std	Z+40, r1	; 0x28
    253a:	08 95       	ret

0000253c <TWI_MasterInterruptHandler>:
    253c:	dc 01       	movw	r26, r24
    253e:	ed 91       	ld	r30, X+
    2540:	fc 91       	ld	r31, X
    2542:	25 81       	ldd	r18, Z+5	; 0x05
    2544:	32 2f       	mov	r19, r18
    2546:	3c 70       	andi	r19, 0x0C	; 12
    2548:	19 f0       	breq	.+6      	; 0x2550 <TWI_MasterInterruptHandler+0x14>
    254a:	0e 94 2d 12 	call	0x245a	; 0x245a <TWI_MasterArbitrationLostBusErrorHandler>
    254e:	08 95       	ret
    2550:	26 ff       	sbrs	r18, 6
    2552:	03 c0       	rjmp	.+6      	; 0x255a <TWI_MasterInterruptHandler+0x1e>
    2554:	0e 94 3f 12 	call	0x247e	; 0x247e <TWI_MasterWriteHandler>
    2558:	08 95       	ret
    255a:	22 23       	and	r18, r18
    255c:	1c f4       	brge	.+6      	; 0x2564 <TWI_MasterInterruptHandler+0x28>
    255e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <TWI_MasterReadHandler>
    2562:	08 95       	ret
    2564:	26 e0       	ldi	r18, 0x06	; 6
    2566:	fc 01       	movw	r30, r24
    2568:	21 a7       	std	Z+41, r18	; 0x29
    256a:	10 a6       	std	Z+40, r1	; 0x28
    256c:	08 95       	ret

0000256e <initUSART>:
 }

 uint8_t receive_byte(void) {
	 loop_until_bit_is_set(USART0_STATUS, USART_RXCIE_bp);       /* Wait for incoming data */
	 return USART0_RXDATAL;                                /* return register value */
 }
    256e:	85 30       	cpi	r24, 0x05	; 5
    2570:	71 f0       	breq	.+28     	; 0x258e <initUSART+0x20>
    2572:	28 f4       	brcc	.+10     	; 0x257e <initUSART+0x10>
    2574:	82 30       	cpi	r24, 0x02	; 2
    2576:	b9 f0       	breq	.+46     	; 0x25a6 <initUSART+0x38>
    2578:	84 30       	cpi	r24, 0x04	; 4
    257a:	31 f0       	breq	.+12     	; 0x2588 <initUSART+0x1a>
    257c:	11 c0       	rjmp	.+34     	; 0x25a0 <initUSART+0x32>
    257e:	86 30       	cpi	r24, 0x06	; 6
    2580:	49 f0       	breq	.+18     	; 0x2594 <initUSART+0x26>
    2582:	87 30       	cpi	r24, 0x07	; 7
    2584:	51 f0       	breq	.+20     	; 0x259a <initUSART+0x2c>
    2586:	0c c0       	rjmp	.+24     	; 0x25a0 <initUSART+0x32>
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3b e4       	ldi	r19, 0x4B	; 75
    258c:	0e c0       	rjmp	.+28     	; 0x25aa <initUSART+0x3c>
    258e:	20 eb       	ldi	r18, 0xB0	; 176
    2590:	34 e0       	ldi	r19, 0x04	; 4
    2592:	0b c0       	rjmp	.+22     	; 0x25aa <initUSART+0x3c>
    2594:	20 ec       	ldi	r18, 0xC0	; 192
    2596:	32 e1       	ldi	r19, 0x12	; 18
    2598:	08 c0       	rjmp	.+16     	; 0x25aa <initUSART+0x3c>
    259a:	2c e2       	ldi	r18, 0x2C	; 44
    259c:	31 e0       	ldi	r19, 0x01	; 1
    259e:	05 c0       	rjmp	.+10     	; 0x25aa <initUSART+0x3c>
    25a0:	2c e2       	ldi	r18, 0x2C	; 44
    25a2:	31 e0       	ldi	r19, 0x01	; 1
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <initUSART+0x3c>
    25a6:	20 e8       	ldi	r18, 0x80	; 128
    25a8:	35 e2       	ldi	r19, 0x25	; 37
    25aa:	03 2e       	mov	r0, r19
    25ac:	00 0c       	add	r0, r0
    25ae:	44 0b       	sbc	r20, r20
    25b0:	55 0b       	sbc	r21, r21
    25b2:	64 e5       	ldi	r22, 0x54	; 84
    25b4:	73 e7       	ldi	r23, 0x73	; 115
    25b6:	8b ec       	ldi	r24, 0xCB	; 203
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 30 19 	call	0x3260	; 0x3260 <__udivmodsi4>
    25be:	e0 e2       	ldi	r30, 0x20	; 32
    25c0:	f4 e0       	ldi	r31, 0x04	; 4
    25c2:	80 81       	ld	r24, Z
    25c4:	84 60       	ori	r24, 0x04	; 4
    25c6:	80 83       	st	Z, r24
    25c8:	a4 e2       	ldi	r26, 0x24	; 36
    25ca:	b4 e0       	ldi	r27, 0x04	; 4
    25cc:	8c 91       	ld	r24, X
    25ce:	84 60       	ori	r24, 0x04	; 4
    25d0:	8c 93       	st	X, r24
    25d2:	80 81       	ld	r24, Z
    25d4:	87 7f       	andi	r24, 0xF7	; 247
    25d6:	80 83       	st	Z, r24
    25d8:	80 81       	ld	r24, Z
    25da:	81 60       	ori	r24, 0x01	; 1
    25dc:	80 83       	st	Z, r24
    25de:	83 2f       	mov	r24, r19
    25e0:	99 27       	eor	r25, r25
    25e2:	87 fd       	sbrc	r24, 7
    25e4:	9a 95       	dec	r25
    25e6:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    25ea:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
    25ee:	e5 e0       	ldi	r30, 0x05	; 5
    25f0:	f8 e0       	ldi	r31, 0x08	; 8
    25f2:	80 81       	ld	r24, Z
    25f4:	81 60       	ori	r24, 0x01	; 1
    25f6:	80 83       	st	Z, r24
    25f8:	80 81       	ld	r24, Z
    25fa:	80 68       	ori	r24, 0x80	; 128
    25fc:	80 83       	st	Z, r24
    25fe:	80 ec       	ldi	r24, 0xC0	; 192
    2600:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    2604:	83 e0       	ldi	r24, 0x03	; 3
    2606:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
    260a:	e4 e0       	ldi	r30, 0x04	; 4
    260c:	f8 e0       	ldi	r31, 0x08	; 8
    260e:	80 81       	ld	r24, Z
    2610:	80 68       	ori	r24, 0x80	; 128
    2612:	80 83       	st	Z, r24
    2614:	08 95       	ret

00002616 <transmit_byte>:
    2616:	e4 e0       	ldi	r30, 0x04	; 4
    2618:	f8 e0       	ldi	r31, 0x08	; 8
    261a:	90 81       	ld	r25, Z
    261c:	95 ff       	sbrs	r25, 5
    261e:	fd cf       	rjmp	.-6      	; 0x261a <transmit_byte+0x4>
    2620:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    2624:	08 95       	ret

00002626 <nibbleToHexCharacter>:

 char nibbleToHexCharacter(uint8_t nibble) {
	 /* Converts 4 bits into hexadecimal */
	 if (nibble < 10) {
    2626:	8a 30       	cpi	r24, 0x0A	; 10
    2628:	10 f4       	brcc	.+4      	; 0x262e <nibbleToHexCharacter+0x8>
		 return ('0' + nibble);
    262a:	80 5d       	subi	r24, 0xD0	; 208
    262c:	08 95       	ret
	 }
	 else {
		 return ('A' + nibble - 10);
    262e:	89 5c       	subi	r24, 0xC9	; 201
	 }
 }
    2630:	08 95       	ret

00002632 <GetHexString>:

 void GetHexString(uint8_t byte, char *out)
 {
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	18 2f       	mov	r17, r24
    263a:	eb 01       	movw	r28, r22
	 uint8_t nibble;
	 nibble = (byte & 0b11110000) >> 4;
	 out[0] = nibbleToHexCharacter(nibble);
    263c:	82 95       	swap	r24
    263e:	8f 70       	andi	r24, 0x0F	; 15
    2640:	0e 94 13 13 	call	0x2626	; 0x2626 <nibbleToHexCharacter>
    2644:	88 83       	st	Y, r24
	 nibble = byte & 0b00001111;
	 out[1] = nibbleToHexCharacter(nibble);
    2646:	81 2f       	mov	r24, r17
    2648:	8f 70       	andi	r24, 0x0F	; 15
    264a:	0e 94 13 13 	call	0x2626	; 0x2626 <nibbleToHexCharacter>
    264e:	89 83       	std	Y+1, r24	; 0x01
 }
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	08 95       	ret

00002658 <GetByteFromString>:
 
 uint8_t GetByteFromString(char *in)
 {
    2658:	fc 01       	movw	r30, r24
	 uint8_t out = 0x00;
	 
	 if (in[0] >= 0x30 && in[0] <= 0x39)
    265a:	20 81       	ld	r18, Z
    265c:	90 ed       	ldi	r25, 0xD0	; 208
    265e:	92 0f       	add	r25, r18
    2660:	9a 30       	cpi	r25, 0x0A	; 10
    2662:	20 f4       	brcc	.+8      	; 0x266c <GetByteFromString+0x14>
	 {
		 out += (in[0] - 0x30) << 4;
    2664:	89 2f       	mov	r24, r25
    2666:	82 95       	swap	r24
    2668:	80 7f       	andi	r24, 0xF0	; 240
    266a:	0a c0       	rjmp	.+20     	; 0x2680 <GetByteFromString+0x28>
	 }
	 else if (in[0] >= 0x41 && in[0] <= 0x46)
    266c:	8f eb       	ldi	r24, 0xBF	; 191
    266e:	82 0f       	add	r24, r18
    2670:	86 30       	cpi	r24, 0x06	; 6
    2672:	28 f4       	brcc	.+10     	; 0x267e <GetByteFromString+0x26>
	 {
		 out += (in[0] - 0x37) << 4;
    2674:	27 53       	subi	r18, 0x37	; 55
    2676:	82 2f       	mov	r24, r18
    2678:	82 95       	swap	r24
    267a:	80 7f       	andi	r24, 0xF0	; 240
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <GetByteFromString+0x28>
	 out[1] = nibbleToHexCharacter(nibble);
 }
 
 uint8_t GetByteFromString(char *in)
 {
	 uint8_t out = 0x00;
    267e:	80 e0       	ldi	r24, 0x00	; 0
	 else if (in[0] >= 0x41 && in[0] <= 0x46)
	 {
		 out += (in[0] - 0x37) << 4;
	 }
	 
	 if (in[1] >= 0x30 && in[1] <= 0x39)
    2680:	91 81       	ldd	r25, Z+1	; 0x01
    2682:	20 ed       	ldi	r18, 0xD0	; 208
    2684:	29 0f       	add	r18, r25
    2686:	2a 30       	cpi	r18, 0x0A	; 10
    2688:	10 f4       	brcc	.+4      	; 0x268e <GetByteFromString+0x36>
	 {
		 out += (in[1] - 0x30);
    268a:	82 0f       	add	r24, r18
    268c:	08 95       	ret
	 }
	 else if (in[1] >= 0x41 && in[1] <= 0x46)
    268e:	2f eb       	ldi	r18, 0xBF	; 191
    2690:	29 0f       	add	r18, r25
    2692:	26 30       	cpi	r18, 0x06	; 6
    2694:	10 f4       	brcc	.+4      	; 0x269a <GetByteFromString+0x42>
	 {
		 out += (in[1] - 0x37);
    2696:	97 53       	subi	r25, 0x37	; 55
    2698:	89 0f       	add	r24, r25
		 
	 }
	 
	 
	 return out;
 }
    269a:	08 95       	ret

0000269c <print_bytes>:

 void print_bytes(uint8_t myBytes[], uint8_t len, int check_sum_enable)
 {
    269c:	af 92       	push	r10
    269e:	bf 92       	push	r11
    26a0:	cf 92       	push	r12
    26a2:	df 92       	push	r13
    26a4:	ef 92       	push	r14
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <print_bytes+0x16>
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	 uint8_t i = 0;
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
    26b6:	41 30       	cpi	r20, 0x01	; 1
    26b8:	51 05       	cpc	r21, r1
    26ba:	19 f0       	breq	.+6      	; 0x26c2 <print_bytes+0x26>
		 GetHexString((uint8_t)checksum, tmp);
		 transmit_byte(tmp[0]);
		 transmit_byte(tmp[1]);
	 }
	 else{
		 for(i = 0; i < len; i++)
    26bc:	61 11       	cpse	r22, r1
    26be:	2b c0       	rjmp	.+86     	; 0x2716 <print_bytes+0x7a>
    26c0:	3a c0       	rjmp	.+116    	; 0x2736 <print_bytes+0x9a>
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
	 {
		 for(i = 0; i < len; i++)
    26c2:	66 23       	and	r22, r22
    26c4:	c9 f0       	breq	.+50     	; 0x26f8 <print_bytes+0x5c>
    26c6:	8c 01       	movw	r16, r24
    26c8:	61 50       	subi	r22, 0x01	; 1
    26ca:	26 2f       	mov	r18, r22
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	2f 5f       	subi	r18, 0xFF	; 255
    26d0:	3f 4f       	sbci	r19, 0xFF	; 255
    26d2:	7c 01       	movw	r14, r24
    26d4:	e2 0e       	add	r14, r18
    26d6:	f3 1e       	adc	r15, r19
    26d8:	c1 2c       	mov	r12, r1
    26da:	d1 2c       	mov	r13, r1
    26dc:	58 01       	movw	r10, r16
		 {
			 transmit_byte(myBytes[i]);
    26de:	f8 01       	movw	r30, r16
    26e0:	81 91       	ld	r24, Z+
    26e2:	8f 01       	movw	r16, r30
    26e4:	0e 94 0b 13 	call	0x2616	; 0x2616 <transmit_byte>
			 checksum += myBytes[i];
    26e8:	f5 01       	movw	r30, r10
    26ea:	80 81       	ld	r24, Z
    26ec:	c8 0e       	add	r12, r24
    26ee:	d1 1c       	adc	r13, r1
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
	 {
		 for(i = 0; i < len; i++)
    26f0:	e0 16       	cp	r14, r16
    26f2:	f1 06       	cpc	r15, r17
    26f4:	99 f7       	brne	.-26     	; 0x26dc <print_bytes+0x40>
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <print_bytes+0x60>
    26f8:	c1 2c       	mov	r12, r1
    26fa:	d1 2c       	mov	r13, r1
		 {
			 transmit_byte(myBytes[i]);
			 checksum += myBytes[i];
		 }
		 checksum = checksum & 0xff;
		 GetHexString((uint8_t)checksum, tmp);
    26fc:	be 01       	movw	r22, r28
    26fe:	6f 5f       	subi	r22, 0xFF	; 255
    2700:	7f 4f       	sbci	r23, 0xFF	; 255
    2702:	8c 2d       	mov	r24, r12
    2704:	0e 94 19 13 	call	0x2632	; 0x2632 <GetHexString>
		 transmit_byte(tmp[0]);
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	0e 94 0b 13 	call	0x2616	; 0x2616 <transmit_byte>
		 transmit_byte(tmp[1]);
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	0e 94 0b 13 	call	0x2616	; 0x2616 <transmit_byte>
    2714:	10 c0       	rjmp	.+32     	; 0x2736 <print_bytes+0x9a>
    2716:	8c 01       	movw	r16, r24
    2718:	61 50       	subi	r22, 0x01	; 1
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	6f 5f       	subi	r22, 0xFF	; 255
    271e:	7f 4f       	sbci	r23, 0xFF	; 255
    2720:	7c 01       	movw	r14, r24
    2722:	e6 0e       	add	r14, r22
    2724:	f7 1e       	adc	r15, r23
	 }
	 else{
		 for(i = 0; i < len; i++)
		 {
			 transmit_byte(myBytes[i]);
    2726:	f8 01       	movw	r30, r16
    2728:	81 91       	ld	r24, Z+
    272a:	8f 01       	movw	r16, r30
    272c:	0e 94 0b 13 	call	0x2616	; 0x2616 <transmit_byte>
		 GetHexString((uint8_t)checksum, tmp);
		 transmit_byte(tmp[0]);
		 transmit_byte(tmp[1]);
	 }
	 else{
		 for(i = 0; i < len; i++)
    2730:	0e 15       	cp	r16, r14
    2732:	1f 05       	cpc	r17, r15
    2734:	c1 f7       	brne	.-16     	; 0x2726 <print_bytes+0x8a>
		 {
			 transmit_byte(myBytes[i]);
		 }
	 }

	 transmit_byte(0x0d);
    2736:	8d e0       	ldi	r24, 0x0D	; 13
    2738:	0e 94 0b 13 	call	0x2616	; 0x2616 <transmit_byte>
	 
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	ff 90       	pop	r15
    274a:	ef 90       	pop	r14
    274c:	df 90       	pop	r13
    274e:	cf 90       	pop	r12
    2750:	bf 90       	pop	r11
    2752:	af 90       	pop	r10
    2754:	08 95       	ret

00002756 <__subsf3>:
    2756:	50 58       	subi	r21, 0x80	; 128

00002758 <__addsf3>:
    2758:	bb 27       	eor	r27, r27
    275a:	aa 27       	eor	r26, r26
    275c:	0e 94 c3 13 	call	0x2786	; 0x2786 <__addsf3x>
    2760:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__fp_round>
    2764:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__fp_pscA>
    2768:	38 f0       	brcs	.+14     	; 0x2778 <__addsf3+0x20>
    276a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fp_pscB>
    276e:	20 f0       	brcs	.+8      	; 0x2778 <__addsf3+0x20>
    2770:	39 f4       	brne	.+14     	; 0x2780 <__addsf3+0x28>
    2772:	9f 3f       	cpi	r25, 0xFF	; 255
    2774:	19 f4       	brne	.+6      	; 0x277c <__addsf3+0x24>
    2776:	26 f4       	brtc	.+8      	; 0x2780 <__addsf3+0x28>
    2778:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__fp_nan>
    277c:	0e f4       	brtc	.+2      	; 0x2780 <__addsf3+0x28>
    277e:	e0 95       	com	r30
    2780:	e7 fb       	bst	r30, 7
    2782:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>

00002786 <__addsf3x>:
    2786:	e9 2f       	mov	r30, r25
    2788:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__fp_split3>
    278c:	58 f3       	brcs	.-42     	; 0x2764 <__addsf3+0xc>
    278e:	ba 17       	cp	r27, r26
    2790:	62 07       	cpc	r22, r18
    2792:	73 07       	cpc	r23, r19
    2794:	84 07       	cpc	r24, r20
    2796:	95 07       	cpc	r25, r21
    2798:	20 f0       	brcs	.+8      	; 0x27a2 <__addsf3x+0x1c>
    279a:	79 f4       	brne	.+30     	; 0x27ba <__addsf3x+0x34>
    279c:	a6 f5       	brtc	.+104    	; 0x2806 <__addsf3x+0x80>
    279e:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__fp_zero>
    27a2:	0e f4       	brtc	.+2      	; 0x27a6 <__addsf3x+0x20>
    27a4:	e0 95       	com	r30
    27a6:	0b 2e       	mov	r0, r27
    27a8:	ba 2f       	mov	r27, r26
    27aa:	a0 2d       	mov	r26, r0
    27ac:	0b 01       	movw	r0, r22
    27ae:	b9 01       	movw	r22, r18
    27b0:	90 01       	movw	r18, r0
    27b2:	0c 01       	movw	r0, r24
    27b4:	ca 01       	movw	r24, r20
    27b6:	a0 01       	movw	r20, r0
    27b8:	11 24       	eor	r1, r1
    27ba:	ff 27       	eor	r31, r31
    27bc:	59 1b       	sub	r21, r25
    27be:	99 f0       	breq	.+38     	; 0x27e6 <__addsf3x+0x60>
    27c0:	59 3f       	cpi	r21, 0xF9	; 249
    27c2:	50 f4       	brcc	.+20     	; 0x27d8 <__addsf3x+0x52>
    27c4:	50 3e       	cpi	r21, 0xE0	; 224
    27c6:	68 f1       	brcs	.+90     	; 0x2822 <__addsf3x+0x9c>
    27c8:	1a 16       	cp	r1, r26
    27ca:	f0 40       	sbci	r31, 0x00	; 0
    27cc:	a2 2f       	mov	r26, r18
    27ce:	23 2f       	mov	r18, r19
    27d0:	34 2f       	mov	r19, r20
    27d2:	44 27       	eor	r20, r20
    27d4:	58 5f       	subi	r21, 0xF8	; 248
    27d6:	f3 cf       	rjmp	.-26     	; 0x27be <__addsf3x+0x38>
    27d8:	46 95       	lsr	r20
    27da:	37 95       	ror	r19
    27dc:	27 95       	ror	r18
    27de:	a7 95       	ror	r26
    27e0:	f0 40       	sbci	r31, 0x00	; 0
    27e2:	53 95       	inc	r21
    27e4:	c9 f7       	brne	.-14     	; 0x27d8 <__addsf3x+0x52>
    27e6:	7e f4       	brtc	.+30     	; 0x2806 <__addsf3x+0x80>
    27e8:	1f 16       	cp	r1, r31
    27ea:	ba 0b       	sbc	r27, r26
    27ec:	62 0b       	sbc	r22, r18
    27ee:	73 0b       	sbc	r23, r19
    27f0:	84 0b       	sbc	r24, r20
    27f2:	ba f0       	brmi	.+46     	; 0x2822 <__addsf3x+0x9c>
    27f4:	91 50       	subi	r25, 0x01	; 1
    27f6:	a1 f0       	breq	.+40     	; 0x2820 <__addsf3x+0x9a>
    27f8:	ff 0f       	add	r31, r31
    27fa:	bb 1f       	adc	r27, r27
    27fc:	66 1f       	adc	r22, r22
    27fe:	77 1f       	adc	r23, r23
    2800:	88 1f       	adc	r24, r24
    2802:	c2 f7       	brpl	.-16     	; 0x27f4 <__addsf3x+0x6e>
    2804:	0e c0       	rjmp	.+28     	; 0x2822 <__addsf3x+0x9c>
    2806:	ba 0f       	add	r27, r26
    2808:	62 1f       	adc	r22, r18
    280a:	73 1f       	adc	r23, r19
    280c:	84 1f       	adc	r24, r20
    280e:	48 f4       	brcc	.+18     	; 0x2822 <__addsf3x+0x9c>
    2810:	87 95       	ror	r24
    2812:	77 95       	ror	r23
    2814:	67 95       	ror	r22
    2816:	b7 95       	ror	r27
    2818:	f7 95       	ror	r31
    281a:	9e 3f       	cpi	r25, 0xFE	; 254
    281c:	08 f0       	brcs	.+2      	; 0x2820 <__addsf3x+0x9a>
    281e:	b0 cf       	rjmp	.-160    	; 0x2780 <__addsf3+0x28>
    2820:	93 95       	inc	r25
    2822:	88 0f       	add	r24, r24
    2824:	08 f0       	brcs	.+2      	; 0x2828 <__addsf3x+0xa2>
    2826:	99 27       	eor	r25, r25
    2828:	ee 0f       	add	r30, r30
    282a:	97 95       	ror	r25
    282c:	87 95       	ror	r24
    282e:	08 95       	ret

00002830 <__cmpsf2>:
    2830:	0e 94 cc 14 	call	0x2998	; 0x2998 <__fp_cmp>
    2834:	08 f4       	brcc	.+2      	; 0x2838 <__cmpsf2+0x8>
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	08 95       	ret

0000283a <__divsf3>:
    283a:	0e 94 31 14 	call	0x2862	; 0x2862 <__divsf3x>
    283e:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__fp_round>
    2842:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fp_pscB>
    2846:	58 f0       	brcs	.+22     	; 0x285e <__divsf3+0x24>
    2848:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__fp_pscA>
    284c:	40 f0       	brcs	.+16     	; 0x285e <__divsf3+0x24>
    284e:	29 f4       	brne	.+10     	; 0x285a <__divsf3+0x20>
    2850:	5f 3f       	cpi	r21, 0xFF	; 255
    2852:	29 f0       	breq	.+10     	; 0x285e <__divsf3+0x24>
    2854:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>
    2858:	51 11       	cpse	r21, r1
    285a:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>
    285e:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__fp_nan>

00002862 <__divsf3x>:
    2862:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__fp_split3>
    2866:	68 f3       	brcs	.-38     	; 0x2842 <__divsf3+0x8>

00002868 <__divsf3_pse>:
    2868:	99 23       	and	r25, r25
    286a:	b1 f3       	breq	.-20     	; 0x2858 <__divsf3+0x1e>
    286c:	55 23       	and	r21, r21
    286e:	91 f3       	breq	.-28     	; 0x2854 <__divsf3+0x1a>
    2870:	95 1b       	sub	r25, r21
    2872:	55 0b       	sbc	r21, r21
    2874:	bb 27       	eor	r27, r27
    2876:	aa 27       	eor	r26, r26
    2878:	62 17       	cp	r22, r18
    287a:	73 07       	cpc	r23, r19
    287c:	84 07       	cpc	r24, r20
    287e:	38 f0       	brcs	.+14     	; 0x288e <__divsf3_pse+0x26>
    2880:	9f 5f       	subi	r25, 0xFF	; 255
    2882:	5f 4f       	sbci	r21, 0xFF	; 255
    2884:	22 0f       	add	r18, r18
    2886:	33 1f       	adc	r19, r19
    2888:	44 1f       	adc	r20, r20
    288a:	aa 1f       	adc	r26, r26
    288c:	a9 f3       	breq	.-22     	; 0x2878 <__divsf3_pse+0x10>
    288e:	35 d0       	rcall	.+106    	; 0x28fa <__divsf3_pse+0x92>
    2890:	0e 2e       	mov	r0, r30
    2892:	3a f0       	brmi	.+14     	; 0x28a2 <__divsf3_pse+0x3a>
    2894:	e0 e8       	ldi	r30, 0x80	; 128
    2896:	32 d0       	rcall	.+100    	; 0x28fc <__divsf3_pse+0x94>
    2898:	91 50       	subi	r25, 0x01	; 1
    289a:	50 40       	sbci	r21, 0x00	; 0
    289c:	e6 95       	lsr	r30
    289e:	00 1c       	adc	r0, r0
    28a0:	ca f7       	brpl	.-14     	; 0x2894 <__divsf3_pse+0x2c>
    28a2:	2b d0       	rcall	.+86     	; 0x28fa <__divsf3_pse+0x92>
    28a4:	fe 2f       	mov	r31, r30
    28a6:	29 d0       	rcall	.+82     	; 0x28fa <__divsf3_pse+0x92>
    28a8:	66 0f       	add	r22, r22
    28aa:	77 1f       	adc	r23, r23
    28ac:	88 1f       	adc	r24, r24
    28ae:	bb 1f       	adc	r27, r27
    28b0:	26 17       	cp	r18, r22
    28b2:	37 07       	cpc	r19, r23
    28b4:	48 07       	cpc	r20, r24
    28b6:	ab 07       	cpc	r26, r27
    28b8:	b0 e8       	ldi	r27, 0x80	; 128
    28ba:	09 f0       	breq	.+2      	; 0x28be <__divsf3_pse+0x56>
    28bc:	bb 0b       	sbc	r27, r27
    28be:	80 2d       	mov	r24, r0
    28c0:	bf 01       	movw	r22, r30
    28c2:	ff 27       	eor	r31, r31
    28c4:	93 58       	subi	r25, 0x83	; 131
    28c6:	5f 4f       	sbci	r21, 0xFF	; 255
    28c8:	3a f0       	brmi	.+14     	; 0x28d8 <__divsf3_pse+0x70>
    28ca:	9e 3f       	cpi	r25, 0xFE	; 254
    28cc:	51 05       	cpc	r21, r1
    28ce:	78 f0       	brcs	.+30     	; 0x28ee <__divsf3_pse+0x86>
    28d0:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>
    28d4:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>
    28d8:	5f 3f       	cpi	r21, 0xFF	; 255
    28da:	e4 f3       	brlt	.-8      	; 0x28d4 <__divsf3_pse+0x6c>
    28dc:	98 3e       	cpi	r25, 0xE8	; 232
    28de:	d4 f3       	brlt	.-12     	; 0x28d4 <__divsf3_pse+0x6c>
    28e0:	86 95       	lsr	r24
    28e2:	77 95       	ror	r23
    28e4:	67 95       	ror	r22
    28e6:	b7 95       	ror	r27
    28e8:	f7 95       	ror	r31
    28ea:	9f 5f       	subi	r25, 0xFF	; 255
    28ec:	c9 f7       	brne	.-14     	; 0x28e0 <__divsf3_pse+0x78>
    28ee:	88 0f       	add	r24, r24
    28f0:	91 1d       	adc	r25, r1
    28f2:	96 95       	lsr	r25
    28f4:	87 95       	ror	r24
    28f6:	97 f9       	bld	r25, 7
    28f8:	08 95       	ret
    28fa:	e1 e0       	ldi	r30, 0x01	; 1
    28fc:	66 0f       	add	r22, r22
    28fe:	77 1f       	adc	r23, r23
    2900:	88 1f       	adc	r24, r24
    2902:	bb 1f       	adc	r27, r27
    2904:	62 17       	cp	r22, r18
    2906:	73 07       	cpc	r23, r19
    2908:	84 07       	cpc	r24, r20
    290a:	ba 07       	cpc	r27, r26
    290c:	20 f0       	brcs	.+8      	; 0x2916 <__divsf3_pse+0xae>
    290e:	62 1b       	sub	r22, r18
    2910:	73 0b       	sbc	r23, r19
    2912:	84 0b       	sbc	r24, r20
    2914:	ba 0b       	sbc	r27, r26
    2916:	ee 1f       	adc	r30, r30
    2918:	88 f7       	brcc	.-30     	; 0x28fc <__divsf3_pse+0x94>
    291a:	e0 95       	com	r30
    291c:	08 95       	ret

0000291e <__floatunsisf>:
    291e:	e8 94       	clt
    2920:	09 c0       	rjmp	.+18     	; 0x2934 <__floatsisf+0x12>

00002922 <__floatsisf>:
    2922:	97 fb       	bst	r25, 7
    2924:	3e f4       	brtc	.+14     	; 0x2934 <__floatsisf+0x12>
    2926:	90 95       	com	r25
    2928:	80 95       	com	r24
    292a:	70 95       	com	r23
    292c:	61 95       	neg	r22
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	8f 4f       	sbci	r24, 0xFF	; 255
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	99 23       	and	r25, r25
    2936:	a9 f0       	breq	.+42     	; 0x2962 <__floatsisf+0x40>
    2938:	f9 2f       	mov	r31, r25
    293a:	96 e9       	ldi	r25, 0x96	; 150
    293c:	bb 27       	eor	r27, r27
    293e:	93 95       	inc	r25
    2940:	f6 95       	lsr	r31
    2942:	87 95       	ror	r24
    2944:	77 95       	ror	r23
    2946:	67 95       	ror	r22
    2948:	b7 95       	ror	r27
    294a:	f1 11       	cpse	r31, r1
    294c:	f8 cf       	rjmp	.-16     	; 0x293e <__floatsisf+0x1c>
    294e:	fa f4       	brpl	.+62     	; 0x298e <__floatsisf+0x6c>
    2950:	bb 0f       	add	r27, r27
    2952:	11 f4       	brne	.+4      	; 0x2958 <__floatsisf+0x36>
    2954:	60 ff       	sbrs	r22, 0
    2956:	1b c0       	rjmp	.+54     	; 0x298e <__floatsisf+0x6c>
    2958:	6f 5f       	subi	r22, 0xFF	; 255
    295a:	7f 4f       	sbci	r23, 0xFF	; 255
    295c:	8f 4f       	sbci	r24, 0xFF	; 255
    295e:	9f 4f       	sbci	r25, 0xFF	; 255
    2960:	16 c0       	rjmp	.+44     	; 0x298e <__floatsisf+0x6c>
    2962:	88 23       	and	r24, r24
    2964:	11 f0       	breq	.+4      	; 0x296a <__floatsisf+0x48>
    2966:	96 e9       	ldi	r25, 0x96	; 150
    2968:	11 c0       	rjmp	.+34     	; 0x298c <__floatsisf+0x6a>
    296a:	77 23       	and	r23, r23
    296c:	21 f0       	breq	.+8      	; 0x2976 <__floatsisf+0x54>
    296e:	9e e8       	ldi	r25, 0x8E	; 142
    2970:	87 2f       	mov	r24, r23
    2972:	76 2f       	mov	r23, r22
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <__floatsisf+0x5e>
    2976:	66 23       	and	r22, r22
    2978:	71 f0       	breq	.+28     	; 0x2996 <__floatsisf+0x74>
    297a:	96 e8       	ldi	r25, 0x86	; 134
    297c:	86 2f       	mov	r24, r22
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	2a f0       	brmi	.+10     	; 0x298e <__floatsisf+0x6c>
    2984:	9a 95       	dec	r25
    2986:	66 0f       	add	r22, r22
    2988:	77 1f       	adc	r23, r23
    298a:	88 1f       	adc	r24, r24
    298c:	da f7       	brpl	.-10     	; 0x2984 <__floatsisf+0x62>
    298e:	88 0f       	add	r24, r24
    2990:	96 95       	lsr	r25
    2992:	87 95       	ror	r24
    2994:	97 f9       	bld	r25, 7
    2996:	08 95       	ret

00002998 <__fp_cmp>:
    2998:	99 0f       	add	r25, r25
    299a:	00 08       	sbc	r0, r0
    299c:	55 0f       	add	r21, r21
    299e:	aa 0b       	sbc	r26, r26
    29a0:	e0 e8       	ldi	r30, 0x80	; 128
    29a2:	fe ef       	ldi	r31, 0xFE	; 254
    29a4:	16 16       	cp	r1, r22
    29a6:	17 06       	cpc	r1, r23
    29a8:	e8 07       	cpc	r30, r24
    29aa:	f9 07       	cpc	r31, r25
    29ac:	c0 f0       	brcs	.+48     	; 0x29de <__fp_cmp+0x46>
    29ae:	12 16       	cp	r1, r18
    29b0:	13 06       	cpc	r1, r19
    29b2:	e4 07       	cpc	r30, r20
    29b4:	f5 07       	cpc	r31, r21
    29b6:	98 f0       	brcs	.+38     	; 0x29de <__fp_cmp+0x46>
    29b8:	62 1b       	sub	r22, r18
    29ba:	73 0b       	sbc	r23, r19
    29bc:	84 0b       	sbc	r24, r20
    29be:	95 0b       	sbc	r25, r21
    29c0:	39 f4       	brne	.+14     	; 0x29d0 <__fp_cmp+0x38>
    29c2:	0a 26       	eor	r0, r26
    29c4:	61 f0       	breq	.+24     	; 0x29de <__fp_cmp+0x46>
    29c6:	23 2b       	or	r18, r19
    29c8:	24 2b       	or	r18, r20
    29ca:	25 2b       	or	r18, r21
    29cc:	21 f4       	brne	.+8      	; 0x29d6 <__fp_cmp+0x3e>
    29ce:	08 95       	ret
    29d0:	0a 26       	eor	r0, r26
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <__fp_cmp+0x3e>
    29d4:	a1 40       	sbci	r26, 0x01	; 1
    29d6:	a6 95       	lsr	r26
    29d8:	8f ef       	ldi	r24, 0xFF	; 255
    29da:	81 1d       	adc	r24, r1
    29dc:	81 1d       	adc	r24, r1
    29de:	08 95       	ret

000029e0 <__fp_inf>:
    29e0:	97 f9       	bld	r25, 7
    29e2:	9f 67       	ori	r25, 0x7F	; 127
    29e4:	80 e8       	ldi	r24, 0x80	; 128
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	08 95       	ret

000029ec <__fp_nan>:
    29ec:	9f ef       	ldi	r25, 0xFF	; 255
    29ee:	80 ec       	ldi	r24, 0xC0	; 192
    29f0:	08 95       	ret

000029f2 <__fp_pscA>:
    29f2:	00 24       	eor	r0, r0
    29f4:	0a 94       	dec	r0
    29f6:	16 16       	cp	r1, r22
    29f8:	17 06       	cpc	r1, r23
    29fa:	18 06       	cpc	r1, r24
    29fc:	09 06       	cpc	r0, r25
    29fe:	08 95       	ret

00002a00 <__fp_pscB>:
    2a00:	00 24       	eor	r0, r0
    2a02:	0a 94       	dec	r0
    2a04:	12 16       	cp	r1, r18
    2a06:	13 06       	cpc	r1, r19
    2a08:	14 06       	cpc	r1, r20
    2a0a:	05 06       	cpc	r0, r21
    2a0c:	08 95       	ret

00002a0e <__fp_round>:
    2a0e:	09 2e       	mov	r0, r25
    2a10:	03 94       	inc	r0
    2a12:	00 0c       	add	r0, r0
    2a14:	11 f4       	brne	.+4      	; 0x2a1a <__fp_round+0xc>
    2a16:	88 23       	and	r24, r24
    2a18:	52 f0       	brmi	.+20     	; 0x2a2e <__fp_round+0x20>
    2a1a:	bb 0f       	add	r27, r27
    2a1c:	40 f4       	brcc	.+16     	; 0x2a2e <__fp_round+0x20>
    2a1e:	bf 2b       	or	r27, r31
    2a20:	11 f4       	brne	.+4      	; 0x2a26 <__fp_round+0x18>
    2a22:	60 ff       	sbrs	r22, 0
    2a24:	04 c0       	rjmp	.+8      	; 0x2a2e <__fp_round+0x20>
    2a26:	6f 5f       	subi	r22, 0xFF	; 255
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	08 95       	ret

00002a30 <__fp_split3>:
    2a30:	57 fd       	sbrc	r21, 7
    2a32:	90 58       	subi	r25, 0x80	; 128
    2a34:	44 0f       	add	r20, r20
    2a36:	55 1f       	adc	r21, r21
    2a38:	59 f0       	breq	.+22     	; 0x2a50 <__fp_splitA+0x10>
    2a3a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a3c:	71 f0       	breq	.+28     	; 0x2a5a <__fp_splitA+0x1a>
    2a3e:	47 95       	ror	r20

00002a40 <__fp_splitA>:
    2a40:	88 0f       	add	r24, r24
    2a42:	97 fb       	bst	r25, 7
    2a44:	99 1f       	adc	r25, r25
    2a46:	61 f0       	breq	.+24     	; 0x2a60 <__fp_splitA+0x20>
    2a48:	9f 3f       	cpi	r25, 0xFF	; 255
    2a4a:	79 f0       	breq	.+30     	; 0x2a6a <__fp_splitA+0x2a>
    2a4c:	87 95       	ror	r24
    2a4e:	08 95       	ret
    2a50:	12 16       	cp	r1, r18
    2a52:	13 06       	cpc	r1, r19
    2a54:	14 06       	cpc	r1, r20
    2a56:	55 1f       	adc	r21, r21
    2a58:	f2 cf       	rjmp	.-28     	; 0x2a3e <__fp_split3+0xe>
    2a5a:	46 95       	lsr	r20
    2a5c:	f1 df       	rcall	.-30     	; 0x2a40 <__fp_splitA>
    2a5e:	08 c0       	rjmp	.+16     	; 0x2a70 <__fp_splitA+0x30>
    2a60:	16 16       	cp	r1, r22
    2a62:	17 06       	cpc	r1, r23
    2a64:	18 06       	cpc	r1, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	f1 cf       	rjmp	.-30     	; 0x2a4c <__fp_splitA+0xc>
    2a6a:	86 95       	lsr	r24
    2a6c:	71 05       	cpc	r23, r1
    2a6e:	61 05       	cpc	r22, r1
    2a70:	08 94       	sec
    2a72:	08 95       	ret

00002a74 <__fp_zero>:
    2a74:	e8 94       	clt

00002a76 <__fp_szero>:
    2a76:	bb 27       	eor	r27, r27
    2a78:	66 27       	eor	r22, r22
    2a7a:	77 27       	eor	r23, r23
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	97 f9       	bld	r25, 7
    2a80:	08 95       	ret

00002a82 <__gesf2>:
    2a82:	0e 94 cc 14 	call	0x2998	; 0x2998 <__fp_cmp>
    2a86:	08 f4       	brcc	.+2      	; 0x2a8a <__gesf2+0x8>
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	08 95       	ret

00002a8c <__mulsf3>:
    2a8c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__mulsf3x>
    2a90:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__fp_round>
    2a94:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__fp_pscA>
    2a98:	38 f0       	brcs	.+14     	; 0x2aa8 <__mulsf3+0x1c>
    2a9a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fp_pscB>
    2a9e:	20 f0       	brcs	.+8      	; 0x2aa8 <__mulsf3+0x1c>
    2aa0:	95 23       	and	r25, r21
    2aa2:	11 f0       	breq	.+4      	; 0x2aa8 <__mulsf3+0x1c>
    2aa4:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>
    2aa8:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__fp_nan>
    2aac:	11 24       	eor	r1, r1
    2aae:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>

00002ab2 <__mulsf3x>:
    2ab2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__fp_split3>
    2ab6:	70 f3       	brcs	.-36     	; 0x2a94 <__mulsf3+0x8>

00002ab8 <__mulsf3_pse>:
    2ab8:	95 9f       	mul	r25, r21
    2aba:	c1 f3       	breq	.-16     	; 0x2aac <__mulsf3+0x20>
    2abc:	95 0f       	add	r25, r21
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	55 1f       	adc	r21, r21
    2ac2:	62 9f       	mul	r22, r18
    2ac4:	f0 01       	movw	r30, r0
    2ac6:	72 9f       	mul	r23, r18
    2ac8:	bb 27       	eor	r27, r27
    2aca:	f0 0d       	add	r31, r0
    2acc:	b1 1d       	adc	r27, r1
    2ace:	63 9f       	mul	r22, r19
    2ad0:	aa 27       	eor	r26, r26
    2ad2:	f0 0d       	add	r31, r0
    2ad4:	b1 1d       	adc	r27, r1
    2ad6:	aa 1f       	adc	r26, r26
    2ad8:	64 9f       	mul	r22, r20
    2ada:	66 27       	eor	r22, r22
    2adc:	b0 0d       	add	r27, r0
    2ade:	a1 1d       	adc	r26, r1
    2ae0:	66 1f       	adc	r22, r22
    2ae2:	82 9f       	mul	r24, r18
    2ae4:	22 27       	eor	r18, r18
    2ae6:	b0 0d       	add	r27, r0
    2ae8:	a1 1d       	adc	r26, r1
    2aea:	62 1f       	adc	r22, r18
    2aec:	73 9f       	mul	r23, r19
    2aee:	b0 0d       	add	r27, r0
    2af0:	a1 1d       	adc	r26, r1
    2af2:	62 1f       	adc	r22, r18
    2af4:	83 9f       	mul	r24, r19
    2af6:	a0 0d       	add	r26, r0
    2af8:	61 1d       	adc	r22, r1
    2afa:	22 1f       	adc	r18, r18
    2afc:	74 9f       	mul	r23, r20
    2afe:	33 27       	eor	r19, r19
    2b00:	a0 0d       	add	r26, r0
    2b02:	61 1d       	adc	r22, r1
    2b04:	23 1f       	adc	r18, r19
    2b06:	84 9f       	mul	r24, r20
    2b08:	60 0d       	add	r22, r0
    2b0a:	21 1d       	adc	r18, r1
    2b0c:	82 2f       	mov	r24, r18
    2b0e:	76 2f       	mov	r23, r22
    2b10:	6a 2f       	mov	r22, r26
    2b12:	11 24       	eor	r1, r1
    2b14:	9f 57       	subi	r25, 0x7F	; 127
    2b16:	50 40       	sbci	r21, 0x00	; 0
    2b18:	9a f0       	brmi	.+38     	; 0x2b40 <__mulsf3_pse+0x88>
    2b1a:	f1 f0       	breq	.+60     	; 0x2b58 <__mulsf3_pse+0xa0>
    2b1c:	88 23       	and	r24, r24
    2b1e:	4a f0       	brmi	.+18     	; 0x2b32 <__mulsf3_pse+0x7a>
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	bb 1f       	adc	r27, r27
    2b26:	66 1f       	adc	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	91 50       	subi	r25, 0x01	; 1
    2b2e:	50 40       	sbci	r21, 0x00	; 0
    2b30:	a9 f7       	brne	.-22     	; 0x2b1c <__mulsf3_pse+0x64>
    2b32:	9e 3f       	cpi	r25, 0xFE	; 254
    2b34:	51 05       	cpc	r21, r1
    2b36:	80 f0       	brcs	.+32     	; 0x2b58 <__mulsf3_pse+0xa0>
    2b38:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>
    2b3c:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>
    2b40:	5f 3f       	cpi	r21, 0xFF	; 255
    2b42:	e4 f3       	brlt	.-8      	; 0x2b3c <__mulsf3_pse+0x84>
    2b44:	98 3e       	cpi	r25, 0xE8	; 232
    2b46:	d4 f3       	brlt	.-12     	; 0x2b3c <__mulsf3_pse+0x84>
    2b48:	86 95       	lsr	r24
    2b4a:	77 95       	ror	r23
    2b4c:	67 95       	ror	r22
    2b4e:	b7 95       	ror	r27
    2b50:	f7 95       	ror	r31
    2b52:	e7 95       	ror	r30
    2b54:	9f 5f       	subi	r25, 0xFF	; 255
    2b56:	c1 f7       	brne	.-16     	; 0x2b48 <__mulsf3_pse+0x90>
    2b58:	fe 2b       	or	r31, r30
    2b5a:	88 0f       	add	r24, r24
    2b5c:	91 1d       	adc	r25, r1
    2b5e:	96 95       	lsr	r25
    2b60:	87 95       	ror	r24
    2b62:	97 f9       	bld	r25, 7
    2b64:	08 95       	ret

00002b66 <vfprintf>:
    2b66:	a0 e1       	ldi	r26, 0x10	; 16
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e9 eb       	ldi	r30, 0xB9	; 185
    2b6c:	f5 e1       	ldi	r31, 0x15	; 21
    2b6e:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__prologue_saves__>
    2b72:	7c 01       	movw	r14, r24
    2b74:	1b 01       	movw	r2, r22
    2b76:	6a 01       	movw	r12, r20
    2b78:	fc 01       	movw	r30, r24
    2b7a:	16 82       	std	Z+6, r1	; 0x06
    2b7c:	17 82       	std	Z+7, r1	; 0x07
    2b7e:	83 81       	ldd	r24, Z+3	; 0x03
    2b80:	81 ff       	sbrs	r24, 1
    2b82:	44 c3       	rjmp	.+1672   	; 0x320c <vfprintf+0x6a6>
    2b84:	9e 01       	movw	r18, r28
    2b86:	2f 5f       	subi	r18, 0xFF	; 255
    2b88:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8a:	39 01       	movw	r6, r18
    2b8c:	f7 01       	movw	r30, r14
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	f1 01       	movw	r30, r2
    2b92:	93 fd       	sbrc	r25, 3
    2b94:	85 91       	lpm	r24, Z+
    2b96:	93 ff       	sbrs	r25, 3
    2b98:	81 91       	ld	r24, Z+
    2b9a:	1f 01       	movw	r2, r30
    2b9c:	88 23       	and	r24, r24
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <vfprintf+0x3c>
    2ba0:	31 c3       	rjmp	.+1634   	; 0x3204 <vfprintf+0x69e>
    2ba2:	85 32       	cpi	r24, 0x25	; 37
    2ba4:	39 f4       	brne	.+14     	; 0x2bb4 <vfprintf+0x4e>
    2ba6:	93 fd       	sbrc	r25, 3
    2ba8:	85 91       	lpm	r24, Z+
    2baa:	93 ff       	sbrs	r25, 3
    2bac:	81 91       	ld	r24, Z+
    2bae:	1f 01       	movw	r2, r30
    2bb0:	85 32       	cpi	r24, 0x25	; 37
    2bb2:	39 f4       	brne	.+14     	; 0x2bc2 <vfprintf+0x5c>
    2bb4:	b7 01       	movw	r22, r14
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2bbc:	56 01       	movw	r10, r12
    2bbe:	65 01       	movw	r12, r10
    2bc0:	e5 cf       	rjmp	.-54     	; 0x2b8c <vfprintf+0x26>
    2bc2:	10 e0       	ldi	r17, 0x00	; 0
    2bc4:	51 2c       	mov	r5, r1
    2bc6:	91 2c       	mov	r9, r1
    2bc8:	ff e1       	ldi	r31, 0x1F	; 31
    2bca:	f9 15       	cp	r31, r9
    2bcc:	d8 f0       	brcs	.+54     	; 0x2c04 <vfprintf+0x9e>
    2bce:	8b 32       	cpi	r24, 0x2B	; 43
    2bd0:	79 f0       	breq	.+30     	; 0x2bf0 <vfprintf+0x8a>
    2bd2:	38 f4       	brcc	.+14     	; 0x2be2 <vfprintf+0x7c>
    2bd4:	80 32       	cpi	r24, 0x20	; 32
    2bd6:	79 f0       	breq	.+30     	; 0x2bf6 <vfprintf+0x90>
    2bd8:	83 32       	cpi	r24, 0x23	; 35
    2bda:	a1 f4       	brne	.+40     	; 0x2c04 <vfprintf+0x9e>
    2bdc:	f9 2d       	mov	r31, r9
    2bde:	f0 61       	ori	r31, 0x10	; 16
    2be0:	2e c0       	rjmp	.+92     	; 0x2c3e <vfprintf+0xd8>
    2be2:	8d 32       	cpi	r24, 0x2D	; 45
    2be4:	61 f0       	breq	.+24     	; 0x2bfe <vfprintf+0x98>
    2be6:	80 33       	cpi	r24, 0x30	; 48
    2be8:	69 f4       	brne	.+26     	; 0x2c04 <vfprintf+0x9e>
    2bea:	29 2d       	mov	r18, r9
    2bec:	21 60       	ori	r18, 0x01	; 1
    2bee:	2d c0       	rjmp	.+90     	; 0x2c4a <vfprintf+0xe4>
    2bf0:	39 2d       	mov	r19, r9
    2bf2:	32 60       	ori	r19, 0x02	; 2
    2bf4:	93 2e       	mov	r9, r19
    2bf6:	89 2d       	mov	r24, r9
    2bf8:	84 60       	ori	r24, 0x04	; 4
    2bfa:	98 2e       	mov	r9, r24
    2bfc:	2a c0       	rjmp	.+84     	; 0x2c52 <vfprintf+0xec>
    2bfe:	e9 2d       	mov	r30, r9
    2c00:	e8 60       	ori	r30, 0x08	; 8
    2c02:	15 c0       	rjmp	.+42     	; 0x2c2e <vfprintf+0xc8>
    2c04:	97 fc       	sbrc	r9, 7
    2c06:	2d c0       	rjmp	.+90     	; 0x2c62 <vfprintf+0xfc>
    2c08:	20 ed       	ldi	r18, 0xD0	; 208
    2c0a:	28 0f       	add	r18, r24
    2c0c:	2a 30       	cpi	r18, 0x0A	; 10
    2c0e:	88 f4       	brcc	.+34     	; 0x2c32 <vfprintf+0xcc>
    2c10:	96 fe       	sbrs	r9, 6
    2c12:	06 c0       	rjmp	.+12     	; 0x2c20 <vfprintf+0xba>
    2c14:	3a e0       	ldi	r19, 0x0A	; 10
    2c16:	13 9f       	mul	r17, r19
    2c18:	20 0d       	add	r18, r0
    2c1a:	11 24       	eor	r1, r1
    2c1c:	12 2f       	mov	r17, r18
    2c1e:	19 c0       	rjmp	.+50     	; 0x2c52 <vfprintf+0xec>
    2c20:	8a e0       	ldi	r24, 0x0A	; 10
    2c22:	58 9e       	mul	r5, r24
    2c24:	20 0d       	add	r18, r0
    2c26:	11 24       	eor	r1, r1
    2c28:	52 2e       	mov	r5, r18
    2c2a:	e9 2d       	mov	r30, r9
    2c2c:	e0 62       	ori	r30, 0x20	; 32
    2c2e:	9e 2e       	mov	r9, r30
    2c30:	10 c0       	rjmp	.+32     	; 0x2c52 <vfprintf+0xec>
    2c32:	8e 32       	cpi	r24, 0x2E	; 46
    2c34:	31 f4       	brne	.+12     	; 0x2c42 <vfprintf+0xdc>
    2c36:	96 fc       	sbrc	r9, 6
    2c38:	e5 c2       	rjmp	.+1482   	; 0x3204 <vfprintf+0x69e>
    2c3a:	f9 2d       	mov	r31, r9
    2c3c:	f0 64       	ori	r31, 0x40	; 64
    2c3e:	9f 2e       	mov	r9, r31
    2c40:	08 c0       	rjmp	.+16     	; 0x2c52 <vfprintf+0xec>
    2c42:	8c 36       	cpi	r24, 0x6C	; 108
    2c44:	21 f4       	brne	.+8      	; 0x2c4e <vfprintf+0xe8>
    2c46:	29 2d       	mov	r18, r9
    2c48:	20 68       	ori	r18, 0x80	; 128
    2c4a:	92 2e       	mov	r9, r18
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <vfprintf+0xec>
    2c4e:	88 36       	cpi	r24, 0x68	; 104
    2c50:	41 f4       	brne	.+16     	; 0x2c62 <vfprintf+0xfc>
    2c52:	f1 01       	movw	r30, r2
    2c54:	93 fd       	sbrc	r25, 3
    2c56:	85 91       	lpm	r24, Z+
    2c58:	93 ff       	sbrs	r25, 3
    2c5a:	81 91       	ld	r24, Z+
    2c5c:	1f 01       	movw	r2, r30
    2c5e:	81 11       	cpse	r24, r1
    2c60:	b3 cf       	rjmp	.-154    	; 0x2bc8 <vfprintf+0x62>
    2c62:	9b eb       	ldi	r25, 0xBB	; 187
    2c64:	98 0f       	add	r25, r24
    2c66:	93 30       	cpi	r25, 0x03	; 3
    2c68:	20 f4       	brcc	.+8      	; 0x2c72 <vfprintf+0x10c>
    2c6a:	99 2d       	mov	r25, r9
    2c6c:	90 61       	ori	r25, 0x10	; 16
    2c6e:	80 5e       	subi	r24, 0xE0	; 224
    2c70:	07 c0       	rjmp	.+14     	; 0x2c80 <vfprintf+0x11a>
    2c72:	9b e9       	ldi	r25, 0x9B	; 155
    2c74:	98 0f       	add	r25, r24
    2c76:	93 30       	cpi	r25, 0x03	; 3
    2c78:	08 f0       	brcs	.+2      	; 0x2c7c <vfprintf+0x116>
    2c7a:	66 c1       	rjmp	.+716    	; 0x2f48 <vfprintf+0x3e2>
    2c7c:	99 2d       	mov	r25, r9
    2c7e:	9f 7e       	andi	r25, 0xEF	; 239
    2c80:	96 ff       	sbrs	r25, 6
    2c82:	16 e0       	ldi	r17, 0x06	; 6
    2c84:	9f 73       	andi	r25, 0x3F	; 63
    2c86:	99 2e       	mov	r9, r25
    2c88:	85 36       	cpi	r24, 0x65	; 101
    2c8a:	19 f4       	brne	.+6      	; 0x2c92 <vfprintf+0x12c>
    2c8c:	90 64       	ori	r25, 0x40	; 64
    2c8e:	99 2e       	mov	r9, r25
    2c90:	08 c0       	rjmp	.+16     	; 0x2ca2 <vfprintf+0x13c>
    2c92:	86 36       	cpi	r24, 0x66	; 102
    2c94:	21 f4       	brne	.+8      	; 0x2c9e <vfprintf+0x138>
    2c96:	39 2f       	mov	r19, r25
    2c98:	30 68       	ori	r19, 0x80	; 128
    2c9a:	93 2e       	mov	r9, r19
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <vfprintf+0x13c>
    2c9e:	11 11       	cpse	r17, r1
    2ca0:	11 50       	subi	r17, 0x01	; 1
    2ca2:	97 fe       	sbrs	r9, 7
    2ca4:	07 c0       	rjmp	.+14     	; 0x2cb4 <vfprintf+0x14e>
    2ca6:	1c 33       	cpi	r17, 0x3C	; 60
    2ca8:	50 f4       	brcc	.+20     	; 0x2cbe <vfprintf+0x158>
    2caa:	44 24       	eor	r4, r4
    2cac:	43 94       	inc	r4
    2cae:	41 0e       	add	r4, r17
    2cb0:	27 e0       	ldi	r18, 0x07	; 7
    2cb2:	0b c0       	rjmp	.+22     	; 0x2cca <vfprintf+0x164>
    2cb4:	18 30       	cpi	r17, 0x08	; 8
    2cb6:	38 f0       	brcs	.+14     	; 0x2cc6 <vfprintf+0x160>
    2cb8:	27 e0       	ldi	r18, 0x07	; 7
    2cba:	17 e0       	ldi	r17, 0x07	; 7
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <vfprintf+0x162>
    2cbe:	27 e0       	ldi	r18, 0x07	; 7
    2cc0:	9c e3       	ldi	r25, 0x3C	; 60
    2cc2:	49 2e       	mov	r4, r25
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <vfprintf+0x164>
    2cc6:	21 2f       	mov	r18, r17
    2cc8:	41 2c       	mov	r4, r1
    2cca:	56 01       	movw	r10, r12
    2ccc:	84 e0       	ldi	r24, 0x04	; 4
    2cce:	a8 0e       	add	r10, r24
    2cd0:	b1 1c       	adc	r11, r1
    2cd2:	f6 01       	movw	r30, r12
    2cd4:	60 81       	ld	r22, Z
    2cd6:	71 81       	ldd	r23, Z+1	; 0x01
    2cd8:	82 81       	ldd	r24, Z+2	; 0x02
    2cda:	93 81       	ldd	r25, Z+3	; 0x03
    2cdc:	04 2d       	mov	r16, r4
    2cde:	a3 01       	movw	r20, r6
    2ce0:	0e 94 87 19 	call	0x330e	; 0x330e <__ftoa_engine>
    2ce4:	6c 01       	movw	r12, r24
    2ce6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ce8:	fc 87       	std	Y+12, r31	; 0x0c
    2cea:	f0 ff       	sbrs	r31, 0
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <vfprintf+0x18c>
    2cee:	f3 ff       	sbrs	r31, 3
    2cf0:	06 c0       	rjmp	.+12     	; 0x2cfe <vfprintf+0x198>
    2cf2:	91 fc       	sbrc	r9, 1
    2cf4:	06 c0       	rjmp	.+12     	; 0x2d02 <vfprintf+0x19c>
    2cf6:	92 fe       	sbrs	r9, 2
    2cf8:	06 c0       	rjmp	.+12     	; 0x2d06 <vfprintf+0x1a0>
    2cfa:	00 e2       	ldi	r16, 0x20	; 32
    2cfc:	05 c0       	rjmp	.+10     	; 0x2d08 <vfprintf+0x1a2>
    2cfe:	0d e2       	ldi	r16, 0x2D	; 45
    2d00:	03 c0       	rjmp	.+6      	; 0x2d08 <vfprintf+0x1a2>
    2d02:	0b e2       	ldi	r16, 0x2B	; 43
    2d04:	01 c0       	rjmp	.+2      	; 0x2d08 <vfprintf+0x1a2>
    2d06:	00 e0       	ldi	r16, 0x00	; 0
    2d08:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d0a:	8c 70       	andi	r24, 0x0C	; 12
    2d0c:	19 f0       	breq	.+6      	; 0x2d14 <vfprintf+0x1ae>
    2d0e:	01 11       	cpse	r16, r1
    2d10:	5a c2       	rjmp	.+1204   	; 0x31c6 <vfprintf+0x660>
    2d12:	9b c2       	rjmp	.+1334   	; 0x324a <vfprintf+0x6e4>
    2d14:	97 fe       	sbrs	r9, 7
    2d16:	10 c0       	rjmp	.+32     	; 0x2d38 <vfprintf+0x1d2>
    2d18:	4c 0c       	add	r4, r12
    2d1a:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d1c:	f4 ff       	sbrs	r31, 4
    2d1e:	04 c0       	rjmp	.+8      	; 0x2d28 <vfprintf+0x1c2>
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	81 33       	cpi	r24, 0x31	; 49
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <vfprintf+0x1c2>
    2d26:	4a 94       	dec	r4
    2d28:	14 14       	cp	r1, r4
    2d2a:	74 f5       	brge	.+92     	; 0x2d88 <vfprintf+0x222>
    2d2c:	28 e0       	ldi	r18, 0x08	; 8
    2d2e:	24 15       	cp	r18, r4
    2d30:	78 f5       	brcc	.+94     	; 0x2d90 <vfprintf+0x22a>
    2d32:	88 e0       	ldi	r24, 0x08	; 8
    2d34:	48 2e       	mov	r4, r24
    2d36:	2c c0       	rjmp	.+88     	; 0x2d90 <vfprintf+0x22a>
    2d38:	96 fc       	sbrc	r9, 6
    2d3a:	2a c0       	rjmp	.+84     	; 0x2d90 <vfprintf+0x22a>
    2d3c:	81 2f       	mov	r24, r17
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	8c 15       	cp	r24, r12
    2d42:	9d 05       	cpc	r25, r13
    2d44:	9c f0       	brlt	.+38     	; 0x2d6c <vfprintf+0x206>
    2d46:	3c ef       	ldi	r19, 0xFC	; 252
    2d48:	c3 16       	cp	r12, r19
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	d3 06       	cpc	r13, r19
    2d4e:	74 f0       	brlt	.+28     	; 0x2d6c <vfprintf+0x206>
    2d50:	89 2d       	mov	r24, r9
    2d52:	80 68       	ori	r24, 0x80	; 128
    2d54:	98 2e       	mov	r9, r24
    2d56:	0a c0       	rjmp	.+20     	; 0x2d6c <vfprintf+0x206>
    2d58:	e2 e0       	ldi	r30, 0x02	; 2
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	ec 0f       	add	r30, r28
    2d5e:	fd 1f       	adc	r31, r29
    2d60:	e1 0f       	add	r30, r17
    2d62:	f1 1d       	adc	r31, r1
    2d64:	80 81       	ld	r24, Z
    2d66:	80 33       	cpi	r24, 0x30	; 48
    2d68:	19 f4       	brne	.+6      	; 0x2d70 <vfprintf+0x20a>
    2d6a:	11 50       	subi	r17, 0x01	; 1
    2d6c:	11 11       	cpse	r17, r1
    2d6e:	f4 cf       	rjmp	.-24     	; 0x2d58 <vfprintf+0x1f2>
    2d70:	97 fe       	sbrs	r9, 7
    2d72:	0e c0       	rjmp	.+28     	; 0x2d90 <vfprintf+0x22a>
    2d74:	44 24       	eor	r4, r4
    2d76:	43 94       	inc	r4
    2d78:	41 0e       	add	r4, r17
    2d7a:	81 2f       	mov	r24, r17
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	c8 16       	cp	r12, r24
    2d80:	d9 06       	cpc	r13, r25
    2d82:	2c f4       	brge	.+10     	; 0x2d8e <vfprintf+0x228>
    2d84:	1c 19       	sub	r17, r12
    2d86:	04 c0       	rjmp	.+8      	; 0x2d90 <vfprintf+0x22a>
    2d88:	44 24       	eor	r4, r4
    2d8a:	43 94       	inc	r4
    2d8c:	01 c0       	rjmp	.+2      	; 0x2d90 <vfprintf+0x22a>
    2d8e:	10 e0       	ldi	r17, 0x00	; 0
    2d90:	97 fe       	sbrs	r9, 7
    2d92:	06 c0       	rjmp	.+12     	; 0x2da0 <vfprintf+0x23a>
    2d94:	1c 14       	cp	r1, r12
    2d96:	1d 04       	cpc	r1, r13
    2d98:	34 f4       	brge	.+12     	; 0x2da6 <vfprintf+0x240>
    2d9a:	c6 01       	movw	r24, r12
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	05 c0       	rjmp	.+10     	; 0x2daa <vfprintf+0x244>
    2da0:	85 e0       	ldi	r24, 0x05	; 5
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <vfprintf+0x244>
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	01 11       	cpse	r16, r1
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	11 23       	and	r17, r17
    2db0:	31 f0       	breq	.+12     	; 0x2dbe <vfprintf+0x258>
    2db2:	21 2f       	mov	r18, r17
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	2f 5f       	subi	r18, 0xFF	; 255
    2db8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dba:	82 0f       	add	r24, r18
    2dbc:	93 1f       	adc	r25, r19
    2dbe:	25 2d       	mov	r18, r5
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	82 17       	cp	r24, r18
    2dc4:	93 07       	cpc	r25, r19
    2dc6:	14 f4       	brge	.+4      	; 0x2dcc <vfprintf+0x266>
    2dc8:	58 1a       	sub	r5, r24
    2dca:	01 c0       	rjmp	.+2      	; 0x2dce <vfprintf+0x268>
    2dcc:	51 2c       	mov	r5, r1
    2dce:	89 2d       	mov	r24, r9
    2dd0:	89 70       	andi	r24, 0x09	; 9
    2dd2:	49 f4       	brne	.+18     	; 0x2de6 <vfprintf+0x280>
    2dd4:	55 20       	and	r5, r5
    2dd6:	39 f0       	breq	.+14     	; 0x2de6 <vfprintf+0x280>
    2dd8:	b7 01       	movw	r22, r14
    2dda:	80 e2       	ldi	r24, 0x20	; 32
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2de2:	5a 94       	dec	r5
    2de4:	f7 cf       	rjmp	.-18     	; 0x2dd4 <vfprintf+0x26e>
    2de6:	00 23       	and	r16, r16
    2de8:	29 f0       	breq	.+10     	; 0x2df4 <vfprintf+0x28e>
    2dea:	b7 01       	movw	r22, r14
    2dec:	80 2f       	mov	r24, r16
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2df4:	93 fc       	sbrc	r9, 3
    2df6:	09 c0       	rjmp	.+18     	; 0x2e0a <vfprintf+0x2a4>
    2df8:	55 20       	and	r5, r5
    2dfa:	39 f0       	breq	.+14     	; 0x2e0a <vfprintf+0x2a4>
    2dfc:	b7 01       	movw	r22, r14
    2dfe:	80 e3       	ldi	r24, 0x30	; 48
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2e06:	5a 94       	dec	r5
    2e08:	f7 cf       	rjmp	.-18     	; 0x2df8 <vfprintf+0x292>
    2e0a:	97 fe       	sbrs	r9, 7
    2e0c:	4c c0       	rjmp	.+152    	; 0x2ea6 <vfprintf+0x340>
    2e0e:	46 01       	movw	r8, r12
    2e10:	d7 fe       	sbrs	r13, 7
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <vfprintf+0x2b2>
    2e14:	81 2c       	mov	r8, r1
    2e16:	91 2c       	mov	r9, r1
    2e18:	c6 01       	movw	r24, r12
    2e1a:	88 19       	sub	r24, r8
    2e1c:	99 09       	sbc	r25, r9
    2e1e:	f3 01       	movw	r30, r6
    2e20:	e8 0f       	add	r30, r24
    2e22:	f9 1f       	adc	r31, r25
    2e24:	ed 87       	std	Y+13, r30	; 0x0d
    2e26:	fe 87       	std	Y+14, r31	; 0x0e
    2e28:	96 01       	movw	r18, r12
    2e2a:	24 19       	sub	r18, r4
    2e2c:	31 09       	sbc	r19, r1
    2e2e:	2f 87       	std	Y+15, r18	; 0x0f
    2e30:	38 8b       	std	Y+16, r19	; 0x10
    2e32:	01 2f       	mov	r16, r17
    2e34:	10 e0       	ldi	r17, 0x00	; 0
    2e36:	11 95       	neg	r17
    2e38:	01 95       	neg	r16
    2e3a:	11 09       	sbc	r17, r1
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
    2e3e:	83 16       	cp	r8, r19
    2e40:	93 06       	cpc	r9, r19
    2e42:	29 f4       	brne	.+10     	; 0x2e4e <vfprintf+0x2e8>
    2e44:	b7 01       	movw	r22, r14
    2e46:	8e e2       	ldi	r24, 0x2E	; 46
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2e4e:	c8 14       	cp	r12, r8
    2e50:	d9 04       	cpc	r13, r9
    2e52:	4c f0       	brlt	.+18     	; 0x2e66 <vfprintf+0x300>
    2e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e56:	98 89       	ldd	r25, Y+16	; 0x10
    2e58:	88 15       	cp	r24, r8
    2e5a:	99 05       	cpc	r25, r9
    2e5c:	24 f4       	brge	.+8      	; 0x2e66 <vfprintf+0x300>
    2e5e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e60:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e62:	81 81       	ldd	r24, Z+1	; 0x01
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <vfprintf+0x302>
    2e66:	80 e3       	ldi	r24, 0x30	; 48
    2e68:	f1 e0       	ldi	r31, 0x01	; 1
    2e6a:	8f 1a       	sub	r8, r31
    2e6c:	91 08       	sbc	r9, r1
    2e6e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e70:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e72:	2f 5f       	subi	r18, 0xFF	; 255
    2e74:	3f 4f       	sbci	r19, 0xFF	; 255
    2e76:	2d 87       	std	Y+13, r18	; 0x0d
    2e78:	3e 87       	std	Y+14, r19	; 0x0e
    2e7a:	80 16       	cp	r8, r16
    2e7c:	91 06       	cpc	r9, r17
    2e7e:	2c f0       	brlt	.+10     	; 0x2e8a <vfprintf+0x324>
    2e80:	b7 01       	movw	r22, r14
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2e88:	d9 cf       	rjmp	.-78     	; 0x2e3c <vfprintf+0x2d6>
    2e8a:	c8 14       	cp	r12, r8
    2e8c:	d9 04       	cpc	r13, r9
    2e8e:	41 f4       	brne	.+16     	; 0x2ea0 <vfprintf+0x33a>
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	96 33       	cpi	r25, 0x36	; 54
    2e94:	20 f4       	brcc	.+8      	; 0x2e9e <vfprintf+0x338>
    2e96:	95 33       	cpi	r25, 0x35	; 53
    2e98:	19 f4       	brne	.+6      	; 0x2ea0 <vfprintf+0x33a>
    2e9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e9c:	34 ff       	sbrs	r19, 4
    2e9e:	81 e3       	ldi	r24, 0x31	; 49
    2ea0:	b7 01       	movw	r22, r14
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	4e c0       	rjmp	.+156    	; 0x2f42 <vfprintf+0x3dc>
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	81 33       	cpi	r24, 0x31	; 49
    2eaa:	19 f0       	breq	.+6      	; 0x2eb2 <vfprintf+0x34c>
    2eac:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eae:	9f 7e       	andi	r25, 0xEF	; 239
    2eb0:	9c 87       	std	Y+12, r25	; 0x0c
    2eb2:	b7 01       	movw	r22, r14
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2eba:	11 11       	cpse	r17, r1
    2ebc:	05 c0       	rjmp	.+10     	; 0x2ec8 <vfprintf+0x362>
    2ebe:	94 fc       	sbrc	r9, 4
    2ec0:	18 c0       	rjmp	.+48     	; 0x2ef2 <vfprintf+0x38c>
    2ec2:	85 e6       	ldi	r24, 0x65	; 101
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	17 c0       	rjmp	.+46     	; 0x2ef6 <vfprintf+0x390>
    2ec8:	b7 01       	movw	r22, r14
    2eca:	8e e2       	ldi	r24, 0x2E	; 46
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2ed2:	1e 5f       	subi	r17, 0xFE	; 254
    2ed4:	82 e0       	ldi	r24, 0x02	; 2
    2ed6:	01 e0       	ldi	r16, 0x01	; 1
    2ed8:	08 0f       	add	r16, r24
    2eda:	f3 01       	movw	r30, r6
    2edc:	e8 0f       	add	r30, r24
    2ede:	f1 1d       	adc	r31, r1
    2ee0:	80 81       	ld	r24, Z
    2ee2:	b7 01       	movw	r22, r14
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2eea:	80 2f       	mov	r24, r16
    2eec:	01 13       	cpse	r16, r17
    2eee:	f3 cf       	rjmp	.-26     	; 0x2ed6 <vfprintf+0x370>
    2ef0:	e6 cf       	rjmp	.-52     	; 0x2ebe <vfprintf+0x358>
    2ef2:	85 e4       	ldi	r24, 0x45	; 69
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	b7 01       	movw	r22, r14
    2ef8:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2efc:	d7 fc       	sbrc	r13, 7
    2efe:	06 c0       	rjmp	.+12     	; 0x2f0c <vfprintf+0x3a6>
    2f00:	c1 14       	cp	r12, r1
    2f02:	d1 04       	cpc	r13, r1
    2f04:	41 f4       	brne	.+16     	; 0x2f16 <vfprintf+0x3b0>
    2f06:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f08:	e4 ff       	sbrs	r30, 4
    2f0a:	05 c0       	rjmp	.+10     	; 0x2f16 <vfprintf+0x3b0>
    2f0c:	d1 94       	neg	r13
    2f0e:	c1 94       	neg	r12
    2f10:	d1 08       	sbc	r13, r1
    2f12:	8d e2       	ldi	r24, 0x2D	; 45
    2f14:	01 c0       	rjmp	.+2      	; 0x2f18 <vfprintf+0x3b2>
    2f16:	8b e2       	ldi	r24, 0x2B	; 43
    2f18:	b7 01       	movw	r22, r14
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2f20:	80 e3       	ldi	r24, 0x30	; 48
    2f22:	2a e0       	ldi	r18, 0x0A	; 10
    2f24:	c2 16       	cp	r12, r18
    2f26:	d1 04       	cpc	r13, r1
    2f28:	2c f0       	brlt	.+10     	; 0x2f34 <vfprintf+0x3ce>
    2f2a:	8f 5f       	subi	r24, 0xFF	; 255
    2f2c:	fa e0       	ldi	r31, 0x0A	; 10
    2f2e:	cf 1a       	sub	r12, r31
    2f30:	d1 08       	sbc	r13, r1
    2f32:	f7 cf       	rjmp	.-18     	; 0x2f22 <vfprintf+0x3bc>
    2f34:	b7 01       	movw	r22, r14
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2f3c:	b7 01       	movw	r22, r14
    2f3e:	c6 01       	movw	r24, r12
    2f40:	c0 96       	adiw	r24, 0x30	; 48
    2f42:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2f46:	54 c1       	rjmp	.+680    	; 0x31f0 <vfprintf+0x68a>
    2f48:	83 36       	cpi	r24, 0x63	; 99
    2f4a:	31 f0       	breq	.+12     	; 0x2f58 <vfprintf+0x3f2>
    2f4c:	83 37       	cpi	r24, 0x73	; 115
    2f4e:	79 f0       	breq	.+30     	; 0x2f6e <vfprintf+0x408>
    2f50:	83 35       	cpi	r24, 0x53	; 83
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <vfprintf+0x3f0>
    2f54:	56 c0       	rjmp	.+172    	; 0x3002 <vfprintf+0x49c>
    2f56:	20 c0       	rjmp	.+64     	; 0x2f98 <vfprintf+0x432>
    2f58:	56 01       	movw	r10, r12
    2f5a:	32 e0       	ldi	r19, 0x02	; 2
    2f5c:	a3 0e       	add	r10, r19
    2f5e:	b1 1c       	adc	r11, r1
    2f60:	f6 01       	movw	r30, r12
    2f62:	80 81       	ld	r24, Z
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	01 e0       	ldi	r16, 0x01	; 1
    2f68:	10 e0       	ldi	r17, 0x00	; 0
    2f6a:	63 01       	movw	r12, r6
    2f6c:	12 c0       	rjmp	.+36     	; 0x2f92 <vfprintf+0x42c>
    2f6e:	56 01       	movw	r10, r12
    2f70:	f2 e0       	ldi	r31, 0x02	; 2
    2f72:	af 0e       	add	r10, r31
    2f74:	b1 1c       	adc	r11, r1
    2f76:	f6 01       	movw	r30, r12
    2f78:	c0 80       	ld	r12, Z
    2f7a:	d1 80       	ldd	r13, Z+1	; 0x01
    2f7c:	96 fe       	sbrs	r9, 6
    2f7e:	03 c0       	rjmp	.+6      	; 0x2f86 <vfprintf+0x420>
    2f80:	61 2f       	mov	r22, r17
    2f82:	70 e0       	ldi	r23, 0x00	; 0
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <vfprintf+0x424>
    2f86:	6f ef       	ldi	r22, 0xFF	; 255
    2f88:	7f ef       	ldi	r23, 0xFF	; 255
    2f8a:	c6 01       	movw	r24, r12
    2f8c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strnlen>
    2f90:	8c 01       	movw	r16, r24
    2f92:	f9 2d       	mov	r31, r9
    2f94:	ff 77       	andi	r31, 0x7F	; 127
    2f96:	14 c0       	rjmp	.+40     	; 0x2fc0 <vfprintf+0x45a>
    2f98:	56 01       	movw	r10, r12
    2f9a:	22 e0       	ldi	r18, 0x02	; 2
    2f9c:	a2 0e       	add	r10, r18
    2f9e:	b1 1c       	adc	r11, r1
    2fa0:	f6 01       	movw	r30, r12
    2fa2:	c0 80       	ld	r12, Z
    2fa4:	d1 80       	ldd	r13, Z+1	; 0x01
    2fa6:	96 fe       	sbrs	r9, 6
    2fa8:	03 c0       	rjmp	.+6      	; 0x2fb0 <vfprintf+0x44a>
    2faa:	61 2f       	mov	r22, r17
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <vfprintf+0x44e>
    2fb0:	6f ef       	ldi	r22, 0xFF	; 255
    2fb2:	7f ef       	ldi	r23, 0xFF	; 255
    2fb4:	c6 01       	movw	r24, r12
    2fb6:	0e 94 5f 1a 	call	0x34be	; 0x34be <strnlen_P>
    2fba:	8c 01       	movw	r16, r24
    2fbc:	f9 2d       	mov	r31, r9
    2fbe:	f0 68       	ori	r31, 0x80	; 128
    2fc0:	9f 2e       	mov	r9, r31
    2fc2:	f3 fd       	sbrc	r31, 3
    2fc4:	1a c0       	rjmp	.+52     	; 0x2ffa <vfprintf+0x494>
    2fc6:	85 2d       	mov	r24, r5
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	08 17       	cp	r16, r24
    2fcc:	19 07       	cpc	r17, r25
    2fce:	a8 f4       	brcc	.+42     	; 0x2ffa <vfprintf+0x494>
    2fd0:	b7 01       	movw	r22, r14
    2fd2:	80 e2       	ldi	r24, 0x20	; 32
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2fda:	5a 94       	dec	r5
    2fdc:	f4 cf       	rjmp	.-24     	; 0x2fc6 <vfprintf+0x460>
    2fde:	f6 01       	movw	r30, r12
    2fe0:	97 fc       	sbrc	r9, 7
    2fe2:	85 91       	lpm	r24, Z+
    2fe4:	97 fe       	sbrs	r9, 7
    2fe6:	81 91       	ld	r24, Z+
    2fe8:	6f 01       	movw	r12, r30
    2fea:	b7 01       	movw	r22, r14
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    2ff2:	51 10       	cpse	r5, r1
    2ff4:	5a 94       	dec	r5
    2ff6:	01 50       	subi	r16, 0x01	; 1
    2ff8:	11 09       	sbc	r17, r1
    2ffa:	01 15       	cp	r16, r1
    2ffc:	11 05       	cpc	r17, r1
    2ffe:	79 f7       	brne	.-34     	; 0x2fde <vfprintf+0x478>
    3000:	f7 c0       	rjmp	.+494    	; 0x31f0 <vfprintf+0x68a>
    3002:	84 36       	cpi	r24, 0x64	; 100
    3004:	11 f0       	breq	.+4      	; 0x300a <vfprintf+0x4a4>
    3006:	89 36       	cpi	r24, 0x69	; 105
    3008:	61 f5       	brne	.+88     	; 0x3062 <vfprintf+0x4fc>
    300a:	56 01       	movw	r10, r12
    300c:	97 fe       	sbrs	r9, 7
    300e:	09 c0       	rjmp	.+18     	; 0x3022 <vfprintf+0x4bc>
    3010:	24 e0       	ldi	r18, 0x04	; 4
    3012:	a2 0e       	add	r10, r18
    3014:	b1 1c       	adc	r11, r1
    3016:	f6 01       	movw	r30, r12
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	82 81       	ldd	r24, Z+2	; 0x02
    301e:	93 81       	ldd	r25, Z+3	; 0x03
    3020:	0a c0       	rjmp	.+20     	; 0x3036 <vfprintf+0x4d0>
    3022:	f2 e0       	ldi	r31, 0x02	; 2
    3024:	af 0e       	add	r10, r31
    3026:	b1 1c       	adc	r11, r1
    3028:	f6 01       	movw	r30, r12
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	07 2e       	mov	r0, r23
    3030:	00 0c       	add	r0, r0
    3032:	88 0b       	sbc	r24, r24
    3034:	99 0b       	sbc	r25, r25
    3036:	f9 2d       	mov	r31, r9
    3038:	ff 76       	andi	r31, 0x6F	; 111
    303a:	9f 2e       	mov	r9, r31
    303c:	97 ff       	sbrs	r25, 7
    303e:	09 c0       	rjmp	.+18     	; 0x3052 <vfprintf+0x4ec>
    3040:	90 95       	com	r25
    3042:	80 95       	com	r24
    3044:	70 95       	com	r23
    3046:	61 95       	neg	r22
    3048:	7f 4f       	sbci	r23, 0xFF	; 255
    304a:	8f 4f       	sbci	r24, 0xFF	; 255
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	f0 68       	ori	r31, 0x80	; 128
    3050:	9f 2e       	mov	r9, r31
    3052:	2a e0       	ldi	r18, 0x0A	; 10
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	a3 01       	movw	r20, r6
    3058:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__ultoa_invert>
    305c:	c8 2e       	mov	r12, r24
    305e:	c6 18       	sub	r12, r6
    3060:	3f c0       	rjmp	.+126    	; 0x30e0 <vfprintf+0x57a>
    3062:	09 2d       	mov	r16, r9
    3064:	85 37       	cpi	r24, 0x75	; 117
    3066:	21 f4       	brne	.+8      	; 0x3070 <vfprintf+0x50a>
    3068:	0f 7e       	andi	r16, 0xEF	; 239
    306a:	2a e0       	ldi	r18, 0x0A	; 10
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	1d c0       	rjmp	.+58     	; 0x30aa <vfprintf+0x544>
    3070:	09 7f       	andi	r16, 0xF9	; 249
    3072:	8f 36       	cpi	r24, 0x6F	; 111
    3074:	91 f0       	breq	.+36     	; 0x309a <vfprintf+0x534>
    3076:	18 f4       	brcc	.+6      	; 0x307e <vfprintf+0x518>
    3078:	88 35       	cpi	r24, 0x58	; 88
    307a:	59 f0       	breq	.+22     	; 0x3092 <vfprintf+0x52c>
    307c:	c3 c0       	rjmp	.+390    	; 0x3204 <vfprintf+0x69e>
    307e:	80 37       	cpi	r24, 0x70	; 112
    3080:	19 f0       	breq	.+6      	; 0x3088 <vfprintf+0x522>
    3082:	88 37       	cpi	r24, 0x78	; 120
    3084:	11 f0       	breq	.+4      	; 0x308a <vfprintf+0x524>
    3086:	be c0       	rjmp	.+380    	; 0x3204 <vfprintf+0x69e>
    3088:	00 61       	ori	r16, 0x10	; 16
    308a:	04 ff       	sbrs	r16, 4
    308c:	09 c0       	rjmp	.+18     	; 0x30a0 <vfprintf+0x53a>
    308e:	04 60       	ori	r16, 0x04	; 4
    3090:	07 c0       	rjmp	.+14     	; 0x30a0 <vfprintf+0x53a>
    3092:	94 fe       	sbrs	r9, 4
    3094:	08 c0       	rjmp	.+16     	; 0x30a6 <vfprintf+0x540>
    3096:	06 60       	ori	r16, 0x06	; 6
    3098:	06 c0       	rjmp	.+12     	; 0x30a6 <vfprintf+0x540>
    309a:	28 e0       	ldi	r18, 0x08	; 8
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <vfprintf+0x544>
    30a0:	20 e1       	ldi	r18, 0x10	; 16
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <vfprintf+0x544>
    30a6:	20 e1       	ldi	r18, 0x10	; 16
    30a8:	32 e0       	ldi	r19, 0x02	; 2
    30aa:	56 01       	movw	r10, r12
    30ac:	07 ff       	sbrs	r16, 7
    30ae:	09 c0       	rjmp	.+18     	; 0x30c2 <vfprintf+0x55c>
    30b0:	84 e0       	ldi	r24, 0x04	; 4
    30b2:	a8 0e       	add	r10, r24
    30b4:	b1 1c       	adc	r11, r1
    30b6:	f6 01       	movw	r30, r12
    30b8:	60 81       	ld	r22, Z
    30ba:	71 81       	ldd	r23, Z+1	; 0x01
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	93 81       	ldd	r25, Z+3	; 0x03
    30c0:	08 c0       	rjmp	.+16     	; 0x30d2 <vfprintf+0x56c>
    30c2:	f2 e0       	ldi	r31, 0x02	; 2
    30c4:	af 0e       	add	r10, r31
    30c6:	b1 1c       	adc	r11, r1
    30c8:	f6 01       	movw	r30, r12
    30ca:	60 81       	ld	r22, Z
    30cc:	71 81       	ldd	r23, Z+1	; 0x01
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a3 01       	movw	r20, r6
    30d4:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__ultoa_invert>
    30d8:	c8 2e       	mov	r12, r24
    30da:	c6 18       	sub	r12, r6
    30dc:	0f 77       	andi	r16, 0x7F	; 127
    30de:	90 2e       	mov	r9, r16
    30e0:	96 fe       	sbrs	r9, 6
    30e2:	0b c0       	rjmp	.+22     	; 0x30fa <vfprintf+0x594>
    30e4:	09 2d       	mov	r16, r9
    30e6:	0e 7f       	andi	r16, 0xFE	; 254
    30e8:	c1 16       	cp	r12, r17
    30ea:	50 f4       	brcc	.+20     	; 0x3100 <vfprintf+0x59a>
    30ec:	94 fe       	sbrs	r9, 4
    30ee:	0a c0       	rjmp	.+20     	; 0x3104 <vfprintf+0x59e>
    30f0:	92 fc       	sbrc	r9, 2
    30f2:	08 c0       	rjmp	.+16     	; 0x3104 <vfprintf+0x59e>
    30f4:	09 2d       	mov	r16, r9
    30f6:	0e 7e       	andi	r16, 0xEE	; 238
    30f8:	05 c0       	rjmp	.+10     	; 0x3104 <vfprintf+0x59e>
    30fa:	dc 2c       	mov	r13, r12
    30fc:	09 2d       	mov	r16, r9
    30fe:	03 c0       	rjmp	.+6      	; 0x3106 <vfprintf+0x5a0>
    3100:	dc 2c       	mov	r13, r12
    3102:	01 c0       	rjmp	.+2      	; 0x3106 <vfprintf+0x5a0>
    3104:	d1 2e       	mov	r13, r17
    3106:	04 ff       	sbrs	r16, 4
    3108:	0d c0       	rjmp	.+26     	; 0x3124 <vfprintf+0x5be>
    310a:	fe 01       	movw	r30, r28
    310c:	ec 0d       	add	r30, r12
    310e:	f1 1d       	adc	r31, r1
    3110:	80 81       	ld	r24, Z
    3112:	80 33       	cpi	r24, 0x30	; 48
    3114:	11 f4       	brne	.+4      	; 0x311a <vfprintf+0x5b4>
    3116:	09 7e       	andi	r16, 0xE9	; 233
    3118:	09 c0       	rjmp	.+18     	; 0x312c <vfprintf+0x5c6>
    311a:	02 ff       	sbrs	r16, 2
    311c:	06 c0       	rjmp	.+12     	; 0x312a <vfprintf+0x5c4>
    311e:	d3 94       	inc	r13
    3120:	d3 94       	inc	r13
    3122:	04 c0       	rjmp	.+8      	; 0x312c <vfprintf+0x5c6>
    3124:	80 2f       	mov	r24, r16
    3126:	86 78       	andi	r24, 0x86	; 134
    3128:	09 f0       	breq	.+2      	; 0x312c <vfprintf+0x5c6>
    312a:	d3 94       	inc	r13
    312c:	03 fd       	sbrc	r16, 3
    312e:	11 c0       	rjmp	.+34     	; 0x3152 <vfprintf+0x5ec>
    3130:	00 ff       	sbrs	r16, 0
    3132:	06 c0       	rjmp	.+12     	; 0x3140 <vfprintf+0x5da>
    3134:	1c 2d       	mov	r17, r12
    3136:	d5 14       	cp	r13, r5
    3138:	80 f4       	brcc	.+32     	; 0x315a <vfprintf+0x5f4>
    313a:	15 0d       	add	r17, r5
    313c:	1d 19       	sub	r17, r13
    313e:	0d c0       	rjmp	.+26     	; 0x315a <vfprintf+0x5f4>
    3140:	d5 14       	cp	r13, r5
    3142:	58 f4       	brcc	.+22     	; 0x315a <vfprintf+0x5f4>
    3144:	b7 01       	movw	r22, r14
    3146:	80 e2       	ldi	r24, 0x20	; 32
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    314e:	d3 94       	inc	r13
    3150:	f7 cf       	rjmp	.-18     	; 0x3140 <vfprintf+0x5da>
    3152:	d5 14       	cp	r13, r5
    3154:	10 f4       	brcc	.+4      	; 0x315a <vfprintf+0x5f4>
    3156:	5d 18       	sub	r5, r13
    3158:	01 c0       	rjmp	.+2      	; 0x315c <vfprintf+0x5f6>
    315a:	51 2c       	mov	r5, r1
    315c:	04 ff       	sbrs	r16, 4
    315e:	10 c0       	rjmp	.+32     	; 0x3180 <vfprintf+0x61a>
    3160:	b7 01       	movw	r22, r14
    3162:	80 e3       	ldi	r24, 0x30	; 48
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    316a:	02 ff       	sbrs	r16, 2
    316c:	17 c0       	rjmp	.+46     	; 0x319c <vfprintf+0x636>
    316e:	01 fd       	sbrc	r16, 1
    3170:	03 c0       	rjmp	.+6      	; 0x3178 <vfprintf+0x612>
    3172:	88 e7       	ldi	r24, 0x78	; 120
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	02 c0       	rjmp	.+4      	; 0x317c <vfprintf+0x616>
    3178:	88 e5       	ldi	r24, 0x58	; 88
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	b7 01       	movw	r22, r14
    317e:	0c c0       	rjmp	.+24     	; 0x3198 <vfprintf+0x632>
    3180:	80 2f       	mov	r24, r16
    3182:	86 78       	andi	r24, 0x86	; 134
    3184:	59 f0       	breq	.+22     	; 0x319c <vfprintf+0x636>
    3186:	01 ff       	sbrs	r16, 1
    3188:	02 c0       	rjmp	.+4      	; 0x318e <vfprintf+0x628>
    318a:	8b e2       	ldi	r24, 0x2B	; 43
    318c:	01 c0       	rjmp	.+2      	; 0x3190 <vfprintf+0x62a>
    318e:	80 e2       	ldi	r24, 0x20	; 32
    3190:	07 fd       	sbrc	r16, 7
    3192:	8d e2       	ldi	r24, 0x2D	; 45
    3194:	b7 01       	movw	r22, r14
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    319c:	c1 16       	cp	r12, r17
    319e:	38 f4       	brcc	.+14     	; 0x31ae <vfprintf+0x648>
    31a0:	b7 01       	movw	r22, r14
    31a2:	80 e3       	ldi	r24, 0x30	; 48
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    31aa:	11 50       	subi	r17, 0x01	; 1
    31ac:	f7 cf       	rjmp	.-18     	; 0x319c <vfprintf+0x636>
    31ae:	ca 94       	dec	r12
    31b0:	f3 01       	movw	r30, r6
    31b2:	ec 0d       	add	r30, r12
    31b4:	f1 1d       	adc	r31, r1
    31b6:	80 81       	ld	r24, Z
    31b8:	b7 01       	movw	r22, r14
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    31c0:	c1 10       	cpse	r12, r1
    31c2:	f5 cf       	rjmp	.-22     	; 0x31ae <vfprintf+0x648>
    31c4:	15 c0       	rjmp	.+42     	; 0x31f0 <vfprintf+0x68a>
    31c6:	f4 e0       	ldi	r31, 0x04	; 4
    31c8:	f5 15       	cp	r31, r5
    31ca:	60 f5       	brcc	.+88     	; 0x3224 <vfprintf+0x6be>
    31cc:	84 e0       	ldi	r24, 0x04	; 4
    31ce:	58 1a       	sub	r5, r24
    31d0:	93 fe       	sbrs	r9, 3
    31d2:	1f c0       	rjmp	.+62     	; 0x3212 <vfprintf+0x6ac>
    31d4:	01 11       	cpse	r16, r1
    31d6:	27 c0       	rjmp	.+78     	; 0x3226 <vfprintf+0x6c0>
    31d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    31da:	23 ff       	sbrs	r18, 3
    31dc:	2a c0       	rjmp	.+84     	; 0x3232 <vfprintf+0x6cc>
    31de:	0c e7       	ldi	r16, 0x7C	; 124
    31e0:	10 e0       	ldi	r17, 0x00	; 0
    31e2:	39 2d       	mov	r19, r9
    31e4:	30 71       	andi	r19, 0x10	; 16
    31e6:	93 2e       	mov	r9, r19
    31e8:	f8 01       	movw	r30, r16
    31ea:	84 91       	lpm	r24, Z
    31ec:	81 11       	cpse	r24, r1
    31ee:	24 c0       	rjmp	.+72     	; 0x3238 <vfprintf+0x6d2>
    31f0:	55 20       	and	r5, r5
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <vfprintf+0x690>
    31f4:	e4 cc       	rjmp	.-1592   	; 0x2bbe <vfprintf+0x58>
    31f6:	b7 01       	movw	r22, r14
    31f8:	80 e2       	ldi	r24, 0x20	; 32
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    3200:	5a 94       	dec	r5
    3202:	f6 cf       	rjmp	.-20     	; 0x31f0 <vfprintf+0x68a>
    3204:	f7 01       	movw	r30, r14
    3206:	86 81       	ldd	r24, Z+6	; 0x06
    3208:	97 81       	ldd	r25, Z+7	; 0x07
    320a:	26 c0       	rjmp	.+76     	; 0x3258 <vfprintf+0x6f2>
    320c:	8f ef       	ldi	r24, 0xFF	; 255
    320e:	9f ef       	ldi	r25, 0xFF	; 255
    3210:	23 c0       	rjmp	.+70     	; 0x3258 <vfprintf+0x6f2>
    3212:	b7 01       	movw	r22, r14
    3214:	80 e2       	ldi	r24, 0x20	; 32
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    321c:	5a 94       	dec	r5
    321e:	51 10       	cpse	r5, r1
    3220:	f8 cf       	rjmp	.-16     	; 0x3212 <vfprintf+0x6ac>
    3222:	d8 cf       	rjmp	.-80     	; 0x31d4 <vfprintf+0x66e>
    3224:	51 2c       	mov	r5, r1
    3226:	b7 01       	movw	r22, r14
    3228:	80 2f       	mov	r24, r16
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    3230:	d3 cf       	rjmp	.-90     	; 0x31d8 <vfprintf+0x672>
    3232:	00 e8       	ldi	r16, 0x80	; 128
    3234:	10 e0       	ldi	r17, 0x00	; 0
    3236:	d5 cf       	rjmp	.-86     	; 0x31e2 <vfprintf+0x67c>
    3238:	91 10       	cpse	r9, r1
    323a:	80 52       	subi	r24, 0x20	; 32
    323c:	b7 01       	movw	r22, r14
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	0e 94 82 1a 	call	0x3504	; 0x3504 <fputc>
    3244:	0f 5f       	subi	r16, 0xFF	; 255
    3246:	1f 4f       	sbci	r17, 0xFF	; 255
    3248:	cf cf       	rjmp	.-98     	; 0x31e8 <vfprintf+0x682>
    324a:	23 e0       	ldi	r18, 0x03	; 3
    324c:	25 15       	cp	r18, r5
    324e:	10 f4       	brcc	.+4      	; 0x3254 <vfprintf+0x6ee>
    3250:	83 e0       	ldi	r24, 0x03	; 3
    3252:	bd cf       	rjmp	.-134    	; 0x31ce <vfprintf+0x668>
    3254:	51 2c       	mov	r5, r1
    3256:	c0 cf       	rjmp	.-128    	; 0x31d8 <vfprintf+0x672>
    3258:	60 96       	adiw	r28, 0x10	; 16
    325a:	e2 e1       	ldi	r30, 0x12	; 18
    325c:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__epilogue_restores__>

00003260 <__udivmodsi4>:
    3260:	a1 e2       	ldi	r26, 0x21	; 33
    3262:	1a 2e       	mov	r1, r26
    3264:	aa 1b       	sub	r26, r26
    3266:	bb 1b       	sub	r27, r27
    3268:	fd 01       	movw	r30, r26
    326a:	0d c0       	rjmp	.+26     	; 0x3286 <__udivmodsi4_ep>

0000326c <__udivmodsi4_loop>:
    326c:	aa 1f       	adc	r26, r26
    326e:	bb 1f       	adc	r27, r27
    3270:	ee 1f       	adc	r30, r30
    3272:	ff 1f       	adc	r31, r31
    3274:	a2 17       	cp	r26, r18
    3276:	b3 07       	cpc	r27, r19
    3278:	e4 07       	cpc	r30, r20
    327a:	f5 07       	cpc	r31, r21
    327c:	20 f0       	brcs	.+8      	; 0x3286 <__udivmodsi4_ep>
    327e:	a2 1b       	sub	r26, r18
    3280:	b3 0b       	sbc	r27, r19
    3282:	e4 0b       	sbc	r30, r20
    3284:	f5 0b       	sbc	r31, r21

00003286 <__udivmodsi4_ep>:
    3286:	66 1f       	adc	r22, r22
    3288:	77 1f       	adc	r23, r23
    328a:	88 1f       	adc	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	1a 94       	dec	r1
    3290:	69 f7       	brne	.-38     	; 0x326c <__udivmodsi4_loop>
    3292:	60 95       	com	r22
    3294:	70 95       	com	r23
    3296:	80 95       	com	r24
    3298:	90 95       	com	r25
    329a:	9b 01       	movw	r18, r22
    329c:	ac 01       	movw	r20, r24
    329e:	bd 01       	movw	r22, r26
    32a0:	cf 01       	movw	r24, r30
    32a2:	08 95       	ret

000032a4 <__prologue_saves__>:
    32a4:	2f 92       	push	r2
    32a6:	3f 92       	push	r3
    32a8:	4f 92       	push	r4
    32aa:	5f 92       	push	r5
    32ac:	6f 92       	push	r6
    32ae:	7f 92       	push	r7
    32b0:	8f 92       	push	r8
    32b2:	9f 92       	push	r9
    32b4:	af 92       	push	r10
    32b6:	bf 92       	push	r11
    32b8:	cf 92       	push	r12
    32ba:	df 92       	push	r13
    32bc:	ef 92       	push	r14
    32be:	ff 92       	push	r15
    32c0:	0f 93       	push	r16
    32c2:	1f 93       	push	r17
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	ca 1b       	sub	r28, r26
    32ce:	db 0b       	sbc	r29, r27
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	09 94       	ijmp

000032d6 <__epilogue_restores__>:
    32d6:	2a 88       	ldd	r2, Y+18	; 0x12
    32d8:	39 88       	ldd	r3, Y+17	; 0x11
    32da:	48 88       	ldd	r4, Y+16	; 0x10
    32dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    32de:	6e 84       	ldd	r6, Y+14	; 0x0e
    32e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    32e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    32e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    32e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    32e8:	b9 84       	ldd	r11, Y+9	; 0x09
    32ea:	c8 84       	ldd	r12, Y+8	; 0x08
    32ec:	df 80       	ldd	r13, Y+7	; 0x07
    32ee:	ee 80       	ldd	r14, Y+6	; 0x06
    32f0:	fd 80       	ldd	r15, Y+5	; 0x05
    32f2:	0c 81       	ldd	r16, Y+4	; 0x04
    32f4:	1b 81       	ldd	r17, Y+3	; 0x03
    32f6:	aa 81       	ldd	r26, Y+2	; 0x02
    32f8:	b9 81       	ldd	r27, Y+1	; 0x01
    32fa:	ce 0f       	add	r28, r30
    32fc:	d1 1d       	adc	r29, r1
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	ed 01       	movw	r28, r26
    3304:	08 95       	ret

00003306 <atof>:
    3306:	66 27       	eor	r22, r22
    3308:	77 27       	eor	r23, r23
    330a:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <strtod>

0000330e <__ftoa_engine>:
    330e:	28 30       	cpi	r18, 0x08	; 8
    3310:	08 f0       	brcs	.+2      	; 0x3314 <__ftoa_engine+0x6>
    3312:	27 e0       	ldi	r18, 0x07	; 7
    3314:	33 27       	eor	r19, r19
    3316:	da 01       	movw	r26, r20
    3318:	99 0f       	add	r25, r25
    331a:	31 1d       	adc	r19, r1
    331c:	87 fd       	sbrc	r24, 7
    331e:	91 60       	ori	r25, 0x01	; 1
    3320:	00 96       	adiw	r24, 0x00	; 0
    3322:	61 05       	cpc	r22, r1
    3324:	71 05       	cpc	r23, r1
    3326:	39 f4       	brne	.+14     	; 0x3336 <__ftoa_engine+0x28>
    3328:	32 60       	ori	r19, 0x02	; 2
    332a:	2e 5f       	subi	r18, 0xFE	; 254
    332c:	3d 93       	st	X+, r19
    332e:	30 e3       	ldi	r19, 0x30	; 48
    3330:	2a 95       	dec	r18
    3332:	e1 f7       	brne	.-8      	; 0x332c <__ftoa_engine+0x1e>
    3334:	08 95       	ret
    3336:	9f 3f       	cpi	r25, 0xFF	; 255
    3338:	30 f0       	brcs	.+12     	; 0x3346 <__ftoa_engine+0x38>
    333a:	80 38       	cpi	r24, 0x80	; 128
    333c:	71 05       	cpc	r23, r1
    333e:	61 05       	cpc	r22, r1
    3340:	09 f0       	breq	.+2      	; 0x3344 <__ftoa_engine+0x36>
    3342:	3c 5f       	subi	r19, 0xFC	; 252
    3344:	3c 5f       	subi	r19, 0xFC	; 252
    3346:	3d 93       	st	X+, r19
    3348:	91 30       	cpi	r25, 0x01	; 1
    334a:	08 f0       	brcs	.+2      	; 0x334e <__ftoa_engine+0x40>
    334c:	80 68       	ori	r24, 0x80	; 128
    334e:	91 1d       	adc	r25, r1
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	1f 93       	push	r17
    3356:	0f 93       	push	r16
    3358:	ff 92       	push	r15
    335a:	ef 92       	push	r14
    335c:	19 2f       	mov	r17, r25
    335e:	98 7f       	andi	r25, 0xF8	; 248
    3360:	96 95       	lsr	r25
    3362:	e9 2f       	mov	r30, r25
    3364:	96 95       	lsr	r25
    3366:	96 95       	lsr	r25
    3368:	e9 0f       	add	r30, r25
    336a:	ff 27       	eor	r31, r31
    336c:	e2 52       	subi	r30, 0x22	; 34
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	99 27       	eor	r25, r25
    3372:	33 27       	eor	r19, r19
    3374:	ee 24       	eor	r14, r14
    3376:	ff 24       	eor	r15, r15
    3378:	a7 01       	movw	r20, r14
    337a:	e7 01       	movw	r28, r14
    337c:	05 90       	lpm	r0, Z+
    337e:	08 94       	sec
    3380:	07 94       	ror	r0
    3382:	28 f4       	brcc	.+10     	; 0x338e <__ftoa_engine+0x80>
    3384:	36 0f       	add	r19, r22
    3386:	e7 1e       	adc	r14, r23
    3388:	f8 1e       	adc	r15, r24
    338a:	49 1f       	adc	r20, r25
    338c:	51 1d       	adc	r21, r1
    338e:	66 0f       	add	r22, r22
    3390:	77 1f       	adc	r23, r23
    3392:	88 1f       	adc	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	06 94       	lsr	r0
    3398:	a1 f7       	brne	.-24     	; 0x3382 <__ftoa_engine+0x74>
    339a:	05 90       	lpm	r0, Z+
    339c:	07 94       	ror	r0
    339e:	28 f4       	brcc	.+10     	; 0x33aa <__ftoa_engine+0x9c>
    33a0:	e7 0e       	add	r14, r23
    33a2:	f8 1e       	adc	r15, r24
    33a4:	49 1f       	adc	r20, r25
    33a6:	56 1f       	adc	r21, r22
    33a8:	c1 1d       	adc	r28, r1
    33aa:	77 0f       	add	r23, r23
    33ac:	88 1f       	adc	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	66 1f       	adc	r22, r22
    33b2:	06 94       	lsr	r0
    33b4:	a1 f7       	brne	.-24     	; 0x339e <__ftoa_engine+0x90>
    33b6:	05 90       	lpm	r0, Z+
    33b8:	07 94       	ror	r0
    33ba:	28 f4       	brcc	.+10     	; 0x33c6 <__ftoa_engine+0xb8>
    33bc:	f8 0e       	add	r15, r24
    33be:	49 1f       	adc	r20, r25
    33c0:	56 1f       	adc	r21, r22
    33c2:	c7 1f       	adc	r28, r23
    33c4:	d1 1d       	adc	r29, r1
    33c6:	88 0f       	add	r24, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	66 1f       	adc	r22, r22
    33cc:	77 1f       	adc	r23, r23
    33ce:	06 94       	lsr	r0
    33d0:	a1 f7       	brne	.-24     	; 0x33ba <__ftoa_engine+0xac>
    33d2:	05 90       	lpm	r0, Z+
    33d4:	07 94       	ror	r0
    33d6:	20 f4       	brcc	.+8      	; 0x33e0 <__ftoa_engine+0xd2>
    33d8:	49 0f       	add	r20, r25
    33da:	56 1f       	adc	r21, r22
    33dc:	c7 1f       	adc	r28, r23
    33de:	d8 1f       	adc	r29, r24
    33e0:	99 0f       	add	r25, r25
    33e2:	66 1f       	adc	r22, r22
    33e4:	77 1f       	adc	r23, r23
    33e6:	88 1f       	adc	r24, r24
    33e8:	06 94       	lsr	r0
    33ea:	a9 f7       	brne	.-22     	; 0x33d6 <__ftoa_engine+0xc8>
    33ec:	84 91       	lpm	r24, Z
    33ee:	10 95       	com	r17
    33f0:	17 70       	andi	r17, 0x07	; 7
    33f2:	41 f0       	breq	.+16     	; 0x3404 <__ftoa_engine+0xf6>
    33f4:	d6 95       	lsr	r29
    33f6:	c7 95       	ror	r28
    33f8:	57 95       	ror	r21
    33fa:	47 95       	ror	r20
    33fc:	f7 94       	ror	r15
    33fe:	e7 94       	ror	r14
    3400:	1a 95       	dec	r17
    3402:	c1 f7       	brne	.-16     	; 0x33f4 <__ftoa_engine+0xe6>
    3404:	e4 e8       	ldi	r30, 0x84	; 132
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	68 94       	set
    340a:	15 90       	lpm	r1, Z+
    340c:	15 91       	lpm	r17, Z+
    340e:	35 91       	lpm	r19, Z+
    3410:	65 91       	lpm	r22, Z+
    3412:	95 91       	lpm	r25, Z+
    3414:	05 90       	lpm	r0, Z+
    3416:	7f e2       	ldi	r23, 0x2F	; 47
    3418:	73 95       	inc	r23
    341a:	e1 18       	sub	r14, r1
    341c:	f1 0a       	sbc	r15, r17
    341e:	43 0b       	sbc	r20, r19
    3420:	56 0b       	sbc	r21, r22
    3422:	c9 0b       	sbc	r28, r25
    3424:	d0 09       	sbc	r29, r0
    3426:	c0 f7       	brcc	.-16     	; 0x3418 <__ftoa_engine+0x10a>
    3428:	e1 0c       	add	r14, r1
    342a:	f1 1e       	adc	r15, r17
    342c:	43 1f       	adc	r20, r19
    342e:	56 1f       	adc	r21, r22
    3430:	c9 1f       	adc	r28, r25
    3432:	d0 1d       	adc	r29, r0
    3434:	7e f4       	brtc	.+30     	; 0x3454 <__ftoa_engine+0x146>
    3436:	70 33       	cpi	r23, 0x30	; 48
    3438:	11 f4       	brne	.+4      	; 0x343e <__ftoa_engine+0x130>
    343a:	8a 95       	dec	r24
    343c:	e6 cf       	rjmp	.-52     	; 0x340a <__ftoa_engine+0xfc>
    343e:	e8 94       	clt
    3440:	01 50       	subi	r16, 0x01	; 1
    3442:	30 f0       	brcs	.+12     	; 0x3450 <__ftoa_engine+0x142>
    3444:	08 0f       	add	r16, r24
    3446:	0a f4       	brpl	.+2      	; 0x344a <__ftoa_engine+0x13c>
    3448:	00 27       	eor	r16, r16
    344a:	02 17       	cp	r16, r18
    344c:	08 f4       	brcc	.+2      	; 0x3450 <__ftoa_engine+0x142>
    344e:	20 2f       	mov	r18, r16
    3450:	23 95       	inc	r18
    3452:	02 2f       	mov	r16, r18
    3454:	7a 33       	cpi	r23, 0x3A	; 58
    3456:	28 f0       	brcs	.+10     	; 0x3462 <__ftoa_engine+0x154>
    3458:	79 e3       	ldi	r23, 0x39	; 57
    345a:	7d 93       	st	X+, r23
    345c:	2a 95       	dec	r18
    345e:	e9 f7       	brne	.-6      	; 0x345a <__ftoa_engine+0x14c>
    3460:	10 c0       	rjmp	.+32     	; 0x3482 <__ftoa_engine+0x174>
    3462:	7d 93       	st	X+, r23
    3464:	2a 95       	dec	r18
    3466:	89 f6       	brne	.-94     	; 0x340a <__ftoa_engine+0xfc>
    3468:	06 94       	lsr	r0
    346a:	97 95       	ror	r25
    346c:	67 95       	ror	r22
    346e:	37 95       	ror	r19
    3470:	17 95       	ror	r17
    3472:	17 94       	ror	r1
    3474:	e1 18       	sub	r14, r1
    3476:	f1 0a       	sbc	r15, r17
    3478:	43 0b       	sbc	r20, r19
    347a:	56 0b       	sbc	r21, r22
    347c:	c9 0b       	sbc	r28, r25
    347e:	d0 09       	sbc	r29, r0
    3480:	98 f0       	brcs	.+38     	; 0x34a8 <__ftoa_engine+0x19a>
    3482:	23 95       	inc	r18
    3484:	7e 91       	ld	r23, -X
    3486:	73 95       	inc	r23
    3488:	7a 33       	cpi	r23, 0x3A	; 58
    348a:	08 f0       	brcs	.+2      	; 0x348e <__ftoa_engine+0x180>
    348c:	70 e3       	ldi	r23, 0x30	; 48
    348e:	7c 93       	st	X, r23
    3490:	20 13       	cpse	r18, r16
    3492:	b8 f7       	brcc	.-18     	; 0x3482 <__ftoa_engine+0x174>
    3494:	7e 91       	ld	r23, -X
    3496:	70 61       	ori	r23, 0x10	; 16
    3498:	7d 93       	st	X+, r23
    349a:	30 f0       	brcs	.+12     	; 0x34a8 <__ftoa_engine+0x19a>
    349c:	83 95       	inc	r24
    349e:	71 e3       	ldi	r23, 0x31	; 49
    34a0:	7d 93       	st	X+, r23
    34a2:	70 e3       	ldi	r23, 0x30	; 48
    34a4:	2a 95       	dec	r18
    34a6:	e1 f7       	brne	.-8      	; 0x34a0 <__ftoa_engine+0x192>
    34a8:	11 24       	eor	r1, r1
    34aa:	ef 90       	pop	r14
    34ac:	ff 90       	pop	r15
    34ae:	0f 91       	pop	r16
    34b0:	1f 91       	pop	r17
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	99 27       	eor	r25, r25
    34b8:	87 fd       	sbrc	r24, 7
    34ba:	90 95       	com	r25
    34bc:	08 95       	ret

000034be <strnlen_P>:
    34be:	fc 01       	movw	r30, r24
    34c0:	05 90       	lpm	r0, Z+
    34c2:	61 50       	subi	r22, 0x01	; 1
    34c4:	70 40       	sbci	r23, 0x00	; 0
    34c6:	01 10       	cpse	r0, r1
    34c8:	d8 f7       	brcc	.-10     	; 0x34c0 <strnlen_P+0x2>
    34ca:	80 95       	com	r24
    34cc:	90 95       	com	r25
    34ce:	8e 0f       	add	r24, r30
    34d0:	9f 1f       	adc	r25, r31
    34d2:	08 95       	ret

000034d4 <memcmp>:
    34d4:	fb 01       	movw	r30, r22
    34d6:	dc 01       	movw	r26, r24
    34d8:	04 c0       	rjmp	.+8      	; 0x34e2 <memcmp+0xe>
    34da:	8d 91       	ld	r24, X+
    34dc:	01 90       	ld	r0, Z+
    34de:	80 19       	sub	r24, r0
    34e0:	21 f4       	brne	.+8      	; 0x34ea <memcmp+0x16>
    34e2:	41 50       	subi	r20, 0x01	; 1
    34e4:	50 40       	sbci	r21, 0x00	; 0
    34e6:	c8 f7       	brcc	.-14     	; 0x34da <memcmp+0x6>
    34e8:	88 1b       	sub	r24, r24
    34ea:	99 0b       	sbc	r25, r25
    34ec:	08 95       	ret

000034ee <strnlen>:
    34ee:	fc 01       	movw	r30, r24
    34f0:	61 50       	subi	r22, 0x01	; 1
    34f2:	70 40       	sbci	r23, 0x00	; 0
    34f4:	01 90       	ld	r0, Z+
    34f6:	01 10       	cpse	r0, r1
    34f8:	d8 f7       	brcc	.-10     	; 0x34f0 <strnlen+0x2>
    34fa:	80 95       	com	r24
    34fc:	90 95       	com	r25
    34fe:	8e 0f       	add	r24, r30
    3500:	9f 1f       	adc	r25, r31
    3502:	08 95       	ret

00003504 <fputc>:
    3504:	0f 93       	push	r16
    3506:	1f 93       	push	r17
    3508:	cf 93       	push	r28
    350a:	df 93       	push	r29
    350c:	fb 01       	movw	r30, r22
    350e:	23 81       	ldd	r18, Z+3	; 0x03
    3510:	21 fd       	sbrc	r18, 1
    3512:	03 c0       	rjmp	.+6      	; 0x351a <fputc+0x16>
    3514:	8f ef       	ldi	r24, 0xFF	; 255
    3516:	9f ef       	ldi	r25, 0xFF	; 255
    3518:	2c c0       	rjmp	.+88     	; 0x3572 <fputc+0x6e>
    351a:	22 ff       	sbrs	r18, 2
    351c:	16 c0       	rjmp	.+44     	; 0x354a <fputc+0x46>
    351e:	46 81       	ldd	r20, Z+6	; 0x06
    3520:	57 81       	ldd	r21, Z+7	; 0x07
    3522:	24 81       	ldd	r18, Z+4	; 0x04
    3524:	35 81       	ldd	r19, Z+5	; 0x05
    3526:	42 17       	cp	r20, r18
    3528:	53 07       	cpc	r21, r19
    352a:	44 f4       	brge	.+16     	; 0x353c <fputc+0x38>
    352c:	a0 81       	ld	r26, Z
    352e:	b1 81       	ldd	r27, Z+1	; 0x01
    3530:	9d 01       	movw	r18, r26
    3532:	2f 5f       	subi	r18, 0xFF	; 255
    3534:	3f 4f       	sbci	r19, 0xFF	; 255
    3536:	20 83       	st	Z, r18
    3538:	31 83       	std	Z+1, r19	; 0x01
    353a:	8c 93       	st	X, r24
    353c:	26 81       	ldd	r18, Z+6	; 0x06
    353e:	37 81       	ldd	r19, Z+7	; 0x07
    3540:	2f 5f       	subi	r18, 0xFF	; 255
    3542:	3f 4f       	sbci	r19, 0xFF	; 255
    3544:	26 83       	std	Z+6, r18	; 0x06
    3546:	37 83       	std	Z+7, r19	; 0x07
    3548:	14 c0       	rjmp	.+40     	; 0x3572 <fputc+0x6e>
    354a:	8b 01       	movw	r16, r22
    354c:	ec 01       	movw	r28, r24
    354e:	fb 01       	movw	r30, r22
    3550:	00 84       	ldd	r0, Z+8	; 0x08
    3552:	f1 85       	ldd	r31, Z+9	; 0x09
    3554:	e0 2d       	mov	r30, r0
    3556:	09 95       	icall
    3558:	89 2b       	or	r24, r25
    355a:	e1 f6       	brne	.-72     	; 0x3514 <fputc+0x10>
    355c:	d8 01       	movw	r26, r16
    355e:	16 96       	adiw	r26, 0x06	; 6
    3560:	8d 91       	ld	r24, X+
    3562:	9c 91       	ld	r25, X
    3564:	17 97       	sbiw	r26, 0x07	; 7
    3566:	01 96       	adiw	r24, 0x01	; 1
    3568:	16 96       	adiw	r26, 0x06	; 6
    356a:	8d 93       	st	X+, r24
    356c:	9c 93       	st	X, r25
    356e:	17 97       	sbiw	r26, 0x07	; 7
    3570:	ce 01       	movw	r24, r28
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	08 95       	ret

0000357c <snprintf>:
    357c:	ae e0       	ldi	r26, 0x0E	; 14
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	e4 ec       	ldi	r30, 0xC4	; 196
    3582:	fa e1       	ldi	r31, 0x1A	; 26
    3584:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__prologue_saves__+0x1c>
    3588:	0d 89       	ldd	r16, Y+21	; 0x15
    358a:	1e 89       	ldd	r17, Y+22	; 0x16
    358c:	8f 89       	ldd	r24, Y+23	; 0x17
    358e:	98 8d       	ldd	r25, Y+24	; 0x18
    3590:	26 e0       	ldi	r18, 0x06	; 6
    3592:	2c 83       	std	Y+4, r18	; 0x04
    3594:	09 83       	std	Y+1, r16	; 0x01
    3596:	1a 83       	std	Y+2, r17	; 0x02
    3598:	97 ff       	sbrs	r25, 7
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <snprintf+0x24>
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	90 e8       	ldi	r25, 0x80	; 128
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	8d 83       	std	Y+5, r24	; 0x05
    35a4:	9e 83       	std	Y+6, r25	; 0x06
    35a6:	ae 01       	movw	r20, r28
    35a8:	45 5e       	subi	r20, 0xE5	; 229
    35aa:	5f 4f       	sbci	r21, 0xFF	; 255
    35ac:	69 8d       	ldd	r22, Y+25	; 0x19
    35ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35b0:	ce 01       	movw	r24, r28
    35b2:	01 96       	adiw	r24, 0x01	; 1
    35b4:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <vfprintf>
    35b8:	4d 81       	ldd	r20, Y+5	; 0x05
    35ba:	5e 81       	ldd	r21, Y+6	; 0x06
    35bc:	57 fd       	sbrc	r21, 7
    35be:	0a c0       	rjmp	.+20     	; 0x35d4 <snprintf+0x58>
    35c0:	2f 81       	ldd	r18, Y+7	; 0x07
    35c2:	38 85       	ldd	r19, Y+8	; 0x08
    35c4:	42 17       	cp	r20, r18
    35c6:	53 07       	cpc	r21, r19
    35c8:	0c f4       	brge	.+2      	; 0x35cc <snprintf+0x50>
    35ca:	9a 01       	movw	r18, r20
    35cc:	f8 01       	movw	r30, r16
    35ce:	e2 0f       	add	r30, r18
    35d0:	f3 1f       	adc	r31, r19
    35d2:	10 82       	st	Z, r1
    35d4:	2e 96       	adiw	r28, 0x0e	; 14
    35d6:	e4 e0       	ldi	r30, 0x04	; 4
    35d8:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__epilogue_restores__+0x1c>

000035dc <__ultoa_invert>:
    35dc:	fa 01       	movw	r30, r20
    35de:	aa 27       	eor	r26, r26
    35e0:	28 30       	cpi	r18, 0x08	; 8
    35e2:	51 f1       	breq	.+84     	; 0x3638 <__ultoa_invert+0x5c>
    35e4:	20 31       	cpi	r18, 0x10	; 16
    35e6:	81 f1       	breq	.+96     	; 0x3648 <__ultoa_invert+0x6c>
    35e8:	e8 94       	clt
    35ea:	6f 93       	push	r22
    35ec:	6e 7f       	andi	r22, 0xFE	; 254
    35ee:	6e 5f       	subi	r22, 0xFE	; 254
    35f0:	7f 4f       	sbci	r23, 0xFF	; 255
    35f2:	8f 4f       	sbci	r24, 0xFF	; 255
    35f4:	9f 4f       	sbci	r25, 0xFF	; 255
    35f6:	af 4f       	sbci	r26, 0xFF	; 255
    35f8:	b1 e0       	ldi	r27, 0x01	; 1
    35fa:	3e d0       	rcall	.+124    	; 0x3678 <__ultoa_invert+0x9c>
    35fc:	b4 e0       	ldi	r27, 0x04	; 4
    35fe:	3c d0       	rcall	.+120    	; 0x3678 <__ultoa_invert+0x9c>
    3600:	67 0f       	add	r22, r23
    3602:	78 1f       	adc	r23, r24
    3604:	89 1f       	adc	r24, r25
    3606:	9a 1f       	adc	r25, r26
    3608:	a1 1d       	adc	r26, r1
    360a:	68 0f       	add	r22, r24
    360c:	79 1f       	adc	r23, r25
    360e:	8a 1f       	adc	r24, r26
    3610:	91 1d       	adc	r25, r1
    3612:	a1 1d       	adc	r26, r1
    3614:	6a 0f       	add	r22, r26
    3616:	71 1d       	adc	r23, r1
    3618:	81 1d       	adc	r24, r1
    361a:	91 1d       	adc	r25, r1
    361c:	a1 1d       	adc	r26, r1
    361e:	20 d0       	rcall	.+64     	; 0x3660 <__ultoa_invert+0x84>
    3620:	09 f4       	brne	.+2      	; 0x3624 <__ultoa_invert+0x48>
    3622:	68 94       	set
    3624:	3f 91       	pop	r19
    3626:	2a e0       	ldi	r18, 0x0A	; 10
    3628:	26 9f       	mul	r18, r22
    362a:	11 24       	eor	r1, r1
    362c:	30 19       	sub	r19, r0
    362e:	30 5d       	subi	r19, 0xD0	; 208
    3630:	31 93       	st	Z+, r19
    3632:	de f6       	brtc	.-74     	; 0x35ea <__ultoa_invert+0xe>
    3634:	cf 01       	movw	r24, r30
    3636:	08 95       	ret
    3638:	46 2f       	mov	r20, r22
    363a:	47 70       	andi	r20, 0x07	; 7
    363c:	40 5d       	subi	r20, 0xD0	; 208
    363e:	41 93       	st	Z+, r20
    3640:	b3 e0       	ldi	r27, 0x03	; 3
    3642:	0f d0       	rcall	.+30     	; 0x3662 <__ultoa_invert+0x86>
    3644:	c9 f7       	brne	.-14     	; 0x3638 <__ultoa_invert+0x5c>
    3646:	f6 cf       	rjmp	.-20     	; 0x3634 <__ultoa_invert+0x58>
    3648:	46 2f       	mov	r20, r22
    364a:	4f 70       	andi	r20, 0x0F	; 15
    364c:	40 5d       	subi	r20, 0xD0	; 208
    364e:	4a 33       	cpi	r20, 0x3A	; 58
    3650:	18 f0       	brcs	.+6      	; 0x3658 <__ultoa_invert+0x7c>
    3652:	49 5d       	subi	r20, 0xD9	; 217
    3654:	31 fd       	sbrc	r19, 1
    3656:	40 52       	subi	r20, 0x20	; 32
    3658:	41 93       	st	Z+, r20
    365a:	02 d0       	rcall	.+4      	; 0x3660 <__ultoa_invert+0x84>
    365c:	a9 f7       	brne	.-22     	; 0x3648 <__ultoa_invert+0x6c>
    365e:	ea cf       	rjmp	.-44     	; 0x3634 <__ultoa_invert+0x58>
    3660:	b4 e0       	ldi	r27, 0x04	; 4
    3662:	a6 95       	lsr	r26
    3664:	97 95       	ror	r25
    3666:	87 95       	ror	r24
    3668:	77 95       	ror	r23
    366a:	67 95       	ror	r22
    366c:	ba 95       	dec	r27
    366e:	c9 f7       	brne	.-14     	; 0x3662 <__ultoa_invert+0x86>
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	61 05       	cpc	r22, r1
    3674:	71 05       	cpc	r23, r1
    3676:	08 95       	ret
    3678:	9b 01       	movw	r18, r22
    367a:	ac 01       	movw	r20, r24
    367c:	0a 2e       	mov	r0, r26
    367e:	06 94       	lsr	r0
    3680:	57 95       	ror	r21
    3682:	47 95       	ror	r20
    3684:	37 95       	ror	r19
    3686:	27 95       	ror	r18
    3688:	ba 95       	dec	r27
    368a:	c9 f7       	brne	.-14     	; 0x367e <__ultoa_invert+0xa2>
    368c:	62 0f       	add	r22, r18
    368e:	73 1f       	adc	r23, r19
    3690:	84 1f       	adc	r24, r20
    3692:	95 1f       	adc	r25, r21
    3694:	a0 1d       	adc	r26, r0
    3696:	08 95       	ret

00003698 <strtod>:
    3698:	a0 e0       	ldi	r26, 0x00	; 0
    369a:	b0 e0       	ldi	r27, 0x00	; 0
    369c:	e2 e5       	ldi	r30, 0x52	; 82
    369e:	fb e1       	ldi	r31, 0x1B	; 27
    36a0:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__prologue_saves__+0xc>
    36a4:	ec 01       	movw	r28, r24
    36a6:	6b 01       	movw	r12, r22
    36a8:	61 15       	cp	r22, r1
    36aa:	71 05       	cpc	r23, r1
    36ac:	19 f0       	breq	.+6      	; 0x36b4 <strtod+0x1c>
    36ae:	fb 01       	movw	r30, r22
    36b0:	80 83       	st	Z, r24
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	7e 01       	movw	r14, r28
    36b6:	ff ef       	ldi	r31, 0xFF	; 255
    36b8:	ef 1a       	sub	r14, r31
    36ba:	ff 0a       	sbc	r15, r31
    36bc:	08 81       	ld	r16, Y
    36be:	80 2f       	mov	r24, r16
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 9a 1c 	call	0x3934	; 0x3934 <isspace>
    36c6:	89 2b       	or	r24, r25
    36c8:	11 f0       	breq	.+4      	; 0x36ce <strtod+0x36>
    36ca:	e7 01       	movw	r28, r14
    36cc:	f3 cf       	rjmp	.-26     	; 0x36b4 <strtod+0x1c>
    36ce:	0d 32       	cpi	r16, 0x2D	; 45
    36d0:	39 f4       	brne	.+14     	; 0x36e0 <strtod+0x48>
    36d2:	7e 01       	movw	r14, r28
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	e8 0e       	add	r14, r24
    36d8:	f1 1c       	adc	r15, r1
    36da:	09 81       	ldd	r16, Y+1	; 0x01
    36dc:	11 e0       	ldi	r17, 0x01	; 1
    36de:	08 c0       	rjmp	.+16     	; 0x36f0 <strtod+0x58>
    36e0:	0b 32       	cpi	r16, 0x2B	; 43
    36e2:	29 f4       	brne	.+10     	; 0x36ee <strtod+0x56>
    36e4:	7e 01       	movw	r14, r28
    36e6:	92 e0       	ldi	r25, 0x02	; 2
    36e8:	e9 0e       	add	r14, r25
    36ea:	f1 1c       	adc	r15, r1
    36ec:	09 81       	ldd	r16, Y+1	; 0x01
    36ee:	10 e0       	ldi	r17, 0x00	; 0
    36f0:	e7 01       	movw	r28, r14
    36f2:	21 97       	sbiw	r28, 0x01	; 1
    36f4:	43 e0       	ldi	r20, 0x03	; 3
    36f6:	50 e0       	ldi	r21, 0x00	; 0
    36f8:	66 e8       	ldi	r22, 0x86	; 134
    36fa:	71 e0       	ldi	r23, 0x01	; 1
    36fc:	ce 01       	movw	r24, r28
    36fe:	0e 94 a3 1c 	call	0x3946	; 0x3946 <strncasecmp_P>
    3702:	89 2b       	or	r24, r25
    3704:	c1 f4       	brne	.+48     	; 0x3736 <strtod+0x9e>
    3706:	23 96       	adiw	r28, 0x03	; 3
    3708:	45 e0       	ldi	r20, 0x05	; 5
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	61 e8       	ldi	r22, 0x81	; 129
    370e:	71 e0       	ldi	r23, 0x01	; 1
    3710:	ce 01       	movw	r24, r28
    3712:	0e 94 a3 1c 	call	0x3946	; 0x3946 <strncasecmp_P>
    3716:	89 2b       	or	r24, r25
    3718:	09 f4       	brne	.+2      	; 0x371c <strtod+0x84>
    371a:	25 96       	adiw	r28, 0x05	; 5
    371c:	c1 14       	cp	r12, r1
    371e:	d1 04       	cpc	r13, r1
    3720:	19 f0       	breq	.+6      	; 0x3728 <strtod+0x90>
    3722:	f6 01       	movw	r30, r12
    3724:	c0 83       	st	Z, r28
    3726:	d1 83       	std	Z+1, r29	; 0x01
    3728:	11 11       	cpse	r17, r1
    372a:	f6 c0       	rjmp	.+492    	; 0x3918 <strtod+0x280>
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	70 e0       	ldi	r23, 0x00	; 0
    3730:	80 e8       	ldi	r24, 0x80	; 128
    3732:	9f e7       	ldi	r25, 0x7F	; 127
    3734:	fa c0       	rjmp	.+500    	; 0x392a <strtod+0x292>
    3736:	43 e0       	ldi	r20, 0x03	; 3
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	6e e7       	ldi	r22, 0x7E	; 126
    373c:	71 e0       	ldi	r23, 0x01	; 1
    373e:	ce 01       	movw	r24, r28
    3740:	0e 94 a3 1c 	call	0x3946	; 0x3946 <strncasecmp_P>
    3744:	89 2b       	or	r24, r25
    3746:	59 f4       	brne	.+22     	; 0x375e <strtod+0xc6>
    3748:	c1 14       	cp	r12, r1
    374a:	d1 04       	cpc	r13, r1
    374c:	09 f4       	brne	.+2      	; 0x3750 <strtod+0xb8>
    374e:	e9 c0       	rjmp	.+466    	; 0x3922 <strtod+0x28a>
    3750:	f2 e0       	ldi	r31, 0x02	; 2
    3752:	ef 0e       	add	r14, r31
    3754:	f1 1c       	adc	r15, r1
    3756:	f6 01       	movw	r30, r12
    3758:	e0 82       	st	Z, r14
    375a:	f1 82       	std	Z+1, r15	; 0x01
    375c:	e2 c0       	rjmp	.+452    	; 0x3922 <strtod+0x28a>
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	a9 01       	movw	r20, r18
    3764:	c0 e0       	ldi	r28, 0x00	; 0
    3766:	d0 e0       	ldi	r29, 0x00	; 0
    3768:	f7 01       	movw	r30, r14
    376a:	80 ed       	ldi	r24, 0xD0	; 208
    376c:	a8 2e       	mov	r10, r24
    376e:	a0 0e       	add	r10, r16
    3770:	89 e0       	ldi	r24, 0x09	; 9
    3772:	8a 15       	cp	r24, r10
    3774:	30 f1       	brcs	.+76     	; 0x37c2 <strtod+0x12a>
    3776:	91 2f       	mov	r25, r17
    3778:	92 60       	ori	r25, 0x02	; 2
    377a:	b9 2e       	mov	r11, r25
    377c:	81 2f       	mov	r24, r17
    377e:	88 70       	andi	r24, 0x08	; 8
    3780:	12 ff       	sbrs	r17, 2
    3782:	04 c0       	rjmp	.+8      	; 0x378c <strtod+0xf4>
    3784:	81 11       	cpse	r24, r1
    3786:	24 c0       	rjmp	.+72     	; 0x37d0 <strtod+0x138>
    3788:	21 96       	adiw	r28, 0x01	; 1
    378a:	22 c0       	rjmp	.+68     	; 0x37d0 <strtod+0x138>
    378c:	81 11       	cpse	r24, r1
    378e:	21 97       	sbiw	r28, 0x01	; 1
    3790:	a5 e0       	ldi	r26, 0x05	; 5
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	0e 94 be 1c 	call	0x397c	; 0x397c <__muluhisi3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	88 0f       	add	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	aa 1f       	adc	r26, r26
    37a2:	bb 1f       	adc	r27, r27
    37a4:	9c 01       	movw	r18, r24
    37a6:	ad 01       	movw	r20, r26
    37a8:	2a 0d       	add	r18, r10
    37aa:	31 1d       	adc	r19, r1
    37ac:	41 1d       	adc	r20, r1
    37ae:	51 1d       	adc	r21, r1
    37b0:	28 39       	cpi	r18, 0x98	; 152
    37b2:	89 e9       	ldi	r24, 0x99	; 153
    37b4:	38 07       	cpc	r19, r24
    37b6:	48 07       	cpc	r20, r24
    37b8:	89 e1       	ldi	r24, 0x19	; 25
    37ba:	58 07       	cpc	r21, r24
    37bc:	48 f0       	brcs	.+18     	; 0x37d0 <strtod+0x138>
    37be:	16 60       	ori	r17, 0x06	; 6
    37c0:	06 c0       	rjmp	.+12     	; 0x37ce <strtod+0x136>
    37c2:	9e ef       	ldi	r25, 0xFE	; 254
    37c4:	a9 12       	cpse	r10, r25
    37c6:	0a c0       	rjmp	.+20     	; 0x37dc <strtod+0x144>
    37c8:	13 fd       	sbrc	r17, 3
    37ca:	40 c0       	rjmp	.+128    	; 0x384c <strtod+0x1b4>
    37cc:	18 60       	ori	r17, 0x08	; 8
    37ce:	b1 2e       	mov	r11, r17
    37d0:	8f ef       	ldi	r24, 0xFF	; 255
    37d2:	e8 1a       	sub	r14, r24
    37d4:	f8 0a       	sbc	r15, r24
    37d6:	00 81       	ld	r16, Z
    37d8:	1b 2d       	mov	r17, r11
    37da:	c6 cf       	rjmp	.-116    	; 0x3768 <strtod+0xd0>
    37dc:	80 2f       	mov	r24, r16
    37de:	8f 7d       	andi	r24, 0xDF	; 223
    37e0:	85 34       	cpi	r24, 0x45	; 69
    37e2:	a1 f5       	brne	.+104    	; 0x384c <strtod+0x1b4>
    37e4:	80 81       	ld	r24, Z
    37e6:	8d 32       	cpi	r24, 0x2D	; 45
    37e8:	11 f4       	brne	.+4      	; 0x37ee <strtod+0x156>
    37ea:	10 61       	ori	r17, 0x10	; 16
    37ec:	06 c0       	rjmp	.+12     	; 0x37fa <strtod+0x162>
    37ee:	8b 32       	cpi	r24, 0x2B	; 43
    37f0:	21 f0       	breq	.+8      	; 0x37fa <strtod+0x162>
    37f2:	31 96       	adiw	r30, 0x01	; 1
    37f4:	61 e0       	ldi	r22, 0x01	; 1
    37f6:	70 e0       	ldi	r23, 0x00	; 0
    37f8:	04 c0       	rjmp	.+8      	; 0x3802 <strtod+0x16a>
    37fa:	81 81       	ldd	r24, Z+1	; 0x01
    37fc:	32 96       	adiw	r30, 0x02	; 2
    37fe:	62 e0       	ldi	r22, 0x02	; 2
    3800:	70 e0       	ldi	r23, 0x00	; 0
    3802:	80 53       	subi	r24, 0x30	; 48
    3804:	8a 30       	cpi	r24, 0x0A	; 10
    3806:	18 f0       	brcs	.+6      	; 0x380e <strtod+0x176>
    3808:	e6 1b       	sub	r30, r22
    380a:	f7 0b       	sbc	r31, r23
    380c:	1f c0       	rjmp	.+62     	; 0x384c <strtod+0x1b4>
    380e:	60 e0       	ldi	r22, 0x00	; 0
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	60 38       	cpi	r22, 0x80	; 128
    3814:	9c e0       	ldi	r25, 0x0C	; 12
    3816:	79 07       	cpc	r23, r25
    3818:	5c f4       	brge	.+22     	; 0x3830 <strtod+0x198>
    381a:	db 01       	movw	r26, r22
    381c:	aa 0f       	add	r26, r26
    381e:	bb 1f       	adc	r27, r27
    3820:	aa 0f       	add	r26, r26
    3822:	bb 1f       	adc	r27, r27
    3824:	6a 0f       	add	r22, r26
    3826:	7b 1f       	adc	r23, r27
    3828:	66 0f       	add	r22, r22
    382a:	77 1f       	adc	r23, r23
    382c:	68 0f       	add	r22, r24
    382e:	71 1d       	adc	r23, r1
    3830:	31 96       	adiw	r30, 0x01	; 1
    3832:	df 01       	movw	r26, r30
    3834:	11 97       	sbiw	r26, 0x01	; 1
    3836:	8c 91       	ld	r24, X
    3838:	80 53       	subi	r24, 0x30	; 48
    383a:	8a 30       	cpi	r24, 0x0A	; 10
    383c:	50 f3       	brcs	.-44     	; 0x3812 <strtod+0x17a>
    383e:	14 ff       	sbrs	r17, 4
    3840:	03 c0       	rjmp	.+6      	; 0x3848 <strtod+0x1b0>
    3842:	71 95       	neg	r23
    3844:	61 95       	neg	r22
    3846:	71 09       	sbc	r23, r1
    3848:	c6 0f       	add	r28, r22
    384a:	d7 1f       	adc	r29, r23
    384c:	11 ff       	sbrs	r17, 1
    384e:	08 c0       	rjmp	.+16     	; 0x3860 <strtod+0x1c8>
    3850:	c1 14       	cp	r12, r1
    3852:	d1 04       	cpc	r13, r1
    3854:	29 f0       	breq	.+10     	; 0x3860 <strtod+0x1c8>
    3856:	cf 01       	movw	r24, r30
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f6 01       	movw	r30, r12
    385c:	80 83       	st	Z, r24
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	ca 01       	movw	r24, r20
    3862:	b9 01       	movw	r22, r18
    3864:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
    3868:	21 2f       	mov	r18, r17
    386a:	23 70       	andi	r18, 0x03	; 3
    386c:	23 30       	cpi	r18, 0x03	; 3
    386e:	19 f0       	breq	.+6      	; 0x3876 <strtod+0x1de>
    3870:	4b 01       	movw	r8, r22
    3872:	5c 01       	movw	r10, r24
    3874:	06 c0       	rjmp	.+12     	; 0x3882 <strtod+0x1ea>
    3876:	4b 01       	movw	r8, r22
    3878:	5c 01       	movw	r10, r24
    387a:	b7 fa       	bst	r11, 7
    387c:	b0 94       	com	r11
    387e:	b7 f8       	bld	r11, 7
    3880:	b0 94       	com	r11
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	a9 01       	movw	r20, r18
    3888:	c5 01       	movw	r24, r10
    388a:	b4 01       	movw	r22, r8
    388c:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    3890:	88 23       	and	r24, r24
    3892:	09 f4       	brne	.+2      	; 0x3896 <strtod+0x1fe>
    3894:	3e c0       	rjmp	.+124    	; 0x3912 <strtod+0x27a>
    3896:	d7 ff       	sbrs	r29, 7
    3898:	06 c0       	rjmp	.+12     	; 0x38a6 <strtod+0x20e>
    389a:	d1 95       	neg	r29
    389c:	c1 95       	neg	r28
    389e:	d1 09       	sbc	r29, r1
    38a0:	0d e9       	ldi	r16, 0x9D	; 157
    38a2:	11 e0       	ldi	r17, 0x01	; 1
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <strtod+0x212>
    38a6:	05 eb       	ldi	r16, 0xB5	; 181
    38a8:	11 e0       	ldi	r17, 0x01	; 1
    38aa:	68 01       	movw	r12, r16
    38ac:	f8 e1       	ldi	r31, 0x18	; 24
    38ae:	cf 1a       	sub	r12, r31
    38b0:	d1 08       	sbc	r13, r1
    38b2:	90 e2       	ldi	r25, 0x20	; 32
    38b4:	e9 2e       	mov	r14, r25
    38b6:	f1 2c       	mov	r15, r1
    38b8:	ce 15       	cp	r28, r14
    38ba:	df 05       	cpc	r29, r15
    38bc:	74 f0       	brlt	.+28     	; 0x38da <strtod+0x242>
    38be:	f8 01       	movw	r30, r16
    38c0:	25 91       	lpm	r18, Z+
    38c2:	35 91       	lpm	r19, Z+
    38c4:	45 91       	lpm	r20, Z+
    38c6:	54 91       	lpm	r21, Z
    38c8:	c5 01       	movw	r24, r10
    38ca:	b4 01       	movw	r22, r8
    38cc:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
    38d0:	4b 01       	movw	r8, r22
    38d2:	5c 01       	movw	r10, r24
    38d4:	ce 19       	sub	r28, r14
    38d6:	df 09       	sbc	r29, r15
    38d8:	ef cf       	rjmp	.-34     	; 0x38b8 <strtod+0x220>
    38da:	04 50       	subi	r16, 0x04	; 4
    38dc:	11 09       	sbc	r17, r1
    38de:	f5 94       	asr	r15
    38e0:	e7 94       	ror	r14
    38e2:	0c 15       	cp	r16, r12
    38e4:	1d 05       	cpc	r17, r13
    38e6:	41 f7       	brne	.-48     	; 0x38b8 <strtod+0x220>
    38e8:	8a 2d       	mov	r24, r10
    38ea:	88 0f       	add	r24, r24
    38ec:	8b 2d       	mov	r24, r11
    38ee:	88 1f       	adc	r24, r24
    38f0:	8f 3f       	cpi	r24, 0xFF	; 255
    38f2:	49 f0       	breq	.+18     	; 0x3906 <strtod+0x26e>
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	a9 01       	movw	r20, r18
    38fa:	c5 01       	movw	r24, r10
    38fc:	b4 01       	movw	r22, r8
    38fe:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    3902:	81 11       	cpse	r24, r1
    3904:	06 c0       	rjmp	.+12     	; 0x3912 <strtod+0x27a>
    3906:	82 e2       	ldi	r24, 0x22	; 34
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <errno>
    390e:	90 93 b9 3a 	sts	0x3AB9, r25	; 0x803ab9 <errno+0x1>
    3912:	c5 01       	movw	r24, r10
    3914:	b4 01       	movw	r22, r8
    3916:	09 c0       	rjmp	.+18     	; 0x392a <strtod+0x292>
    3918:	60 e0       	ldi	r22, 0x00	; 0
    391a:	70 e0       	ldi	r23, 0x00	; 0
    391c:	80 e8       	ldi	r24, 0x80	; 128
    391e:	9f ef       	ldi	r25, 0xFF	; 255
    3920:	04 c0       	rjmp	.+8      	; 0x392a <strtod+0x292>
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	80 ec       	ldi	r24, 0xC0	; 192
    3928:	9f e7       	ldi	r25, 0x7F	; 127
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	ec e0       	ldi	r30, 0x0C	; 12
    3930:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__epilogue_restores__+0xc>

00003934 <isspace>:
    3934:	91 11       	cpse	r25, r1
    3936:	0c 94 bb 1c 	jmp	0x3976	; 0x3976 <__ctype_isfalse>
    393a:	80 32       	cpi	r24, 0x20	; 32
    393c:	19 f0       	breq	.+6      	; 0x3944 <isspace+0x10>
    393e:	89 50       	subi	r24, 0x09	; 9
    3940:	85 50       	subi	r24, 0x05	; 5
    3942:	c8 f7       	brcc	.-14     	; 0x3936 <isspace+0x2>
    3944:	08 95       	ret

00003946 <strncasecmp_P>:
    3946:	fb 01       	movw	r30, r22
    3948:	dc 01       	movw	r26, r24
    394a:	41 50       	subi	r20, 0x01	; 1
    394c:	50 40       	sbci	r21, 0x00	; 0
    394e:	88 f0       	brcs	.+34     	; 0x3972 <strncasecmp_P+0x2c>
    3950:	8d 91       	ld	r24, X+
    3952:	81 34       	cpi	r24, 0x41	; 65
    3954:	1c f0       	brlt	.+6      	; 0x395c <strncasecmp_P+0x16>
    3956:	8b 35       	cpi	r24, 0x5B	; 91
    3958:	0c f4       	brge	.+2      	; 0x395c <strncasecmp_P+0x16>
    395a:	80 5e       	subi	r24, 0xE0	; 224
    395c:	65 91       	lpm	r22, Z+
    395e:	61 34       	cpi	r22, 0x41	; 65
    3960:	1c f0       	brlt	.+6      	; 0x3968 <strncasecmp_P+0x22>
    3962:	6b 35       	cpi	r22, 0x5B	; 91
    3964:	0c f4       	brge	.+2      	; 0x3968 <strncasecmp_P+0x22>
    3966:	60 5e       	subi	r22, 0xE0	; 224
    3968:	86 1b       	sub	r24, r22
    396a:	61 11       	cpse	r22, r1
    396c:	71 f3       	breq	.-36     	; 0x394a <strncasecmp_P+0x4>
    396e:	99 0b       	sbc	r25, r25
    3970:	08 95       	ret
    3972:	88 1b       	sub	r24, r24
    3974:	fc cf       	rjmp	.-8      	; 0x396e <strncasecmp_P+0x28>

00003976 <__ctype_isfalse>:
    3976:	99 27       	eor	r25, r25
    3978:	88 27       	eor	r24, r24

0000397a <__ctype_istrue>:
    397a:	08 95       	ret

0000397c <__muluhisi3>:
    397c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    3980:	a5 9f       	mul	r26, r21
    3982:	90 0d       	add	r25, r0
    3984:	b4 9f       	mul	r27, r20
    3986:	90 0d       	add	r25, r0
    3988:	a4 9f       	mul	r26, r20
    398a:	80 0d       	add	r24, r0
    398c:	91 1d       	adc	r25, r1
    398e:	11 24       	eor	r1, r1
    3990:	08 95       	ret

00003992 <__umulhisi3>:
    3992:	a2 9f       	mul	r26, r18
    3994:	b0 01       	movw	r22, r0
    3996:	b3 9f       	mul	r27, r19
    3998:	c0 01       	movw	r24, r0
    399a:	a3 9f       	mul	r26, r19
    399c:	70 0d       	add	r23, r0
    399e:	81 1d       	adc	r24, r1
    39a0:	11 24       	eor	r1, r1
    39a2:	91 1d       	adc	r25, r1
    39a4:	b2 9f       	mul	r27, r18
    39a6:	70 0d       	add	r23, r0
    39a8:	81 1d       	adc	r24, r1
    39aa:	11 24       	eor	r1, r1
    39ac:	91 1d       	adc	r25, r1
    39ae:	08 95       	ret

000039b0 <_exit>:
    39b0:	f8 94       	cli

000039b2 <__stop_program>:
    39b2:	ff cf       	rjmp	.-2      	; 0x39b2 <__stop_program>
