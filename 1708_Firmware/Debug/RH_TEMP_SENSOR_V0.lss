
RH_TEMP_SENSOR_V0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00803800  00003569  0000361d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003528  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000041  0000b528  00003528  000035dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000ea  0080380e  0080380e  0000362b  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000362b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003688  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000150  00000000  00000000  000036c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003f82  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002031  00000000  00000000  0000779a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000018b1  00000000  00000000  000097cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000051c  00000000  00000000  0000b07c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000163c  00000000  00000000  0000b598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c52  00000000  00000000  0000cbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  0000e826  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__ctors_end>
       4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      14:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      18:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      30:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      40:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      4c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      64:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__vector_25>
      68:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      6c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      70:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      78:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	6e 61       	ori	r22, 0x1E	; 30
      7e:	6e 00       	.word	0x006e	; ????

00000080 <__c.2332>:
      80:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      90:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      a0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      b0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      c0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      d0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      e0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      f0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     100:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     110:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     120:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     130:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     140:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     150:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     160:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     170:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000017e <pstr_nan>:
     17e:	4e 41 4e                                            NAN

00000181 <pstr_inity>:
     181:	49 4e 49 54 59                                      INITY

00000186 <pstr_inf>:
     186:	49 4e 46                                            INF

00000189 <pwr_m10>:
     189:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     199:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001a1 <pwr_p10>:
     1a1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1b1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000001ba <__ctors_end>:
     1ba:	11 24       	eor	r1, r1
     1bc:	1f be       	out	0x3f, r1	; 63
     1be:	cf ef       	ldi	r28, 0xFF	; 255
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df e3       	ldi	r29, 0x3F	; 63
     1c4:	de bf       	out	0x3e, r29	; 62

000001c6 <__do_copy_data>:
     1c6:	18 e3       	ldi	r17, 0x38	; 56
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	b8 e3       	ldi	r27, 0x38	; 56
     1cc:	e9 e6       	ldi	r30, 0x69	; 105
     1ce:	f5 e3       	ldi	r31, 0x35	; 53
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__do_copy_data+0x10>
     1d2:	05 90       	lpm	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	ae 30       	cpi	r26, 0x0E	; 14
     1d8:	b1 07       	cpc	r27, r17
     1da:	d9 f7       	brne	.-10     	; 0x1d2 <__do_copy_data+0xc>

000001dc <__do_clear_bss>:
     1dc:	28 e3       	ldi	r18, 0x38	; 56
     1de:	ae e0       	ldi	r26, 0x0E	; 14
     1e0:	b8 e3       	ldi	r27, 0x38	; 56
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <.do_clear_bss_start>

000001e4 <.do_clear_bss_loop>:
     1e4:	1d 92       	st	X+, r1

000001e6 <.do_clear_bss_start>:
     1e6:	a8 3f       	cpi	r26, 0xF8	; 248
     1e8:	b2 07       	cpc	r27, r18
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <.do_clear_bss_loop>
     1ec:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <main>
     1f0:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <_exit>

000001f4 <__bad_interrupt>:
     1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f8 <EEPROM_read>:
	"RS",
	"SU"
};

unsigned char EEPROM_read(unsigned int ucAddress)
{
     1f8:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     1fa:	e0 e0       	ldi	r30, 0x00	; 0
     1fc:	f0 e1       	ldi	r31, 0x10	; 16
     1fe:	92 81       	ldd	r25, Z+2	; 0x02
     200:	91 fd       	sbrc	r25, 1
     202:	fd cf       	rjmp	.-6      	; 0x1fe <EEPROM_read+0x6>

	return *(uint8_t *)(EEPROM_START + ucAddress);
     204:	f9 01       	movw	r30, r18
     206:	fc 5e       	subi	r31, 0xEC	; 236
}
     208:	80 81       	ld	r24, Z
     20a:	08 95       	ret

0000020c <EEPROM_write>:

void EEPROM_write(unsigned int ucAddress, unsigned char ucData)
{
     20c:	9c 01       	movw	r18, r24

	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     20e:	e0 e0       	ldi	r30, 0x00	; 0
     210:	f0 e1       	ldi	r31, 0x10	; 16
     212:	92 81       	ldd	r25, Z+2	; 0x02
     214:	91 fd       	sbrc	r25, 1
     216:	fd cf       	rjmp	.-6      	; 0x212 <EEPROM_write+0x6>

	*(uint8_t *)(EEPROM_START + ucAddress) = ucData;
     218:	f9 01       	movw	r30, r18
     21a:	fc 5e       	subi	r31, 0xEC	; 236
     21c:	60 83       	st	Z, r22

	CCP = CCP_SPM_gc;
     21e:	8d e9       	ldi	r24, 0x9D	; 157
     220:	84 bf       	out	0x34, r24	; 52
	NVMCTRL.CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     228:	08 95       	ret

0000022a <init_i2c>:
}

void init_i2c() {
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	1f 92       	push	r1
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62

	PORTMUX_CTRLB |= PORTMUX_TWI0_ALTERNATE_gc;
     234:	e1 e0       	ldi	r30, 0x01	; 1
     236:	f2 e0       	ldi	r31, 0x02	; 2
     238:	80 81       	ld	r24, Z
     23a:	80 61       	ori	r24, 0x10	; 16
     23c:	80 83       	st	Z, r24

	volatile uint8_t baud_rate = (CLK_PER/(2*TWI_BAUDRATE) - 5);
     23e:	8b e0       	ldi	r24, 0x0B	; 11
     240:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_MasterInit(&twi_master, &TWI0, (TWI_RIEN_bm | TWI_WIEN_bm), baud_rate);
     242:	29 81       	ldd	r18, Y+1	; 0x01
     244:	40 ec       	ldi	r20, 0xC0	; 192
     246:	60 e1       	ldi	r22, 0x10	; 16
     248:	78 e0       	ldi	r23, 0x08	; 8
     24a:	8c ec       	ldi	r24, 0xCC	; 204
     24c:	98 e3       	ldi	r25, 0x38	; 56
     24e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <TWI_MasterInit>
	
	sei(); 
     252:	78 94       	sei
}
     254:	0f 90       	pop	r0
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <read_temp_rh>:


void read_temp_rh(float *temp_out, float *rh_out)
{
     25c:	4f 92       	push	r4
     25e:	5f 92       	push	r5
     260:	6f 92       	push	r6
     262:	7f 92       	push	r7
     264:	8f 92       	push	r8
     266:	9f 92       	push	r9
     268:	af 92       	push	r10
     26a:	bf 92       	push	r11
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	5c 01       	movw	r10, r24
     27e:	4b 01       	movw	r8, r22
	data_buf[0] = SHT3X_MEAS_HIGHREP_STRETCH >> 8;
     280:	e3 e8       	ldi	r30, 0x83	; 131
     282:	f8 e3       	ldi	r31, 0x38	; 56
     284:	8c e2       	ldi	r24, 0x2C	; 44
     286:	80 83       	st	Z, r24
	data_buf[1] = (uint8_t)SHT3X_MEAS_HIGHREP_STRETCH;
     288:	86 e0       	ldi	r24, 0x06	; 6
     28a:	81 83       	std	Z+1, r24	; 0x01
	
	TWI_MasterWrite(&twi_master, SHT3X_DEFAULT_ADDR, data_buf, 2);
     28c:	22 e0       	ldi	r18, 0x02	; 2
     28e:	af 01       	movw	r20, r30
     290:	64 e4       	ldi	r22, 0x44	; 68
     292:	8c ec       	ldi	r24, 0xCC	; 204
     294:	98 e3       	ldi	r25, 0x38	; 56
     296:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <TWI_MasterWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     29a:	8a e1       	ldi	r24, 0x1A	; 26
     29c:	91 e4       	ldi	r25, 0x41	; 65
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <read_temp_rh+0x42>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <read_temp_rh+0x48>
	
	_delay_ms(20);
	
	TWI_MasterRead(&twi_master, SHT3X_DEFAULT_ADDR, 6);
     2a4:	46 e0       	ldi	r20, 0x06	; 6
     2a6:	64 e4       	ldi	r22, 0x44	; 68
     2a8:	8c ec       	ldi	r24, 0xCC	; 204
     2aa:	98 e3       	ldi	r25, 0x38	; 56
     2ac:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <TWI_MasterRead>
     2b0:	ed e8       	ldi	r30, 0x8D	; 141
     2b2:	f0 e2       	ldi	r31, 0x20	; 32
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <read_temp_rh+0x58>
     2b8:	00 00       	nop
     2ba:	03 e0       	ldi	r16, 0x03	; 3
     2bc:	10 e0       	ldi	r17, 0x00	; 0
	float temp = 0;
	float hum = 0;
	uint16_t tmp_rd = 0;
	uint16_t hum_rd = 0;
	float cTempTotal = 0;
	float cHumTotal = 0;
     2be:	c1 2c       	mov	r12, r1
     2c0:	d1 2c       	mov	r13, r1
     2c2:	76 01       	movw	r14, r12
	// average 3 readings
	float temp = 0;
	float hum = 0;
	uint16_t tmp_rd = 0;
	uint16_t hum_rd = 0;
	float cTempTotal = 0;
     2c4:	26 01       	movw	r4, r12
     2c6:	37 01       	movw	r6, r14
	float cHumTotal = 0;
	for(int i = 0; i < 3; i++)
	{
		TWI_MasterWrite(&twi_master, SHT3X_DEFAULT_ADDR, data_buf, 2);
     2c8:	22 e0       	ldi	r18, 0x02	; 2
     2ca:	43 e8       	ldi	r20, 0x83	; 131
     2cc:	58 e3       	ldi	r21, 0x38	; 56
     2ce:	64 e4       	ldi	r22, 0x44	; 68
     2d0:	8c ec       	ldi	r24, 0xCC	; 204
     2d2:	98 e3       	ldi	r25, 0x38	; 56
     2d4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <TWI_MasterWrite>
     2d8:	8a e1       	ldi	r24, 0x1A	; 26
     2da:	91 e4       	ldi	r25, 0x41	; 65
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <read_temp_rh+0x80>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <read_temp_rh+0x86>
		
		_delay_ms(20);
		
		TWI_MasterRead(&twi_master, SHT3X_DEFAULT_ADDR, 6);
     2e2:	46 e0       	ldi	r20, 0x06	; 6
     2e4:	64 e4       	ldi	r22, 0x44	; 68
     2e6:	8c ec       	ldi	r24, 0xCC	; 204
     2e8:	98 e3       	ldi	r25, 0x38	; 56
     2ea:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <TWI_MasterRead>
     2ee:	ed e8       	ldi	r30, 0x8D	; 141
     2f0:	f0 e2       	ldi	r31, 0x20	; 32
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <read_temp_rh+0x96>
     2f6:	00 00       	nop
		
		_delay_ms(10);
		
		tmp_rd = (twi_master.readData[0] * 256) + twi_master.readData[1];
     2f8:	cc ec       	ldi	r28, 0xCC	; 204
     2fa:	d8 e3       	ldi	r29, 0x38	; 56
     2fc:	6c 89       	ldd	r22, Y+20	; 0x14
     2fe:	8d 89       	ldd	r24, Y+21	; 0x15
		temp = (float)tmp_rd;
		cTempTotal += -45.0 + (175.0 * temp / 65535.0);
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	76 2f       	mov	r23, r22
     304:	66 27       	eor	r22, r22
     306:	68 0f       	add	r22, r24
     308:	71 1d       	adc	r23, r1
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 4e 12 	call	0x249c	; 0x249c <__floatunsisf>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	4f e2       	ldi	r20, 0x2F	; 47
     318:	53 e4       	ldi	r21, 0x43	; 67
     31a:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	3f ef       	ldi	r19, 0xFF	; 255
     322:	4f e7       	ldi	r20, 0x7F	; 127
     324:	57 e4       	ldi	r21, 0x47	; 71
     326:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divsf3>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	44 e3       	ldi	r20, 0x34	; 52
     330:	52 e4       	ldi	r21, 0x42	; 66
     332:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__subsf3>
     336:	9b 01       	movw	r18, r22
     338:	ac 01       	movw	r20, r24
     33a:	c3 01       	movw	r24, r6
     33c:	b2 01       	movw	r22, r4
     33e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__addsf3>
     342:	2b 01       	movw	r4, r22
     344:	3c 01       	movw	r6, r24
		hum_rd = (twi_master.readData[3] * 256) + twi_master.readData[4];
     346:	6f 89       	ldd	r22, Y+23	; 0x17
     348:	88 8d       	ldd	r24, Y+24	; 0x18
		hum = (float)hum_rd;
		cHumTotal += (100.0 * hum) / 65535.0;
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	76 2f       	mov	r23, r22
     34e:	66 27       	eor	r22, r22
     350:	68 0f       	add	r22, r24
     352:	71 1d       	adc	r23, r1
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 4e 12 	call	0x249c	; 0x249c <__floatunsisf>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	48 ec       	ldi	r20, 0xC8	; 200
     362:	52 e4       	ldi	r21, 0x42	; 66
     364:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	3f ef       	ldi	r19, 0xFF	; 255
     36c:	4f e7       	ldi	r20, 0x7F	; 127
     36e:	57 e4       	ldi	r21, 0x47	; 71
     370:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divsf3>
     374:	9b 01       	movw	r18, r22
     376:	ac 01       	movw	r20, r24
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__addsf3>
     380:	6b 01       	movw	r12, r22
     382:	7c 01       	movw	r14, r24
     384:	01 50       	subi	r16, 0x01	; 1
     386:	11 09       	sbc	r17, r1
	float hum = 0;
	uint16_t tmp_rd = 0;
	uint16_t hum_rd = 0;
	float cTempTotal = 0;
	float cHumTotal = 0;
	for(int i = 0; i < 3; i++)
     388:	09 f0       	breq	.+2      	; 0x38c <read_temp_rh+0x130>
     38a:	9e cf       	rjmp	.-196    	; 0x2c8 <read_temp_rh+0x6c>
		hum = (float)hum_rd;
		cHumTotal += (100.0 * hum) / 65535.0;
		
	}

	(*temp_out) = cTempTotal / 3.0;
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 e4       	ldi	r20, 0x40	; 64
     392:	50 e4       	ldi	r21, 0x40	; 64
     394:	c3 01       	movw	r24, r6
     396:	b2 01       	movw	r22, r4
     398:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divsf3>
     39c:	f5 01       	movw	r30, r10
     39e:	60 83       	st	Z, r22
     3a0:	71 83       	std	Z+1, r23	; 0x01
     3a2:	82 83       	std	Z+2, r24	; 0x02
     3a4:	93 83       	std	Z+3, r25	; 0x03
	(*rh_out) = cHumTotal / 3.0;
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e4       	ldi	r20, 0x40	; 64
     3ac:	50 e4       	ldi	r21, 0x40	; 64
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divsf3>
     3b6:	f4 01       	movw	r30, r8
     3b8:	60 83       	st	Z, r22
     3ba:	71 83       	std	Z+1, r23	; 0x01
     3bc:	82 83       	std	Z+2, r24	; 0x02
     3be:	93 83       	std	Z+3, r25	; 0x03
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	cf 90       	pop	r12
     3d0:	bf 90       	pop	r11
     3d2:	af 90       	pop	r10
     3d4:	9f 90       	pop	r9
     3d6:	8f 90       	pop	r8
     3d8:	7f 90       	pop	r7
     3da:	6f 90       	pop	r6
     3dc:	5f 90       	pop	r5
     3de:	4f 90       	pop	r4
     3e0:	08 95       	ret

000003e2 <read_temp>:


void read_temp(float *temp_out)
{
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	8c 01       	movw	r16, r24
	data_buf[0] = STS3X_MEAS_HIGHREP_STRETCH >> 8;
     3f4:	e3 e8       	ldi	r30, 0x83	; 131
     3f6:	f8 e3       	ldi	r31, 0x38	; 56
     3f8:	8c e2       	ldi	r24, 0x2C	; 44
     3fa:	80 83       	st	Z, r24
	data_buf[1] = (uint8_t)STS3X_MEAS_HIGHREP_STRETCH;
     3fc:	86 e0       	ldi	r24, 0x06	; 6
     3fe:	81 83       	std	Z+1, r24	; 0x01
	
	TWI_MasterWrite(&twi_master, STS3X_DEFAULT_ADDR, data_buf, 2);
     400:	22 e0       	ldi	r18, 0x02	; 2
     402:	af 01       	movw	r20, r30
     404:	6a e4       	ldi	r22, 0x4A	; 74
     406:	8c ec       	ldi	r24, 0xCC	; 204
     408:	98 e3       	ldi	r25, 0x38	; 56
     40a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <TWI_MasterWrite>
     40e:	8a e1       	ldi	r24, 0x1A	; 26
     410:	91 e4       	ldi	r25, 0x41	; 65
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	
	_delay_ms(20);
	
	TWI_MasterRead(&twi_master, STS3X_DEFAULT_ADDR, 3);
     418:	43 e0       	ldi	r20, 0x03	; 3
     41a:	6a e4       	ldi	r22, 0x4A	; 74
     41c:	8c ec       	ldi	r24, 0xCC	; 204
     41e:	98 e3       	ldi	r25, 0x38	; 56
     420:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <TWI_MasterRead>
     424:	ed e8       	ldi	r30, 0x8D	; 141
     426:	f0 e2       	ldi	r31, 0x20	; 32
     428:	31 97       	sbiw	r30, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     42c:	00 00       	nop
     42e:	c3 e0       	ldi	r28, 0x03	; 3
     430:	d0 e0       	ldi	r29, 0x00	; 0
	
	// discard first readings
	
	// average 3 readings
	float temp = 0;
	float cTempTotal = 0;
     432:	c1 2c       	mov	r12, r1
     434:	d1 2c       	mov	r13, r1
     436:	76 01       	movw	r14, r12
	uint16_t tmp_rd = 0;
	for(int i = 0; i < 3; i++)
	{
		TWI_MasterWrite(&twi_master, STS3X_DEFAULT_ADDR, data_buf, 2);
     438:	22 e0       	ldi	r18, 0x02	; 2
     43a:	43 e8       	ldi	r20, 0x83	; 131
     43c:	58 e3       	ldi	r21, 0x38	; 56
     43e:	6a e4       	ldi	r22, 0x4A	; 74
     440:	8c ec       	ldi	r24, 0xCC	; 204
     442:	98 e3       	ldi	r25, 0x38	; 56
     444:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <TWI_MasterWrite>
     448:	8a e1       	ldi	r24, 0x1A	; 26
     44a:	91 e4       	ldi	r25, 0x41	; 65
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		
		_delay_ms(20);
		
		TWI_MasterRead(&twi_master, STS3X_DEFAULT_ADDR, 3);
     452:	43 e0       	ldi	r20, 0x03	; 3
     454:	6a e4       	ldi	r22, 0x4A	; 74
     456:	8c ec       	ldi	r24, 0xCC	; 204
     458:	98 e3       	ldi	r25, 0x38	; 56
     45a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <TWI_MasterRead>
     45e:	ed e8       	ldi	r30, 0x8D	; 141
     460:	f0 e2       	ldi	r31, 0x20	; 32
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     466:	00 00       	nop

		_delay_ms(10);
		
		tmp_rd = (twi_master.readData[0] * 256) + twi_master.readData[1];
     468:	ec ec       	ldi	r30, 0xCC	; 204
     46a:	f8 e3       	ldi	r31, 0x38	; 56
     46c:	64 89       	ldd	r22, Z+20	; 0x14
     46e:	85 89       	ldd	r24, Z+21	; 0x15
		temp = (float)tmp_rd;
		cTempTotal += -45.0 + (175.0 * temp / 65535.0);
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	76 2f       	mov	r23, r22
     474:	66 27       	eor	r22, r22
     476:	68 0f       	add	r22, r24
     478:	71 1d       	adc	r23, r1
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 4e 12 	call	0x249c	; 0x249c <__floatunsisf>
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	4f e2       	ldi	r20, 0x2F	; 47
     488:	53 e4       	ldi	r21, 0x43	; 67
     48a:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	3f ef       	ldi	r19, 0xFF	; 255
     492:	4f e7       	ldi	r20, 0x7F	; 127
     494:	57 e4       	ldi	r21, 0x47	; 71
     496:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divsf3>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	44 e3       	ldi	r20, 0x34	; 52
     4a0:	52 e4       	ldi	r21, 0x42	; 66
     4a2:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__subsf3>
     4a6:	9b 01       	movw	r18, r22
     4a8:	ac 01       	movw	r20, r24
     4aa:	c7 01       	movw	r24, r14
     4ac:	b6 01       	movw	r22, r12
     4ae:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__addsf3>
     4b2:	6b 01       	movw	r12, r22
     4b4:	7c 01       	movw	r14, r24
     4b6:	21 97       	sbiw	r28, 0x01	; 1
	
	// average 3 readings
	float temp = 0;
	float cTempTotal = 0;
	uint16_t tmp_rd = 0;
	for(int i = 0; i < 3; i++)
     4b8:	09 f0       	breq	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	be cf       	rjmp	.-132    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		cTempTotal += -45.0 + (175.0 * temp / 65535.0);
	}
	
	cTempTotal /= 3.0;

	(*temp_out) = cTempTotal;
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e4       	ldi	r20, 0x40	; 64
     4c2:	50 e4       	ldi	r21, 0x40	; 64
     4c4:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divsf3>
     4c8:	f8 01       	movw	r30, r16
     4ca:	60 83       	st	Z, r22
     4cc:	71 83       	std	Z+1, r23	; 0x01
     4ce:	82 83       	std	Z+2, r24	; 0x02
     4d0:	93 83       	std	Z+3, r25	; 0x03
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	08 95       	ret

000004e4 <build_output>:

void build_output(float data)
{
	v--;
     4e4:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
     4e8:	21 50       	subi	r18, 0x01	; 1
     4ea:	20 93 17 38 	sts	0x3817, r18	; 0x803817 <v>
	write_enabled = 0;
     4ee:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+09.2f", data);
     4f2:	30 91 17 38 	lds	r19, 0x3817	; 0x803817 <v>
     4f6:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	7f 93       	push	r23
     500:	6f 93       	push	r22
     502:	88 e2       	ldi	r24, 0x28	; 40
     504:	95 eb       	ldi	r25, 0xB5	; 181
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	80 e4       	ldi	r24, 0x40	; 64
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	83 1b       	sub	r24, r19
     510:	91 09       	sbc	r25, r1
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	82 2f       	mov	r24, r18
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	88 5c       	subi	r24, 0xC8	; 200
     51c:	97 4c       	sbci	r25, 0xC7	; 199
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	0e 94 78 18 	call	0x30f0	; 0x30f0 <snprintf>
     526:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <fstr_size>
     52a:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <fstr_size+0x1>
	v += fstr_size;
     52e:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     532:	89 0f       	add	r24, r25
     534:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
	send_size = v;
     538:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
     542:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
	send_enable = 1;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <send_enable>
     54e:	90 93 14 38 	sts	0x3814, r25	; 0x803814 <send_enable+0x1>
}
     552:	8d b7       	in	r24, 0x3d	; 61
     554:	9e b7       	in	r25, 0x3e	; 62
     556:	0a 96       	adiw	r24, 0x0a	; 10
     558:	8d bf       	out	0x3d, r24	; 61
     55a:	9e bf       	out	0x3e, r25	; 62
     55c:	08 95       	ret

0000055e <build_cal_out_put>:

void build_cal_out_put(float a, float b, float c)
{
     55e:	8f 92       	push	r8
     560:	9f 92       	push	r9
     562:	af 92       	push	r10
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	b2 2e       	mov	r11, r18
     578:	a3 2e       	mov	r10, r19
     57a:	94 2e       	mov	r9, r20
     57c:	85 2e       	mov	r8, r21
	v--;
     57e:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
     582:	21 50       	subi	r18, 0x01	; 1
     584:	20 93 17 38 	sts	0x3817, r18	; 0x803817 <v>
	write_enabled = 0;
     588:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", a);
     58c:	30 91 17 38 	lds	r19, 0x3817	; 0x803817 <v>
     590:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	7f 93       	push	r23
     59a:	6f 93       	push	r22
     59c:	0f 2e       	mov	r0, r31
     59e:	f0 e3       	ldi	r31, 0x30	; 48
     5a0:	cf 2e       	mov	r12, r31
     5a2:	f5 eb       	ldi	r31, 0xB5	; 181
     5a4:	df 2e       	mov	r13, r31
     5a6:	f0 2d       	mov	r31, r0
     5a8:	df 92       	push	r13
     5aa:	cf 92       	push	r12
     5ac:	c0 e4       	ldi	r28, 0x40	; 64
     5ae:	d0 e0       	ldi	r29, 0x00	; 0
     5b0:	ce 01       	movw	r24, r28
     5b2:	83 1b       	sub	r24, r19
     5b4:	91 09       	sbc	r25, r1
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	82 2f       	mov	r24, r18
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	88 5c       	subi	r24, 0xC8	; 200
     5c0:	97 4c       	sbci	r25, 0xC7	; 199
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <snprintf>
     5ca:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <fstr_size>
     5ce:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <fstr_size+0x1>
	v += fstr_size;
     5d2:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     5d6:	89 0f       	add	r24, r25
     5d8:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", b);
     5dc:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     5e0:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
     5e4:	8f 92       	push	r8
     5e6:	9f 92       	push	r9
     5e8:	af 92       	push	r10
     5ea:	bf 92       	push	r11
     5ec:	df 92       	push	r13
     5ee:	cf 92       	push	r12
     5f0:	9e 01       	movw	r18, r28
     5f2:	29 1b       	sub	r18, r25
     5f4:	31 09       	sbc	r19, r1
     5f6:	3f 93       	push	r19
     5f8:	2f 93       	push	r18
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	88 5c       	subi	r24, 0xC8	; 200
     5fe:	97 4c       	sbci	r25, 0xC7	; 199
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	0e 94 78 18 	call	0x30f0	; 0x30f0 <snprintf>
     608:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <fstr_size>
     60c:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <fstr_size+0x1>
	v += fstr_size;
     610:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     614:	89 0f       	add	r24, r25
     616:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", c);
     61a:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     61e:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
     622:	1f 93       	push	r17
     624:	0f 93       	push	r16
     626:	ff 92       	push	r15
     628:	ef 92       	push	r14
     62a:	df 92       	push	r13
     62c:	cf 92       	push	r12
     62e:	c9 1b       	sub	r28, r25
     630:	d1 09       	sbc	r29, r1
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	88 5c       	subi	r24, 0xC8	; 200
     63a:	97 4c       	sbci	r25, 0xC7	; 199
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	0e 94 78 18 	call	0x30f0	; 0x30f0 <snprintf>
     644:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <fstr_size>
     648:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <fstr_size+0x1>
	v += fstr_size;
     64c:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     650:	89 0f       	add	r24, r25
     652:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
	send_size = v;
     656:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
     660:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
	send_enable = 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <send_enable>
     66c:	90 93 14 38 	sts	0x3814, r25	; 0x803814 <send_enable+0x1>
}
     670:	8d b7       	in	r24, 0x3d	; 61
     672:	9e b7       	in	r25, 0x3e	; 62
     674:	4e 96       	adiw	r24, 0x1e	; 30
     676:	8d bf       	out	0x3d, r24	; 61
     678:	9e bf       	out	0x3e, r25	; 62
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	bf 90       	pop	r11
     68c:	af 90       	pop	r10
     68e:	9f 90       	pop	r9
     690:	8f 90       	pop	r8
     692:	08 95       	ret

00000694 <write_temp_cal_eeprom>:

void write_temp_cal_eeprom()
{
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	04 e3       	ldi	r16, 0x34	; 52
     6a6:	18 e3       	ldi	r17, 0x38	; 56
     6a8:	78 01       	movw	r14, r16
     6aa:	c7 e0       	ldi	r28, 0x07	; 7
     6ac:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_a,sizeof(float));
     6ae:	0f 2e       	mov	r0, r31
     6b0:	f9 e9       	ldi	r31, 0x99	; 153
     6b2:	cf 2e       	mov	r12, r31
     6b4:	f8 e3       	ldi	r31, 0x38	; 56
     6b6:	df 2e       	mov	r13, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	f6 01       	movw	r30, r12
     6bc:	80 81       	ld	r24, Z
     6be:	91 81       	ldd	r25, Z+1	; 0x01
     6c0:	a2 81       	ldd	r26, Z+2	; 0x02
     6c2:	b3 81       	ldd	r27, Z+3	; 0x03
     6c4:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <tmp>
     6c8:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <tmp+0x1>
     6cc:	a0 93 36 38 	sts	0x3836, r26	; 0x803836 <tmp+0x2>
     6d0:	b0 93 37 38 	sts	0x3837, r27	; 0x803837 <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + i, tmp[i]);
     6d4:	f7 01       	movw	r30, r14
     6d6:	61 91       	ld	r22, Z+
     6d8:	7f 01       	movw	r14, r30
     6da:	ce 01       	movw	r24, r28
     6dc:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
     6e0:	21 96       	adiw	r28, 0x01	; 1

void write_temp_cal_eeprom()
{
	int i;
	
	for(i = 0; i < sizeof(float); i++)
     6e2:	cb 30       	cpi	r28, 0x0B	; 11
     6e4:	d1 05       	cpc	r29, r1
     6e6:	49 f7       	brne	.-46     	; 0x6ba <write_temp_cal_eeprom+0x26>
     6e8:	0f 2e       	mov	r0, r31
     6ea:	f4 e3       	ldi	r31, 0x34	; 52
     6ec:	ef 2e       	mov	r14, r31
     6ee:	f8 e3       	ldi	r31, 0x38	; 56
     6f0:	ff 2e       	mov	r15, r31
     6f2:	f0 2d       	mov	r31, r0
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_b,sizeof(float));
     6f4:	0f 2e       	mov	r0, r31
     6f6:	fa ea       	ldi	r31, 0xAA	; 170
     6f8:	cf 2e       	mov	r12, r31
     6fa:	f8 e3       	ldi	r31, 0x38	; 56
     6fc:	df 2e       	mov	r13, r31
     6fe:	f0 2d       	mov	r31, r0
     700:	f6 01       	movw	r30, r12
     702:	80 81       	ld	r24, Z
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	a2 81       	ldd	r26, Z+2	; 0x02
     708:	b3 81       	ldd	r27, Z+3	; 0x03
     70a:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <tmp>
     70e:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <tmp+0x1>
     712:	a0 93 36 38 	sts	0x3836, r26	; 0x803836 <tmp+0x2>
     716:	b0 93 37 38 	sts	0x3837, r27	; 0x803837 <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + sizeof(float) + i, tmp[i]);
     71a:	f7 01       	movw	r30, r14
     71c:	61 91       	ld	r22, Z+
     71e:	7f 01       	movw	r14, r30
     720:	ce 01       	movw	r24, r28
     722:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
     726:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_a,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     728:	cf 30       	cpi	r28, 0x0F	; 15
     72a:	d1 05       	cpc	r29, r1
     72c:	49 f7       	brne	.-46     	; 0x700 <write_temp_cal_eeprom+0x6c>
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_c,sizeof(float));
     72e:	0f 2e       	mov	r0, r31
     730:	f0 e3       	ldi	r31, 0x30	; 48
     732:	ef 2e       	mov	r14, r31
     734:	f8 e3       	ldi	r31, 0x38	; 56
     736:	ff 2e       	mov	r15, r31
     738:	f0 2d       	mov	r31, r0
     73a:	f7 01       	movw	r30, r14
     73c:	80 81       	ld	r24, Z
     73e:	91 81       	ldd	r25, Z+1	; 0x01
     740:	a2 81       	ldd	r26, Z+2	; 0x02
     742:	b3 81       	ldd	r27, Z+3	; 0x03
     744:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <tmp>
     748:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <tmp+0x1>
     74c:	a0 93 36 38 	sts	0x3836, r26	; 0x803836 <tmp+0x2>
     750:	b0 93 37 38 	sts	0x3837, r27	; 0x803837 <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
     754:	f8 01       	movw	r30, r16
     756:	61 91       	ld	r22, Z+
     758:	8f 01       	movw	r16, r30
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
     760:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_b,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + sizeof(float) + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     762:	c3 31       	cpi	r28, 0x13	; 19
     764:	d1 05       	cpc	r29, r1
     766:	49 f7       	brne	.-46     	; 0x73a <write_temp_cal_eeprom+0xa6>
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_c,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
	}
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	08 95       	ret

0000077a <write_rh_cal_eeprom>:

void write_rh_cal_eeprom()
{
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	04 e3       	ldi	r16, 0x34	; 52
     78c:	18 e3       	ldi	r17, 0x38	; 56
     78e:	78 01       	movw	r14, r16
     790:	c3 e1       	ldi	r28, 0x13	; 19
     792:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_d,sizeof(float));
     794:	0f 2e       	mov	r0, r31
     796:	ff e7       	ldi	r31, 0x7F	; 127
     798:	cf 2e       	mov	r12, r31
     79a:	f8 e3       	ldi	r31, 0x38	; 56
     79c:	df 2e       	mov	r13, r31
     79e:	f0 2d       	mov	r31, r0
     7a0:	f6 01       	movw	r30, r12
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	a2 81       	ldd	r26, Z+2	; 0x02
     7a8:	b3 81       	ldd	r27, Z+3	; 0x03
     7aa:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <tmp>
     7ae:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <tmp+0x1>
     7b2:	a0 93 36 38 	sts	0x3836, r26	; 0x803836 <tmp+0x2>
     7b6:	b0 93 37 38 	sts	0x3837, r27	; 0x803837 <tmp+0x3>
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + i, tmp[i]);
     7ba:	f7 01       	movw	r30, r14
     7bc:	61 91       	ld	r22, Z+
     7be:	7f 01       	movw	r14, r30
     7c0:	ce 01       	movw	r24, r28
     7c2:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
     7c6:	21 96       	adiw	r28, 0x01	; 1

void write_rh_cal_eeprom()
{
	int i;
	
	for(i = 0; i < sizeof(float); i++)
     7c8:	c7 31       	cpi	r28, 0x17	; 23
     7ca:	d1 05       	cpc	r29, r1
     7cc:	49 f7       	brne	.-46     	; 0x7a0 <write_rh_cal_eeprom+0x26>
     7ce:	0f 2e       	mov	r0, r31
     7d0:	f4 e3       	ldi	r31, 0x34	; 52
     7d2:	ef 2e       	mov	r14, r31
     7d4:	f8 e3       	ldi	r31, 0x38	; 56
     7d6:	ff 2e       	mov	r15, r31
     7d8:	f0 2d       	mov	r31, r0
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_e,sizeof(float));
     7da:	0f 2e       	mov	r0, r31
     7dc:	f5 e9       	ldi	r31, 0x95	; 149
     7de:	cf 2e       	mov	r12, r31
     7e0:	f8 e3       	ldi	r31, 0x38	; 56
     7e2:	df 2e       	mov	r13, r31
     7e4:	f0 2d       	mov	r31, r0
     7e6:	f6 01       	movw	r30, r12
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	a2 81       	ldd	r26, Z+2	; 0x02
     7ee:	b3 81       	ldd	r27, Z+3	; 0x03
     7f0:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <tmp>
     7f4:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <tmp+0x1>
     7f8:	a0 93 36 38 	sts	0x3836, r26	; 0x803836 <tmp+0x2>
     7fc:	b0 93 37 38 	sts	0x3837, r27	; 0x803837 <tmp+0x3>
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + sizeof(float) + i, tmp[i]);
     800:	f7 01       	movw	r30, r14
     802:	61 91       	ld	r22, Z+
     804:	7f 01       	movw	r14, r30
     806:	ce 01       	movw	r24, r28
     808:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
     80c:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_d,sizeof(float));
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     80e:	cb 31       	cpi	r28, 0x1B	; 27
     810:	d1 05       	cpc	r29, r1
     812:	49 f7       	brne	.-46     	; 0x7e6 <write_rh_cal_eeprom+0x6c>
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_f,sizeof(float));
     814:	0f 2e       	mov	r0, r31
     816:	f8 ec       	ldi	r31, 0xC8	; 200
     818:	ef 2e       	mov	r14, r31
     81a:	f8 e3       	ldi	r31, 0x38	; 56
     81c:	ff 2e       	mov	r15, r31
     81e:	f0 2d       	mov	r31, r0
     820:	f7 01       	movw	r30, r14
     822:	80 81       	ld	r24, Z
     824:	91 81       	ldd	r25, Z+1	; 0x01
     826:	a2 81       	ldd	r26, Z+2	; 0x02
     828:	b3 81       	ldd	r27, Z+3	; 0x03
     82a:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <tmp>
     82e:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <tmp+0x1>
     832:	a0 93 36 38 	sts	0x3836, r26	; 0x803836 <tmp+0x2>
     836:	b0 93 37 38 	sts	0x3837, r27	; 0x803837 <tmp+0x3>
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
     83a:	f8 01       	movw	r30, r16
     83c:	61 91       	ld	r22, Z+
     83e:	8f 01       	movw	r16, r30
     840:	ce 01       	movw	r24, r28
     842:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
     846:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_e,sizeof(float));
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + sizeof(float) + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     848:	cf 31       	cpi	r28, 0x1F	; 31
     84a:	d1 05       	cpc	r29, r1
     84c:	49 f7       	brne	.-46     	; 0x820 <write_rh_cal_eeprom+0xa6>
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_f,sizeof(float));
		EEPROM_write(EEPROM_CAL_HUM_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
	}
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <uart_handle>:

void uart_handle(uint8_t rev) {
     860:	8f 92       	push	r8
     862:	9f 92       	push	r9
     864:	af 92       	push	r10
     866:	bf 92       	push	r11
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29

	if (rev == '#' && v == 0)
     878:	83 32       	cpi	r24, 0x23	; 35
     87a:	b9 f4       	brne	.+46     	; 0x8aa <uart_handle+0x4a>
     87c:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     880:	91 11       	cpse	r25, r1
     882:	13 c0       	rjmp	.+38     	; 0x8aa <uart_handle+0x4a>
	{
		v = 1;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
		memset(recv,0,sizeof(recv));
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	e8 e3       	ldi	r30, 0x38	; 56
     88e:	f8 e3       	ldi	r31, 0x38	; 56
     890:	df 01       	movw	r26, r30
     892:	1d 92       	st	X+, r1
     894:	8a 95       	dec	r24
     896:	e9 f7       	brne	.-6      	; 0x892 <uart_handle+0x32>
		recv[v - 1] = rev;
     898:	e0 91 17 38 	lds	r30, 0x3817	; 0x803817 <v>
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	e9 5c       	subi	r30, 0xC9	; 201
     8a0:	f7 4c       	sbci	r31, 0xC7	; 199
     8a2:	83 e2       	ldi	r24, 0x23	; 35
     8a4:	80 83       	st	Z, r24
     8a6:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <uart_handle+0x11d2>
	}
	else if (v > 0) {
     8aa:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     8ae:	99 23       	and	r25, r25
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <uart_handle+0x54>
     8b2:	d3 c6       	rjmp	.+3494   	; 0x165a <uart_handle+0xdfa>
		recv[v] = rev;
     8b4:	e0 91 17 38 	lds	r30, 0x3817	; 0x803817 <v>
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e8 5c       	subi	r30, 0xC8	; 200
     8bc:	f7 4c       	sbci	r31, 0xC7	; 199
     8be:	80 83       	st	Z, r24
		v++;
     8c0:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     8c4:	9f 5f       	subi	r25, 0xFF	; 255
     8c6:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <v>

		if (v >= MAX_BUFFER_SIZE)
     8ca:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <v>
     8ce:	90 34       	cpi	r25, 0x40	; 64
     8d0:	30 f0       	brcs	.+12     	; 0x8de <uart_handle+0x7e>
		{
			address_type = 0;
     8d2:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <address_type>
			v = 0;
     8d6:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <v>
			return;
     8da:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <uart_handle+0x11d2>
		}

		if (rev == 0x0d)
     8de:	8d 30       	cpi	r24, 0x0D	; 13
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <uart_handle+0x86>
     8e2:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <uart_handle+0x11d2>
		{
			if (recv[1] == single_primary_addr)
     8e6:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <recv+0x1>
     8ea:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <single_primary_addr>
     8ee:	89 13       	cpse	r24, r25
     8f0:	22 c0       	rjmp	.+68     	; 0x936 <uart_handle+0xd6>
			{
				address_type = 0x01;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
				address_length = SINGLE_ADDRESS_LEN;
     8f8:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
				
				if (recv[2] == TEMP_ADDR_BYTE) // a
     8fc:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <recv+0x2>
     900:	81 36       	cpi	r24, 0x61	; 97
     902:	31 f4       	brne	.+12     	; 0x910 <uart_handle+0xb0>
				{
					address_type = 0x02;
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = SINGLE_ADDRESS_LEN + 1;
     90a:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     90e:	85 c0       	rjmp	.+266    	; 0xa1a <uart_handle+0x1ba>
				}			
				else if (recv[2] == RH_ADDR_BYTE) // n
     910:	8e 36       	cpi	r24, 0x6E	; 110
     912:	39 f4       	brne	.+14     	; 0x922 <uart_handle+0xc2>
				{
					address_type = 0x03;
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = SINGLE_ADDRESS_LEN + 1;
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     920:	7c c0       	rjmp	.+248    	; 0xa1a <uart_handle+0x1ba>
				}
				else if (recv[2] == RH_TEMP_ADDR_BYTE) // m
     922:	8d 36       	cpi	r24, 0x6D	; 109
     924:	09 f0       	breq	.+2      	; 0x928 <uart_handle+0xc8>
     926:	79 c0       	rjmp	.+242    	; 0xa1a <uart_handle+0x1ba>
				{
					address_type = 0x04;
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = SINGLE_ADDRESS_LEN + 1;
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     934:	72 c0       	rjmp	.+228    	; 0xa1a <uart_handle+0x1ba>
				}
				
			}
			else if (recv[1] == single_temp_addr)
     936:	90 91 93 38 	lds	r25, 0x3893	; 0x803893 <single_temp_addr>
     93a:	89 13       	cpse	r24, r25
     93c:	07 c0       	rjmp	.+14     	; 0x94c <uart_handle+0xec>
			{
				address_type = 0x05;
     93e:	85 e0       	ldi	r24, 0x05	; 5
     940:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
				address_length = SINGLE_ADDRESS_LEN;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     94a:	67 c0       	rjmp	.+206    	; 0xa1a <uart_handle+0x1ba>
			}
			else if (recv[1] == single_rh_addr)
     94c:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <single_rh_addr>
     950:	89 13       	cpse	r24, r25
     952:	07 c0       	rjmp	.+14     	; 0x962 <uart_handle+0x102>
			{
				address_type = 0x06;
     954:	86 e0       	ldi	r24, 0x06	; 6
     956:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
				address_length = SINGLE_ADDRESS_LEN;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     960:	5c c0       	rjmp	.+184    	; 0xa1a <uart_handle+0x1ba>
			}
			else if (memcmp(recv + 1, ALWAYS_RESP_ADDR,ADDRESS_LEN) == 0)
     962:	46 e0       	ldi	r20, 0x06	; 6
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	69 e3       	ldi	r22, 0x39	; 57
     968:	75 eb       	ldi	r23, 0xB5	; 181
     96a:	89 e3       	ldi	r24, 0x39	; 57
     96c:	98 e3       	ldi	r25, 0x38	; 56
     96e:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
     972:	89 2b       	or	r24, r25
     974:	19 f5       	brne	.+70     	; 0x9bc <uart_handle+0x15c>
			{
				address_type = 0x07; // always_respond
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
				address_length = ADDRESS_LEN;
     97c:	86 e0       	ldi	r24, 0x06	; 6
     97e:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
				
				if (recv[7] == TEMP_ADDR_BYTE) // a
     982:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <recv+0x7>
     986:	81 36       	cpi	r24, 0x61	; 97
     988:	39 f4       	brne	.+14     	; 0x998 <uart_handle+0x138>
				{
					address_type = 0x08;
     98a:	88 e0       	ldi	r24, 0x08	; 8
     98c:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = ADDRESS_LEN + 1;
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     996:	41 c0       	rjmp	.+130    	; 0xa1a <uart_handle+0x1ba>
				}
				else if (recv[7] == RH_ADDR_BYTE) // n
     998:	8e 36       	cpi	r24, 0x6E	; 110
     99a:	39 f4       	brne	.+14     	; 0x9aa <uart_handle+0x14a>
				{
					address_type = 0x09;
     99c:	89 e0       	ldi	r24, 0x09	; 9
     99e:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = ADDRESS_LEN + 1;
     9a2:	87 e0       	ldi	r24, 0x07	; 7
     9a4:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     9a8:	38 c0       	rjmp	.+112    	; 0xa1a <uart_handle+0x1ba>
				}
				else if (recv[7] == RH_TEMP_ADDR_BYTE) // m
     9aa:	8d 36       	cpi	r24, 0x6D	; 109
     9ac:	b1 f5       	brne	.+108    	; 0xa1a <uart_handle+0x1ba>
				{
					address_type = 0x0a;
     9ae:	8a e0       	ldi	r24, 0x0A	; 10
     9b0:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = ADDRESS_LEN + 1;
     9b4:	87 e0       	ldi	r24, 0x07	; 7
     9b6:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     9ba:	2f c0       	rjmp	.+94     	; 0xa1a <uart_handle+0x1ba>
				}
			}
			else if (memcmp(recv + 1, addr, ADDRESS_LEN) == 0)
     9bc:	46 e0       	ldi	r20, 0x06	; 6
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	63 ea       	ldi	r22, 0xA3	; 163
     9c2:	78 e3       	ldi	r23, 0x38	; 56
     9c4:	89 e3       	ldi	r24, 0x39	; 57
     9c6:	98 e3       	ldi	r25, 0x38	; 56
     9c8:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
     9cc:	89 2b       	or	r24, r25
     9ce:	19 f5       	brne	.+70     	; 0xa16 <uart_handle+0x1b6>
			{
				address_type = 0x0b; // serial_number
     9d0:	8b e0       	ldi	r24, 0x0B	; 11
     9d2:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
				address_length = ADDRESS_LEN;
     9d6:	86 e0       	ldi	r24, 0x06	; 6
     9d8:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
				
				if (recv[7] == TEMP_ADDR_BYTE) // a
     9dc:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <recv+0x7>
     9e0:	81 36       	cpi	r24, 0x61	; 97
     9e2:	39 f4       	brne	.+14     	; 0x9f2 <uart_handle+0x192>
				{
					address_type = 0x0c;
     9e4:	8c e0       	ldi	r24, 0x0C	; 12
     9e6:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = ADDRESS_LEN + 1;
     9ea:	87 e0       	ldi	r24, 0x07	; 7
     9ec:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     9f0:	14 c0       	rjmp	.+40     	; 0xa1a <uart_handle+0x1ba>
				}
				else if (recv[7] == RH_ADDR_BYTE) // n
     9f2:	8e 36       	cpi	r24, 0x6E	; 110
     9f4:	39 f4       	brne	.+14     	; 0xa04 <uart_handle+0x1a4>
				{
					address_type = 0x0d;
     9f6:	8d e0       	ldi	r24, 0x0D	; 13
     9f8:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = ADDRESS_LEN + 1;
     9fc:	87 e0       	ldi	r24, 0x07	; 7
     9fe:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     a02:	0b c0       	rjmp	.+22     	; 0xa1a <uart_handle+0x1ba>
				}
				else if (recv[7] == RH_TEMP_ADDR_BYTE) // m
     a04:	8d 36       	cpi	r24, 0x6D	; 109
     a06:	49 f4       	brne	.+18     	; 0xa1a <uart_handle+0x1ba>
				{
					address_type = 0x0e;
     a08:	8e e0       	ldi	r24, 0x0E	; 14
     a0a:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <address_type>
					address_length = ADDRESS_LEN + 1;
     a0e:	87 e0       	ldi	r24, 0x07	; 7
     a10:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <address_length>
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <uart_handle+0x1ba>
				}
				
			}
			else
			{
				address_type = 0;
     a16:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <address_type>
			}
			
			recv[0] = '*';
     a1a:	8a e2       	ldi	r24, 0x2A	; 42
     a1c:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <recv>
			/* RD temperature sensor response, all address cases */
			if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) && 
     a20:	c0 91 1e 38 	lds	r28, 0x381E	; 0x80381e <address_type>
     a24:	c2 30       	cpi	r28, 0x02	; 2
     a26:	09 f4       	brne	.+2      	; 0xa2a <uart_handle+0x1ca>
     a28:	1b c7       	rjmp	.+3638   	; 0x1860 <uart_handle+0x1000>
     a2a:	c5 30       	cpi	r28, 0x05	; 5
     a2c:	29 f0       	breq	.+10     	; 0xa38 <uart_handle+0x1d8>
     a2e:	8c 2f       	mov	r24, r28
     a30:	8b 7f       	andi	r24, 0xFB	; 251
     a32:	88 30       	cpi	r24, 0x08	; 8
     a34:	09 f0       	breq	.+2      	; 0xa38 <uart_handle+0x1d8>
     a36:	66 c0       	rjmp	.+204    	; 0xb04 <uart_handle+0x2a4>
				memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 && 
     a38:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     a3c:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     a40:	fb 01       	movw	r30, r22
     a42:	01 90       	ld	r0, Z+
     a44:	00 20       	and	r0, r0
     a46:	e9 f7       	brne	.-6      	; 0xa42 <uart_handle+0x1e2>
     a48:	31 97       	sbiw	r30, 0x01	; 1
     a4a:	af 01       	movw	r20, r30
     a4c:	46 1b       	sub	r20, r22
     a4e:	57 0b       	sbc	r21, r23
     a50:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     a54:	8d 2f       	mov	r24, r29
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	87 5c       	subi	r24, 0xC7	; 199
     a5a:	97 4c       	sbci	r25, 0xC7	; 199
     a5c:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				address_type = 0;
			}
			
			recv[0] = '*';
			/* RD temperature sensor response, all address cases */
			if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) && 
     a60:	89 2b       	or	r24, r25
     a62:	09 f0       	breq	.+2      	; 0xa66 <uart_handle+0x206>
     a64:	4f c0       	rjmp	.+158    	; 0xb04 <uart_handle+0x2a4>
				memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 && 
				v == address_length + 2 + cmd_len[RD])
     a66:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
			}
			
			recv[0] = '*';
			/* RD temperature sensor response, all address cases */
			if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) && 
				memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 && 
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	8d 2f       	mov	r24, r29
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	04 96       	adiw	r24, 0x04	; 4
     a72:	28 17       	cp	r18, r24
     a74:	39 07       	cpc	r19, r25
     a76:	09 f0       	breq	.+2      	; 0xa7a <uart_handle+0x21a>
     a78:	45 c0       	rjmp	.+138    	; 0xb04 <uart_handle+0x2a4>
				v == address_length + 2 + cmd_len[RD])
			{
				read_temp(&temp_data);
     a7a:	8b e7       	ldi	r24, 0x7B	; 123
     a7c:	98 e3       	ldi	r25, 0x38	; 56
     a7e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <read_temp>
				temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
     a82:	c0 90 7b 38 	lds	r12, 0x387B	; 0x80387b <temp_data>
     a86:	d0 90 7c 38 	lds	r13, 0x387C	; 0x80387c <temp_data+0x1>
     a8a:	e0 90 7d 38 	lds	r14, 0x387D	; 0x80387d <temp_data+0x2>
     a8e:	f0 90 7e 38 	lds	r15, 0x387E	; 0x80387e <temp_data+0x3>
     a92:	20 91 aa 38 	lds	r18, 0x38AA	; 0x8038aa <cal_b>
     a96:	30 91 ab 38 	lds	r19, 0x38AB	; 0x8038ab <cal_b+0x1>
     a9a:	40 91 ac 38 	lds	r20, 0x38AC	; 0x8038ac <cal_b+0x2>
     a9e:	50 91 ad 38 	lds	r21, 0x38AD	; 0x8038ad <cal_b+0x3>
     aa2:	c7 01       	movw	r24, r14
     aa4:	b6 01       	movw	r22, r12
     aa6:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     aaa:	20 91 99 38 	lds	r18, 0x3899	; 0x803899 <cal_a>
     aae:	30 91 9a 38 	lds	r19, 0x389A	; 0x80389a <cal_a+0x1>
     ab2:	40 91 9b 38 	lds	r20, 0x389B	; 0x80389b <cal_a+0x2>
     ab6:	50 91 9c 38 	lds	r21, 0x389C	; 0x80389c <cal_a+0x3>
     aba:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__addsf3>
     abe:	4b 01       	movw	r8, r22
     ac0:	5c 01       	movw	r10, r24
     ac2:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <cal_c>
     ac6:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <cal_c+0x1>
     aca:	40 91 32 38 	lds	r20, 0x3832	; 0x803832 <cal_c+0x2>
     ace:	50 91 33 38 	lds	r21, 0x3833	; 0x803833 <cal_c+0x3>
     ad2:	c7 01       	movw	r24, r14
     ad4:	b6 01       	movw	r22, r12
     ad6:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     ada:	a7 01       	movw	r20, r14
     adc:	96 01       	movw	r18, r12
     ade:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__addsf3>
     aee:	60 93 7b 38 	sts	0x387B, r22	; 0x80387b <temp_data>
     af2:	70 93 7c 38 	sts	0x387C, r23	; 0x80387c <temp_data+0x1>
     af6:	80 93 7d 38 	sts	0x387D, r24	; 0x80387d <temp_data+0x2>
     afa:	90 93 7e 38 	sts	0x387E, r25	; 0x80387e <temp_data+0x3>
				build_output(temp_data);
     afe:	0e 94 72 02 	call	0x4e4	; 0x4e4 <build_output>
     b02:	5d c5       	rjmp	.+2746   	; 0x15be <uart_handle+0xd5e>
			} // RD RH sensor response, all address cases
			else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
     b04:	c3 30       	cpi	r28, 0x03	; 3
     b06:	09 f4       	brne	.+2      	; 0xb0a <uart_handle+0x2aa>
     b08:	c3 c6       	rjmp	.+3462   	; 0x1890 <uart_handle+0x1030>
     b0a:	c6 30       	cpi	r28, 0x06	; 6
     b0c:	29 f0       	breq	.+10     	; 0xb18 <uart_handle+0x2b8>
     b0e:	8c 2f       	mov	r24, r28
     b10:	8b 7f       	andi	r24, 0xFB	; 251
     b12:	89 30       	cpi	r24, 0x09	; 9
     b14:	09 f0       	breq	.+2      	; 0xb18 <uart_handle+0x2b8>
     b16:	68 c0       	rjmp	.+208    	; 0xbe8 <uart_handle+0x388>
					memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     b18:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     b1c:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     b20:	fb 01       	movw	r30, r22
     b22:	01 90       	ld	r0, Z+
     b24:	00 20       	and	r0, r0
     b26:	e9 f7       	brne	.-6      	; 0xb22 <uart_handle+0x2c2>
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	af 01       	movw	r20, r30
     b2c:	46 1b       	sub	r20, r22
     b2e:	57 0b       	sbc	r21, r23
     b30:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     b34:	8d 2f       	mov	r24, r29
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	87 5c       	subi	r24, 0xC7	; 199
     b3a:	97 4c       	sbci	r25, 0xC7	; 199
     b3c:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
			{
				read_temp(&temp_data);
				temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
				build_output(temp_data);
			} // RD RH sensor response, all address cases
			else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
     b40:	89 2b       	or	r24, r25
     b42:	09 f0       	breq	.+2      	; 0xb46 <uart_handle+0x2e6>
     b44:	51 c0       	rjmp	.+162    	; 0xbe8 <uart_handle+0x388>
					memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
					v == address_length + 2 + cmd_len[RD])
     b46:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				read_temp(&temp_data);
				temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
				build_output(temp_data);
			} // RD RH sensor response, all address cases
			else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
					memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	8d 2f       	mov	r24, r29
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	04 96       	adiw	r24, 0x04	; 4
     b52:	28 17       	cp	r18, r24
     b54:	39 07       	cpc	r19, r25
     b56:	09 f0       	breq	.+2      	; 0xb5a <uart_handle+0x2fa>
     b58:	47 c0       	rjmp	.+142    	; 0xbe8 <uart_handle+0x388>
					v == address_length + 2 + cmd_len[RD])
			{

				read_temp_rh(&temp_data, &rh_data);
     b5a:	64 ec       	ldi	r22, 0xC4	; 196
     b5c:	78 e3       	ldi	r23, 0x38	; 56
     b5e:	8b e7       	ldi	r24, 0x7B	; 123
     b60:	98 e3       	ldi	r25, 0x38	; 56
     b62:	0e 94 2e 01 	call	0x25c	; 0x25c <read_temp_rh>
				rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;	
     b66:	c0 90 c4 38 	lds	r12, 0x38C4	; 0x8038c4 <rh_data>
     b6a:	d0 90 c5 38 	lds	r13, 0x38C5	; 0x8038c5 <rh_data+0x1>
     b6e:	e0 90 c6 38 	lds	r14, 0x38C6	; 0x8038c6 <rh_data+0x2>
     b72:	f0 90 c7 38 	lds	r15, 0x38C7	; 0x8038c7 <rh_data+0x3>
     b76:	20 91 95 38 	lds	r18, 0x3895	; 0x803895 <cal_e>
     b7a:	30 91 96 38 	lds	r19, 0x3896	; 0x803896 <cal_e+0x1>
     b7e:	40 91 97 38 	lds	r20, 0x3897	; 0x803897 <cal_e+0x2>
     b82:	50 91 98 38 	lds	r21, 0x3898	; 0x803898 <cal_e+0x3>
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     b8e:	20 91 7f 38 	lds	r18, 0x387F	; 0x80387f <cal_d>
     b92:	30 91 80 38 	lds	r19, 0x3880	; 0x803880 <cal_d+0x1>
     b96:	40 91 81 38 	lds	r20, 0x3881	; 0x803881 <cal_d+0x2>
     b9a:	50 91 82 38 	lds	r21, 0x3882	; 0x803882 <cal_d+0x3>
     b9e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__addsf3>
     ba2:	4b 01       	movw	r8, r22
     ba4:	5c 01       	movw	r10, r24
     ba6:	20 91 c8 38 	lds	r18, 0x38C8	; 0x8038c8 <cal_f>
     baa:	30 91 c9 38 	lds	r19, 0x38C9	; 0x8038c9 <cal_f+0x1>
     bae:	40 91 ca 38 	lds	r20, 0x38CA	; 0x8038ca <cal_f+0x2>
     bb2:	50 91 cb 38 	lds	r21, 0x38CB	; 0x8038cb <cal_f+0x3>
     bb6:	c7 01       	movw	r24, r14
     bb8:	b6 01       	movw	r22, r12
     bba:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     bbe:	a7 01       	movw	r20, r14
     bc0:	96 01       	movw	r18, r12
     bc2:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	c5 01       	movw	r24, r10
     bcc:	b4 01       	movw	r22, r8
     bce:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__addsf3>
     bd2:	60 93 c4 38 	sts	0x38C4, r22	; 0x8038c4 <rh_data>
     bd6:	70 93 c5 38 	sts	0x38C5, r23	; 0x8038c5 <rh_data+0x1>
     bda:	80 93 c6 38 	sts	0x38C6, r24	; 0x8038c6 <rh_data+0x2>
     bde:	90 93 c7 38 	sts	0x38C7, r25	; 0x8038c7 <rh_data+0x3>
				build_output(rh_data);
     be2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <build_output>
     be6:	eb c4       	rjmp	.+2518   	; 0x15be <uart_handle+0xd5e>
			} // RD RH temp sensor response, all address cases
			else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
     be8:	c4 30       	cpi	r28, 0x04	; 4
     bea:	09 f4       	brne	.+2      	; 0xbee <uart_handle+0x38e>
     bec:	69 c6       	rjmp	.+3282   	; 0x18c0 <uart_handle+0x1060>
     bee:	8c 2f       	mov	r24, r28
     bf0:	8b 7f       	andi	r24, 0xFB	; 251
     bf2:	8a 30       	cpi	r24, 0x0A	; 10
     bf4:	81 f5       	brne	.+96     	; 0xc56 <uart_handle+0x3f6>
					memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     bf6:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     bfa:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     bfe:	fb 01       	movw	r30, r22
     c00:	01 90       	ld	r0, Z+
     c02:	00 20       	and	r0, r0
     c04:	e9 f7       	brne	.-6      	; 0xc00 <uart_handle+0x3a0>
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	af 01       	movw	r20, r30
     c0a:	46 1b       	sub	r20, r22
     c0c:	57 0b       	sbc	r21, r23
     c0e:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     c12:	8d 2f       	mov	r24, r29
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	87 5c       	subi	r24, 0xC7	; 199
     c18:	97 4c       	sbci	r25, 0xC7	; 199
     c1a:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>

				read_temp_rh(&temp_data, &rh_data);
				rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;	
				build_output(rh_data);
			} // RD RH temp sensor response, all address cases
			else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
     c1e:	89 2b       	or	r24, r25
     c20:	d1 f4       	brne	.+52     	; 0xc56 <uart_handle+0x3f6>
					memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
					v == address_length + 2 + cmd_len[RD])
     c22:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				read_temp_rh(&temp_data, &rh_data);
				rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;	
				build_output(rh_data);
			} // RD RH temp sensor response, all address cases
			else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
					memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	8d 2f       	mov	r24, r29
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	04 96       	adiw	r24, 0x04	; 4
     c2e:	28 17       	cp	r18, r24
     c30:	39 07       	cpc	r19, r25
     c32:	89 f4       	brne	.+34     	; 0xc56 <uart_handle+0x3f6>
					v == address_length + 2 + cmd_len[RD])
			{
				read_temp_rh(&temp_data, &rh_data);
     c34:	64 ec       	ldi	r22, 0xC4	; 196
     c36:	78 e3       	ldi	r23, 0x38	; 56
     c38:	8b e7       	ldi	r24, 0x7B	; 123
     c3a:	98 e3       	ldi	r25, 0x38	; 56
     c3c:	0e 94 2e 01 	call	0x25c	; 0x25c <read_temp_rh>
				build_output(temp_data);
     c40:	60 91 7b 38 	lds	r22, 0x387B	; 0x80387b <temp_data>
     c44:	70 91 7c 38 	lds	r23, 0x387C	; 0x80387c <temp_data+0x1>
     c48:	80 91 7d 38 	lds	r24, 0x387D	; 0x80387d <temp_data+0x2>
     c4c:	90 91 7e 38 	lds	r25, 0x387E	; 0x80387e <temp_data+0x3>
     c50:	0e 94 72 02 	call	0x4e4	; 0x4e4 <build_output>
     c54:	b4 c4       	rjmp	.+2408   	; 0x15be <uart_handle+0xd5e>
			} // Other RD output
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
     c56:	c1 30       	cpi	r28, 0x01	; 1
     c58:	09 f4       	brne	.+2      	; 0xc5c <uart_handle+0x3fc>
     c5a:	04 c5       	rjmp	.+2568   	; 0x1664 <uart_handle+0xe04>
     c5c:	c7 30       	cpi	r28, 0x07	; 7
     c5e:	19 f0       	breq	.+6      	; 0xc66 <uart_handle+0x406>
     c60:	cb 30       	cpi	r28, 0x0B	; 11
     c62:	09 f0       	breq	.+2      	; 0xc66 <uart_handle+0x406>
     c64:	17 c5       	rjmp	.+2606   	; 0x1694 <uart_handle+0xe34>
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     c66:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     c6a:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     c6e:	fb 01       	movw	r30, r22
     c70:	01 90       	ld	r0, Z+
     c72:	00 20       	and	r0, r0
     c74:	e9 f7       	brne	.-6      	; 0xc70 <uart_handle+0x410>
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	af 01       	movw	r20, r30
     c7a:	46 1b       	sub	r20, r22
     c7c:	57 0b       	sbc	r21, r23
     c7e:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     c82:	8d 2f       	mov	r24, r29
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	87 5c       	subi	r24, 0xC7	; 199
     c88:	97 4c       	sbci	r25, 0xC7	; 199
     c8a:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
					v == address_length + 2 + cmd_len[RD])
			{
				read_temp_rh(&temp_data, &rh_data);
				build_output(temp_data);
			} // Other RD output
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
     c8e:	89 2b       	or	r24, r25
     c90:	81 f4       	brne	.+32     	; 0xcb2 <uart_handle+0x452>
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
			          v == address_length + 2 + cmd_len[RD])
     c92:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
			{
				read_temp_rh(&temp_data, &rh_data);
				build_output(temp_data);
			} // Other RD output
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	8d 2f       	mov	r24, r29
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	04 96       	adiw	r24, 0x04	; 4
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	39 f4       	brne	.+14     	; 0xcb2 <uart_handle+0x452>
			          v == address_length + 2 + cmd_len[RD])
			{
				build_output(ERROR_SYNTAX);
     ca4:	63 e8       	ldi	r22, 0x83	; 131
     ca6:	7f e4       	ldi	r23, 0x4F	; 79
     ca8:	83 ec       	ldi	r24, 0xC3	; 195
     caa:	97 e4       	ldi	r25, 0x47	; 71
     cac:	0e 94 72 02 	call	0x4e4	; 0x4e4 <build_output>
     cb0:	86 c4       	rjmp	.+2316   	; 0x15be <uart_handle+0xd5e>
			} // WE
			else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) && 
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	8c 0f       	add	r24, r28
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	60 f0       	brcs	.+24     	; 0xcd2 <uart_handle+0x472>
     cba:	c7 30       	cpi	r28, 0x07	; 7
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <uart_handle+0x460>
     cbe:	23 c6       	rjmp	.+3142   	; 0x1906 <uart_handle+0x10a6>
     cc0:	88 ef       	ldi	r24, 0xF8	; 248
     cc2:	8c 0f       	add	r24, r28
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	28 f0       	brcs	.+10     	; 0xcd2 <uart_handle+0x472>
     cc8:	85 ef       	ldi	r24, 0xF5	; 245
     cca:	8c 0f       	add	r24, r28
     ccc:	83 30       	cpi	r24, 0x03	; 3
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <uart_handle+0x472>
     cd0:	e7 c4       	rjmp	.+2510   	; 0x16a0 <uart_handle+0xe40>
					  memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 && 
     cd2:	60 91 02 38 	lds	r22, 0x3802	; 0x803802 <__data_start+0x2>
     cd6:	70 91 03 38 	lds	r23, 0x3803	; 0x803803 <__data_start+0x3>
     cda:	fb 01       	movw	r30, r22
     cdc:	01 90       	ld	r0, Z+
     cde:	00 20       	and	r0, r0
     ce0:	e9 f7       	brne	.-6      	; 0xcdc <uart_handle+0x47c>
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	af 01       	movw	r20, r30
     ce6:	46 1b       	sub	r20, r22
     ce8:	57 0b       	sbc	r21, r23
     cea:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     cee:	0d 2f       	mov	r16, r29
     cf0:	10 e0       	ldi	r17, 0x00	; 0
     cf2:	07 5c       	subi	r16, 0xC7	; 199
     cf4:	17 4c       	sbci	r17, 0xC7	; 199
     cf6:	c8 01       	movw	r24, r16
     cf8:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
			          v == address_length + 2 + cmd_len[RD])
			{
				build_output(ERROR_SYNTAX);
			} // WE
			else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) && 
     cfc:	89 2b       	or	r24, r25
     cfe:	a9 f4       	brne	.+42     	; 0xd2a <uart_handle+0x4ca>
					  memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 && 
					  v == address_length + 2 + cmd_len[WE])
     d00:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
			          v == address_length + 2 + cmd_len[RD])
			{
				build_output(ERROR_SYNTAX);
			} // WE
			else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) && 
					  memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 && 
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	8d 2f       	mov	r24, r29
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	04 96       	adiw	r24, 0x04	; 4
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	61 f4       	brne	.+24     	; 0xd2a <uart_handle+0x4ca>
					  v == address_length + 2 + cmd_len[WE])
			{
				write_enabled = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <write_enabled>
				send_enable = 1;
				send_size = v - 1;
     d18:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
     d24:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
     d28:	51 c4       	rjmp	.+2210   	; 0x15cc <uart_handle+0xd6c>
			} // Read Temp Cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
     d2a:	c2 30       	cpi	r28, 0x02	; 2
     d2c:	09 f4       	brne	.+2      	; 0xd30 <uart_handle+0x4d0>
     d2e:	bc c4       	rjmp	.+2424   	; 0x16a8 <uart_handle+0xe48>
     d30:	8c 2f       	mov	r24, r28
     d32:	8b 7f       	andi	r24, 0xFB	; 251
     d34:	88 30       	cpi	r24, 0x08	; 8
     d36:	d1 f5       	brne	.+116    	; 0xdac <uart_handle+0x54c>
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     d38:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
     d3c:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
     d40:	fb 01       	movw	r30, r22
     d42:	01 90       	ld	r0, Z+
     d44:	00 20       	and	r0, r0
     d46:	e9 f7       	brne	.-6      	; 0xd42 <uart_handle+0x4e2>
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	af 01       	movw	r20, r30
     d4c:	46 1b       	sub	r20, r22
     d4e:	57 0b       	sbc	r21, r23
     d50:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     d54:	8d 2f       	mov	r24, r29
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	87 5c       	subi	r24, 0xC7	; 199
     d5a:	97 4c       	sbci	r25, 0xC7	; 199
     d5c:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
			{
				write_enabled = 1;
				send_enable = 1;
				send_size = v - 1;
			} // Read Temp Cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
     d60:	89 2b       	or	r24, r25
     d62:	21 f5       	brne	.+72     	; 0xdac <uart_handle+0x54c>
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[RCAL])
     d64:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				write_enabled = 1;
				send_enable = 1;
				send_size = v - 1;
			} // Read Temp Cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	8d 2f       	mov	r24, r29
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	06 96       	adiw	r24, 0x06	; 6
     d70:	28 17       	cp	r18, r24
     d72:	39 07       	cpc	r19, r25
     d74:	d9 f4       	brne	.+54     	; 0xdac <uart_handle+0x54c>
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_a, cal_b, cal_c);
     d76:	e0 90 30 38 	lds	r14, 0x3830	; 0x803830 <cal_c>
     d7a:	f0 90 31 38 	lds	r15, 0x3831	; 0x803831 <cal_c+0x1>
     d7e:	00 91 32 38 	lds	r16, 0x3832	; 0x803832 <cal_c+0x2>
     d82:	10 91 33 38 	lds	r17, 0x3833	; 0x803833 <cal_c+0x3>
     d86:	20 91 aa 38 	lds	r18, 0x38AA	; 0x8038aa <cal_b>
     d8a:	30 91 ab 38 	lds	r19, 0x38AB	; 0x8038ab <cal_b+0x1>
     d8e:	40 91 ac 38 	lds	r20, 0x38AC	; 0x8038ac <cal_b+0x2>
     d92:	50 91 ad 38 	lds	r21, 0x38AD	; 0x8038ad <cal_b+0x3>
     d96:	60 91 99 38 	lds	r22, 0x3899	; 0x803899 <cal_a>
     d9a:	70 91 9a 38 	lds	r23, 0x389A	; 0x80389a <cal_a+0x1>
     d9e:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <cal_a+0x2>
     da2:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <cal_a+0x3>
     da6:	0e 94 af 02 	call	0x55e	; 0x55e <build_cal_out_put>
     daa:	09 c4       	rjmp	.+2066   	; 0x15be <uart_handle+0xd5e>
			} // Read RH Cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
     dac:	c3 30       	cpi	r28, 0x03	; 3
     dae:	09 f4       	brne	.+2      	; 0xdb2 <uart_handle+0x552>
     db0:	8e c4       	rjmp	.+2332   	; 0x16ce <uart_handle+0xe6e>
     db2:	8c 2f       	mov	r24, r28
     db4:	8b 7f       	andi	r24, 0xFB	; 251
     db6:	89 30       	cpi	r24, 0x09	; 9
     db8:	d9 f5       	brne	.+118    	; 0xe30 <uart_handle+0x5d0>
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     dba:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
     dbe:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
     dc2:	fb 01       	movw	r30, r22
     dc4:	01 90       	ld	r0, Z+
     dc6:	00 20       	and	r0, r0
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <uart_handle+0x564>
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	af 01       	movw	r20, r30
     dce:	46 1b       	sub	r20, r22
     dd0:	57 0b       	sbc	r21, r23
     dd2:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     dd6:	8d 2f       	mov	r24, r29
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	87 5c       	subi	r24, 0xC7	; 199
     ddc:	97 4c       	sbci	r25, 0xC7	; 199
     dde:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_a, cal_b, cal_c);
			} // Read RH Cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
     de2:	89 2b       	or	r24, r25
     de4:	09 f0       	breq	.+2      	; 0xde8 <uart_handle+0x588>
     de6:	be c5       	rjmp	.+2940   	; 0x1964 <uart_handle+0x1104>
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[RCAL])
     de8:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_a, cal_b, cal_c);
			} // Read RH Cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	8d 2f       	mov	r24, r29
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	06 96       	adiw	r24, 0x06	; 6
     df4:	28 17       	cp	r18, r24
     df6:	39 07       	cpc	r19, r25
     df8:	d9 f4       	brne	.+54     	; 0xe30 <uart_handle+0x5d0>
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_d, cal_e, cal_f);
     dfa:	e0 90 c8 38 	lds	r14, 0x38C8	; 0x8038c8 <cal_f>
     dfe:	f0 90 c9 38 	lds	r15, 0x38C9	; 0x8038c9 <cal_f+0x1>
     e02:	00 91 ca 38 	lds	r16, 0x38CA	; 0x8038ca <cal_f+0x2>
     e06:	10 91 cb 38 	lds	r17, 0x38CB	; 0x8038cb <cal_f+0x3>
     e0a:	20 91 95 38 	lds	r18, 0x3895	; 0x803895 <cal_e>
     e0e:	30 91 96 38 	lds	r19, 0x3896	; 0x803896 <cal_e+0x1>
     e12:	40 91 97 38 	lds	r20, 0x3897	; 0x803897 <cal_e+0x2>
     e16:	50 91 98 38 	lds	r21, 0x3898	; 0x803898 <cal_e+0x3>
     e1a:	60 91 7f 38 	lds	r22, 0x387F	; 0x80387f <cal_d>
     e1e:	70 91 80 38 	lds	r23, 0x3880	; 0x803880 <cal_d+0x1>
     e22:	80 91 81 38 	lds	r24, 0x3881	; 0x803881 <cal_d+0x2>
     e26:	90 91 82 38 	lds	r25, 0x3882	; 0x803882 <cal_d+0x3>
     e2a:	0e 94 af 02 	call	0x55e	; 0x55e <build_cal_out_put>
     e2e:	c7 c3       	rjmp	.+1934   	; 0x15be <uart_handle+0xd5e>
			} // write temp cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
     e30:	c2 30       	cpi	r28, 0x02	; 2
     e32:	29 f0       	breq	.+10     	; 0xe3e <uart_handle+0x5de>
     e34:	8c 2f       	mov	r24, r28
     e36:	8b 7f       	andi	r24, 0xFB	; 251
     e38:	88 30       	cpi	r24, 0x08	; 8
     e3a:	09 f0       	breq	.+2      	; 0xe3e <uart_handle+0x5de>
     e3c:	9c c0       	rjmp	.+312    	; 0xf76 <uart_handle+0x716>
					  memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     e3e:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_start+0x6>
     e42:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_start+0x7>
     e46:	fb 01       	movw	r30, r22
     e48:	01 90       	ld	r0, Z+
     e4a:	00 20       	and	r0, r0
     e4c:	e9 f7       	brne	.-6      	; 0xe48 <uart_handle+0x5e8>
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	af 01       	movw	r20, r30
     e52:	46 1b       	sub	r20, r22
     e54:	57 0b       	sbc	r21, r23
     e56:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     e5a:	0d 2f       	mov	r16, r29
     e5c:	10 e0       	ldi	r17, 0x00	; 0
     e5e:	c8 01       	movw	r24, r16
     e60:	87 5c       	subi	r24, 0xC7	; 199
     e62:	97 4c       	sbci	r25, 0xC7	; 199
     e64:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // write temp cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
     e68:	89 2b       	or	r24, r25
     e6a:	09 f0       	breq	.+2      	; 0xe6e <uart_handle+0x60e>
     e6c:	84 c0       	rjmp	.+264    	; 0xf76 <uart_handle+0x716>
					  memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     e6e:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // write temp cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
					  memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	c8 01       	movw	r24, r16
     e76:	8a 96       	adiw	r24, 0x2a	; 42
     e78:	28 17       	cp	r18, r24
     e7a:	39 07       	cpc	r19, r25
     e7c:	09 f0       	breq	.+2      	; 0xe80 <uart_handle+0x620>
     e7e:	7b c0       	rjmp	.+246    	; 0xf76 <uart_handle+0x716>
					  v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     e80:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <write_enabled>
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	09 f0       	breq	.+2      	; 0xe8a <uart_handle+0x62a>
     e88:	76 c0       	rjmp	.+236    	; 0xf76 <uart_handle+0x716>
					  write_enabled == 1)
			{
				memset(parse_buf, 0, sizeof(parse_buf));
     e8a:	c0 eb       	ldi	r28, 0xB0	; 176
     e8c:	d8 e3       	ldi	r29, 0x38	; 56
     e8e:	0f 2e       	mov	r0, r31
     e90:	f4 e1       	ldi	r31, 0x14	; 20
     e92:	ff 2e       	mov	r15, r31
     e94:	f0 2d       	mov	r31, r0
     e96:	fe 01       	movw	r30, r28
     e98:	2f 2d       	mov	r18, r15
     e9a:	11 92       	st	Z+, r1
     e9c:	2a 95       	dec	r18
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <uart_handle+0x63a>
				memcpy(parse_buf, recv + address_length + 1 + cmd_len[WCAL], CAL_NUM_LEN);
     ea0:	f8 01       	movw	r30, r16
     ea2:	e3 5c       	subi	r30, 0xC3	; 195
     ea4:	f7 4c       	sbci	r31, 0xC7	; 199
     ea6:	8c e0       	ldi	r24, 0x0C	; 12
     ea8:	de 01       	movw	r26, r28
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	8a 95       	dec	r24
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <uart_handle+0x64a>
				cal_a = atof((char*)parse_buf);
     eb2:	ce 01       	movw	r24, r28
     eb4:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <atof>
     eb8:	60 93 99 38 	sts	0x3899, r22	; 0x803899 <cal_a>
     ebc:	70 93 9a 38 	sts	0x389A, r23	; 0x80389a <cal_a+0x1>
     ec0:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <cal_a+0x2>
     ec4:	90 93 9c 38 	sts	0x389C, r25	; 0x80389c <cal_a+0x3>
				memset(parse_buf, 0, sizeof(parse_buf));
     ec8:	de 01       	movw	r26, r28
     eca:	ef 2d       	mov	r30, r15
     ecc:	1d 92       	st	X+, r1
     ece:	ea 95       	dec	r30
     ed0:	e9 f7       	brne	.-6      	; 0xecc <uart_handle+0x66c>
				memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN + cmd_len[WCAL], CAL_NUM_LEN);
     ed2:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <address_length>
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	e7 5b       	subi	r30, 0xB7	; 183
     eda:	f7 4c       	sbci	r31, 0xC7	; 199
     edc:	8c e0       	ldi	r24, 0x0C	; 12
     ede:	de 01       	movw	r26, r28
     ee0:	01 90       	ld	r0, Z+
     ee2:	0d 92       	st	X+, r0
     ee4:	8a 95       	dec	r24
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <uart_handle+0x680>
				cal_b = atof((char*)parse_buf);
     ee8:	ce 01       	movw	r24, r28
     eea:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <atof>
     eee:	60 93 aa 38 	sts	0x38AA, r22	; 0x8038aa <cal_b>
     ef2:	70 93 ab 38 	sts	0x38AB, r23	; 0x8038ab <cal_b+0x1>
     ef6:	80 93 ac 38 	sts	0x38AC, r24	; 0x8038ac <cal_b+0x2>
     efa:	90 93 ad 38 	sts	0x38AD, r25	; 0x8038ad <cal_b+0x3>
				memset(parse_buf, 0, sizeof(parse_buf));
     efe:	de 01       	movw	r26, r28
     f00:	1d 92       	st	X+, r1
     f02:	fa 94       	dec	r15
     f04:	e9 f7       	brne	.-6      	; 0xf00 <uart_handle+0x6a0>
				memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN * 2 + cmd_len[WCAL], CAL_NUM_LEN);
     f06:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <address_length>
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	eb 5a       	subi	r30, 0xAB	; 171
     f0e:	f7 4c       	sbci	r31, 0xC7	; 199
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	de 01       	movw	r26, r28
     f14:	01 90       	ld	r0, Z+
     f16:	0d 92       	st	X+, r0
     f18:	8a 95       	dec	r24
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <uart_handle+0x6b4>
				cal_c = atof((char*)parse_buf);	
     f1c:	ce 01       	movw	r24, r28
     f1e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <atof>
     f22:	60 93 30 38 	sts	0x3830, r22	; 0x803830 <cal_c>
     f26:	70 93 31 38 	sts	0x3831, r23	; 0x803831 <cal_c+0x1>
     f2a:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <cal_c+0x2>
     f2e:	90 93 33 38 	sts	0x3833, r25	; 0x803833 <cal_c+0x3>
				v -= CAL_NUM_LEN * 3;
     f32:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
     f36:	84 52       	subi	r24, 0x24	; 36
     f38:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				
				write_temp_cal_eeprom();
     f3c:	0e 94 4a 03 	call	0x694	; 0x694 <write_temp_cal_eeprom>
				build_cal_out_put(cal_a, cal_b, cal_c);							
     f40:	e0 90 30 38 	lds	r14, 0x3830	; 0x803830 <cal_c>
     f44:	f0 90 31 38 	lds	r15, 0x3831	; 0x803831 <cal_c+0x1>
     f48:	00 91 32 38 	lds	r16, 0x3832	; 0x803832 <cal_c+0x2>
     f4c:	10 91 33 38 	lds	r17, 0x3833	; 0x803833 <cal_c+0x3>
     f50:	20 91 aa 38 	lds	r18, 0x38AA	; 0x8038aa <cal_b>
     f54:	30 91 ab 38 	lds	r19, 0x38AB	; 0x8038ab <cal_b+0x1>
     f58:	40 91 ac 38 	lds	r20, 0x38AC	; 0x8038ac <cal_b+0x2>
     f5c:	50 91 ad 38 	lds	r21, 0x38AD	; 0x8038ad <cal_b+0x3>
     f60:	60 91 99 38 	lds	r22, 0x3899	; 0x803899 <cal_a>
     f64:	70 91 9a 38 	lds	r23, 0x389A	; 0x80389a <cal_a+0x1>
     f68:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <cal_a+0x2>
     f6c:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <cal_a+0x3>
     f70:	0e 94 af 02 	call	0x55e	; 0x55e <build_cal_out_put>
     f74:	24 c3       	rjmp	.+1608   	; 0x15be <uart_handle+0xd5e>
			} // write RH cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
     f76:	c3 30       	cpi	r28, 0x03	; 3
     f78:	09 f4       	brne	.+2      	; 0xf7c <uart_handle+0x71c>
     f7a:	f8 c4       	rjmp	.+2544   	; 0x196c <uart_handle+0x110c>
     f7c:	8c 2f       	mov	r24, r28
     f7e:	8b 7f       	andi	r24, 0xFB	; 251
     f80:	89 30       	cpi	r24, 0x09	; 9
     f82:	09 f0       	breq	.+2      	; 0xf86 <uart_handle+0x726>
     f84:	9d c0       	rjmp	.+314    	; 0x10c0 <uart_handle+0x860>
					  memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     f86:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_start+0x6>
     f8a:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_start+0x7>
     f8e:	fb 01       	movw	r30, r22
     f90:	01 90       	ld	r0, Z+
     f92:	00 20       	and	r0, r0
     f94:	e9 f7       	brne	.-6      	; 0xf90 <uart_handle+0x730>
     f96:	31 97       	sbiw	r30, 0x01	; 1
     f98:	af 01       	movw	r20, r30
     f9a:	46 1b       	sub	r20, r22
     f9c:	57 0b       	sbc	r21, r23
     f9e:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
     fa2:	0d 2f       	mov	r16, r29
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	c8 01       	movw	r24, r16
     fa8:	87 5c       	subi	r24, 0xC7	; 199
     faa:	97 4c       	sbci	r25, 0xC7	; 199
     fac:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				v -= CAL_NUM_LEN * 3;
				
				write_temp_cal_eeprom();
				build_cal_out_put(cal_a, cal_b, cal_c);							
			} // write RH cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
     fb0:	89 2b       	or	r24, r25
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <uart_handle+0x756>
     fb4:	85 c0       	rjmp	.+266    	; 0x10c0 <uart_handle+0x860>
					  memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     fb6:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				
				write_temp_cal_eeprom();
				build_cal_out_put(cal_a, cal_b, cal_c);							
			} // write RH cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
					  memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	8d 2f       	mov	r24, r29
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	8a 96       	adiw	r24, 0x2a	; 42
     fc2:	28 17       	cp	r18, r24
     fc4:	39 07       	cpc	r19, r25
     fc6:	09 f0       	breq	.+2      	; 0xfca <uart_handle+0x76a>
     fc8:	7b c0       	rjmp	.+246    	; 0x10c0 <uart_handle+0x860>
					  v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     fca:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <write_enabled>
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <uart_handle+0x774>
     fd2:	76 c0       	rjmp	.+236    	; 0x10c0 <uart_handle+0x860>
					  write_enabled == 1)
			{
				memset(parse_buf, 0, sizeof(parse_buf));
     fd4:	c0 eb       	ldi	r28, 0xB0	; 176
     fd6:	d8 e3       	ldi	r29, 0x38	; 56
     fd8:	0f 2e       	mov	r0, r31
     fda:	f4 e1       	ldi	r31, 0x14	; 20
     fdc:	ff 2e       	mov	r15, r31
     fde:	f0 2d       	mov	r31, r0
     fe0:	fe 01       	movw	r30, r28
     fe2:	2f 2d       	mov	r18, r15
     fe4:	11 92       	st	Z+, r1
     fe6:	2a 95       	dec	r18
     fe8:	e9 f7       	brne	.-6      	; 0xfe4 <uart_handle+0x784>
				memcpy(parse_buf, recv + address_length + 1 + cmd_len[WCAL], CAL_NUM_LEN);
     fea:	f8 01       	movw	r30, r16
     fec:	e3 5c       	subi	r30, 0xC3	; 195
     fee:	f7 4c       	sbci	r31, 0xC7	; 199
     ff0:	8c e0       	ldi	r24, 0x0C	; 12
     ff2:	de 01       	movw	r26, r28
     ff4:	01 90       	ld	r0, Z+
     ff6:	0d 92       	st	X+, r0
     ff8:	8a 95       	dec	r24
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <uart_handle+0x794>
				cal_d = atof((char*)parse_buf);
     ffc:	ce 01       	movw	r24, r28
     ffe:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <atof>
    1002:	60 93 7f 38 	sts	0x387F, r22	; 0x80387f <cal_d>
    1006:	70 93 80 38 	sts	0x3880, r23	; 0x803880 <cal_d+0x1>
    100a:	80 93 81 38 	sts	0x3881, r24	; 0x803881 <cal_d+0x2>
    100e:	90 93 82 38 	sts	0x3882, r25	; 0x803882 <cal_d+0x3>
				memset(parse_buf, 0, sizeof(parse_buf));
    1012:	de 01       	movw	r26, r28
    1014:	ef 2d       	mov	r30, r15
    1016:	1d 92       	st	X+, r1
    1018:	ea 95       	dec	r30
    101a:	e9 f7       	brne	.-6      	; 0x1016 <uart_handle+0x7b6>
				memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN + cmd_len[WCAL], CAL_NUM_LEN);
    101c:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <address_length>
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	e7 5b       	subi	r30, 0xB7	; 183
    1024:	f7 4c       	sbci	r31, 0xC7	; 199
    1026:	8c e0       	ldi	r24, 0x0C	; 12
    1028:	de 01       	movw	r26, r28
    102a:	01 90       	ld	r0, Z+
    102c:	0d 92       	st	X+, r0
    102e:	8a 95       	dec	r24
    1030:	e1 f7       	brne	.-8      	; 0x102a <uart_handle+0x7ca>
				cal_e = atof((char*)parse_buf);
    1032:	ce 01       	movw	r24, r28
    1034:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <atof>
    1038:	60 93 95 38 	sts	0x3895, r22	; 0x803895 <cal_e>
    103c:	70 93 96 38 	sts	0x3896, r23	; 0x803896 <cal_e+0x1>
    1040:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <cal_e+0x2>
    1044:	90 93 98 38 	sts	0x3898, r25	; 0x803898 <cal_e+0x3>
				memset(parse_buf, 0, sizeof(parse_buf));
    1048:	de 01       	movw	r26, r28
    104a:	1d 92       	st	X+, r1
    104c:	fa 94       	dec	r15
    104e:	e9 f7       	brne	.-6      	; 0x104a <uart_handle+0x7ea>
				memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN * 2 + cmd_len[WCAL], CAL_NUM_LEN);
    1050:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <address_length>
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	eb 5a       	subi	r30, 0xAB	; 171
    1058:	f7 4c       	sbci	r31, 0xC7	; 199
    105a:	8c e0       	ldi	r24, 0x0C	; 12
    105c:	de 01       	movw	r26, r28
    105e:	01 90       	ld	r0, Z+
    1060:	0d 92       	st	X+, r0
    1062:	8a 95       	dec	r24
    1064:	e1 f7       	brne	.-8      	; 0x105e <uart_handle+0x7fe>
				cal_f = atof((char*)parse_buf);
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <atof>
    106c:	60 93 c8 38 	sts	0x38C8, r22	; 0x8038c8 <cal_f>
    1070:	70 93 c9 38 	sts	0x38C9, r23	; 0x8038c9 <cal_f+0x1>
    1074:	80 93 ca 38 	sts	0x38CA, r24	; 0x8038ca <cal_f+0x2>
    1078:	90 93 cb 38 	sts	0x38CB, r25	; 0x8038cb <cal_f+0x3>
				v -= CAL_NUM_LEN * 3;
    107c:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1080:	84 52       	subi	r24, 0x24	; 36
    1082:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
							
				write_rh_cal_eeprom();
    1086:	0e 94 bd 03 	call	0x77a	; 0x77a <write_rh_cal_eeprom>
				build_cal_out_put(cal_d, cal_e, cal_f);
    108a:	e0 90 c8 38 	lds	r14, 0x38C8	; 0x8038c8 <cal_f>
    108e:	f0 90 c9 38 	lds	r15, 0x38C9	; 0x8038c9 <cal_f+0x1>
    1092:	00 91 ca 38 	lds	r16, 0x38CA	; 0x8038ca <cal_f+0x2>
    1096:	10 91 cb 38 	lds	r17, 0x38CB	; 0x8038cb <cal_f+0x3>
    109a:	20 91 95 38 	lds	r18, 0x3895	; 0x803895 <cal_e>
    109e:	30 91 96 38 	lds	r19, 0x3896	; 0x803896 <cal_e+0x1>
    10a2:	40 91 97 38 	lds	r20, 0x3897	; 0x803897 <cal_e+0x2>
    10a6:	50 91 98 38 	lds	r21, 0x3898	; 0x803898 <cal_e+0x3>
    10aa:	60 91 7f 38 	lds	r22, 0x387F	; 0x80387f <cal_d>
    10ae:	70 91 80 38 	lds	r23, 0x3880	; 0x803880 <cal_d+0x1>
    10b2:	80 91 81 38 	lds	r24, 0x3881	; 0x803881 <cal_d+0x2>
    10b6:	90 91 82 38 	lds	r25, 0x3882	; 0x803882 <cal_d+0x3>
    10ba:	0e 94 af 02 	call	0x55e	; 0x55e <build_cal_out_put>
    10be:	7f c2       	rjmp	.+1278   	; 0x15be <uart_handle+0xd5e>
			} // RSRN
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    10c0:	c1 30       	cpi	r28, 0x01	; 1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <uart_handle+0x866>
    10c4:	1c c3       	rjmp	.+1592   	; 0x16fe <uart_handle+0xe9e>
    10c6:	c7 30       	cpi	r28, 0x07	; 7
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <uart_handle+0x870>
    10ca:	cb 30       	cpi	r28, 0x0B	; 11
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <uart_handle+0x870>
    10ce:	a0 c0       	rjmp	.+320    	; 0x1210 <uart_handle+0x9b0>
					  memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    10d0:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <__data_start+0x8>
    10d4:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <__data_start+0x9>
    10d8:	fb 01       	movw	r30, r22
    10da:	01 90       	ld	r0, Z+
    10dc:	00 20       	and	r0, r0
    10de:	e9 f7       	brne	.-6      	; 0x10da <uart_handle+0x87a>
    10e0:	31 97       	sbiw	r30, 0x01	; 1
    10e2:	af 01       	movw	r20, r30
    10e4:	46 1b       	sub	r20, r22
    10e6:	57 0b       	sbc	r21, r23
    10e8:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    10ec:	8d 2f       	mov	r24, r29
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	87 5c       	subi	r24, 0xC7	; 199
    10f2:	97 4c       	sbci	r25, 0xC7	; 199
    10f4:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				v -= CAL_NUM_LEN * 3;
							
				write_rh_cal_eeprom();
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // RSRN
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    10f8:	89 2b       	or	r24, r25
    10fa:	09 f4       	brne	.+2      	; 0x10fe <uart_handle+0x89e>
    10fc:	50 c4       	rjmp	.+2208   	; 0x199e <uart_handle+0x113e>
    10fe:	2b c0       	rjmp	.+86     	; 0x1156 <uart_handle+0x8f6>
					  memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
					  v == address_length + 2 + cmd_len[RSRN])
    1100:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
							
				write_rh_cal_eeprom();
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // RSRN
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					  memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8d 2f       	mov	r24, r29
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	06 96       	adiw	r24, 0x06	; 6
    110c:	28 17       	cp	r18, r24
    110e:	39 07       	cpc	r19, r25
    1110:	01 f5       	brne	.+64     	; 0x1152 <uart_handle+0x8f2>
					  v == address_length + 2 + cmd_len[RSRN])
			{
				v--;
    1112:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				write_enabled = 0;
    111c:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
				memcpy(recv + v, addr, ADDRESS_LEN);
    1120:	a0 91 17 38 	lds	r26, 0x3817	; 0x803817 <v>
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	a8 5c       	subi	r26, 0xC8	; 200
    1128:	b7 4c       	sbci	r27, 0xC7	; 199
    112a:	86 e0       	ldi	r24, 0x06	; 6
    112c:	e3 ea       	ldi	r30, 0xA3	; 163
    112e:	f8 e3       	ldi	r31, 0x38	; 56
    1130:	01 90       	ld	r0, Z+
    1132:	0d 92       	st	X+, r0
    1134:	8a 95       	dec	r24
    1136:	e1 f7       	brne	.-8      	; 0x1130 <uart_handle+0x8d0>
				v += ADDRESS_LEN;
    1138:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    113c:	8a 5f       	subi	r24, 0xFA	; 250
    113e:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				send_size = v;
    1142:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
    114c:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
				send_enable = 1;
    1150:	3d c2       	rjmp	.+1146   	; 0x15cc <uart_handle+0xd6c>
			} // RS read settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1152:	c1 30       	cpi	r28, 0x01	; 1
    1154:	29 f0       	breq	.+10     	; 0x1160 <uart_handle+0x900>
    1156:	c7 30       	cpi	r28, 0x07	; 7
    1158:	19 f0       	breq	.+6      	; 0x1160 <uart_handle+0x900>
    115a:	cb 30       	cpi	r28, 0x0B	; 11
    115c:	09 f0       	breq	.+2      	; 0x1160 <uart_handle+0x900>
    115e:	58 c0       	rjmp	.+176    	; 0x1210 <uart_handle+0x9b0>
					 memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1160:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1164:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1168:	fb 01       	movw	r30, r22
    116a:	01 90       	ld	r0, Z+
    116c:	00 20       	and	r0, r0
    116e:	e9 f7       	brne	.-6      	; 0x116a <uart_handle+0x90a>
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	af 01       	movw	r20, r30
    1174:	46 1b       	sub	r20, r22
    1176:	57 0b       	sbc	r21, r23
    1178:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    117c:	8d 2f       	mov	r24, r29
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	87 5c       	subi	r24, 0xC7	; 199
    1182:	97 4c       	sbci	r25, 0xC7	; 199
    1184:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				memcpy(recv + v, addr, ADDRESS_LEN);
				v += ADDRESS_LEN;
				send_size = v;
				send_enable = 1;
			} // RS read settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1188:	89 2b       	or	r24, r25
    118a:	09 f0       	breq	.+2      	; 0x118e <uart_handle+0x92e>
    118c:	41 c0       	rjmp	.+130    	; 0x1210 <uart_handle+0x9b0>
					 memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
					 v == address_length + 2 + cmd_len[RS])
    118e:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				v += ADDRESS_LEN;
				send_size = v;
				send_enable = 1;
			} // RS read settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					 memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8d 2f       	mov	r24, r29
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	04 96       	adiw	r24, 0x04	; 4
    119a:	28 17       	cp	r18, r24
    119c:	39 07       	cpc	r19, r25
    119e:	c1 f5       	brne	.+112    	; 0x1210 <uart_handle+0x9b0>
					 v == address_length + 2 + cmd_len[RS])
			{
				v--;
    11a0:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    11a4:	81 50       	subi	r24, 0x01	; 1
    11a6:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				write_enabled = 0;
    11aa:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
				GetHexString(single_primary_addr, hex_tmp);
    11ae:	69 e7       	ldi	r22, 0x79	; 121
    11b0:	78 e3       	ldi	r23, 0x38	; 56
    11b2:	80 91 af 38 	lds	r24, 0x38AF	; 0x8038af <single_primary_addr>
    11b6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <GetHexString>
				memcpy(recv + v, hex_tmp, 2);
    11ba:	e0 91 17 38 	lds	r30, 0x3817	; 0x803817 <v>
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	e8 5c       	subi	r30, 0xC8	; 200
    11c2:	f7 4c       	sbci	r31, 0xC7	; 199
    11c4:	c9 e7       	ldi	r28, 0x79	; 121
    11c6:	d8 e3       	ldi	r29, 0x38	; 56
    11c8:	88 81       	ld	r24, Y
    11ca:	99 81       	ldd	r25, Y+1	; 0x01
    11cc:	80 83       	st	Z, r24
    11ce:	91 83       	std	Z+1, r25	; 0x01
				v += 2;
    11d0:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    11d4:	8e 5f       	subi	r24, 0xFE	; 254
    11d6:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				GetHexString(uart_baud_rate, hex_tmp);
    11da:	be 01       	movw	r22, r28
    11dc:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <uart_baud_rate>
    11e0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <GetHexString>
				memcpy(recv + v, hex_tmp, 2);
    11e4:	e0 91 17 38 	lds	r30, 0x3817	; 0x803817 <v>
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	e8 5c       	subi	r30, 0xC8	; 200
    11ec:	f7 4c       	sbci	r31, 0xC7	; 199
    11ee:	88 81       	ld	r24, Y
    11f0:	99 81       	ldd	r25, Y+1	; 0x01
    11f2:	80 83       	st	Z, r24
    11f4:	91 83       	std	Z+1, r25	; 0x01
				v += 2;
    11f6:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    11fa:	8e 5f       	subi	r24, 0xFE	; 254
    11fc:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				
				send_size = v;
    1200:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
    120a:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
				send_enable = 1;
    120e:	de c1       	rjmp	.+956    	; 0x15cc <uart_handle+0xd6c>
			}  // RS read settings temp address
			else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    1210:	c2 30       	cpi	r28, 0x02	; 2
    1212:	09 f4       	brne	.+2      	; 0x1216 <uart_handle+0x9b6>
    1214:	8c c2       	rjmp	.+1304   	; 0x172e <uart_handle+0xece>
    1216:	c5 30       	cpi	r28, 0x05	; 5
    1218:	29 f0       	breq	.+10     	; 0x1224 <uart_handle+0x9c4>
    121a:	8c 2f       	mov	r24, r28
    121c:	8b 7f       	andi	r24, 0xFB	; 251
    121e:	88 30       	cpi	r24, 0x08	; 8
    1220:	09 f0       	breq	.+2      	; 0x1224 <uart_handle+0x9c4>
    1222:	45 c0       	rjmp	.+138    	; 0x12ae <uart_handle+0xa4e>
					 memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1224:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1228:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    122c:	fb 01       	movw	r30, r22
    122e:	01 90       	ld	r0, Z+
    1230:	00 20       	and	r0, r0
    1232:	e9 f7       	brne	.-6      	; 0x122e <uart_handle+0x9ce>
    1234:	31 97       	sbiw	r30, 0x01	; 1
    1236:	af 01       	movw	r20, r30
    1238:	46 1b       	sub	r20, r22
    123a:	57 0b       	sbc	r21, r23
    123c:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    1240:	8d 2f       	mov	r24, r29
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	87 5c       	subi	r24, 0xC7	; 199
    1246:	97 4c       	sbci	r25, 0xC7	; 199
    1248:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				v += 2;
				
				send_size = v;
				send_enable = 1;
			}  // RS read settings temp address
			else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    124c:	89 2b       	or	r24, r25
    124e:	09 f0       	breq	.+2      	; 0x1252 <uart_handle+0x9f2>
    1250:	b1 c3       	rjmp	.+1890   	; 0x19b4 <uart_handle+0x1154>
					 memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
					 v == address_length + 2 + cmd_len[RS])
    1252:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				
				send_size = v;
				send_enable = 1;
			}  // RS read settings temp address
			else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
					 memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	8d 2f       	mov	r24, r29
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	04 96       	adiw	r24, 0x04	; 4
    125e:	28 17       	cp	r18, r24
    1260:	39 07       	cpc	r19, r25
    1262:	29 f5       	brne	.+74     	; 0x12ae <uart_handle+0xa4e>
					 v == address_length + 2 + cmd_len[RS])
			{
				v--;
    1264:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1268:	81 50       	subi	r24, 0x01	; 1
    126a:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				write_enabled = 0;
    126e:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
				GetHexString(single_temp_addr, hex_tmp);
    1272:	69 e7       	ldi	r22, 0x79	; 121
    1274:	78 e3       	ldi	r23, 0x38	; 56
    1276:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <single_temp_addr>
    127a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <GetHexString>
				memcpy(recv + v, hex_tmp, 2);
    127e:	e0 91 17 38 	lds	r30, 0x3817	; 0x803817 <v>
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	e8 5c       	subi	r30, 0xC8	; 200
    1286:	f7 4c       	sbci	r31, 0xC7	; 199
    1288:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <hex_tmp>
    128c:	90 91 7a 38 	lds	r25, 0x387A	; 0x80387a <hex_tmp+0x1>
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
				v += 2;
    1294:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1298:	8e 5f       	subi	r24, 0xFE	; 254
    129a:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				send_size = v;
    129e:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
    12a8:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
				send_enable = 1;
    12ac:	8f c1       	rjmp	.+798    	; 0x15cc <uart_handle+0xd6c>
			} // RS read settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    12ae:	c3 30       	cpi	r28, 0x03	; 3
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <uart_handle+0xa54>
    12b2:	55 c2       	rjmp	.+1194   	; 0x175e <uart_handle+0xefe>
    12b4:	c6 30       	cpi	r28, 0x06	; 6
    12b6:	09 f4       	brne	.+2      	; 0x12ba <uart_handle+0xa5a>
    12b8:	9a c2       	rjmp	.+1332   	; 0x17ee <uart_handle+0xf8e>
    12ba:	c9 30       	cpi	r28, 0x09	; 9
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <uart_handle+0xa60>
    12be:	7f c2       	rjmp	.+1278   	; 0x17be <uart_handle+0xf5e>
    12c0:	cd 30       	cpi	r28, 0x0D	; 13
    12c2:	31 f5       	brne	.+76     	; 0x1310 <uart_handle+0xab0>
    12c4:	64 c2       	rjmp	.+1224   	; 0x178e <uart_handle+0xf2e>
			memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
			v == address_length + 2 + cmd_len[RS])
			{
				v--;
    12c6:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    12ca:	81 50       	subi	r24, 0x01	; 1
    12cc:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				write_enabled = 0;
    12d0:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
				GetHexString(single_rh_addr, hex_tmp);
    12d4:	69 e7       	ldi	r22, 0x79	; 121
    12d6:	78 e3       	ldi	r23, 0x38	; 56
    12d8:	80 91 94 38 	lds	r24, 0x3894	; 0x803894 <single_rh_addr>
    12dc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <GetHexString>
				memcpy(recv + v, hex_tmp, 2);
    12e0:	e0 91 17 38 	lds	r30, 0x3817	; 0x803817 <v>
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	e8 5c       	subi	r30, 0xC8	; 200
    12e8:	f7 4c       	sbci	r31, 0xC7	; 199
    12ea:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <hex_tmp>
    12ee:	90 91 7a 38 	lds	r25, 0x387A	; 0x80387a <hex_tmp+0x1>
    12f2:	80 83       	st	Z, r24
    12f4:	91 83       	std	Z+1, r25	; 0x01
				v += 2;
    12f6:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    12fa:	8e 5f       	subi	r24, 0xFE	; 254
    12fc:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				send_size = v;
    1300:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
    130a:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
				send_enable = 1;
    130e:	5e c1       	rjmp	.+700    	; 0x15cc <uart_handle+0xd6c>
			} // SU write settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1310:	c1 30       	cpi	r28, 0x01	; 1
    1312:	09 f4       	brne	.+2      	; 0x1316 <uart_handle+0xab6>
    1314:	84 c2       	rjmp	.+1288   	; 0x181e <uart_handle+0xfbe>
    1316:	c7 30       	cpi	r28, 0x07	; 7
    1318:	09 f4       	brne	.+2      	; 0x131c <uart_handle+0xabc>
    131a:	5b c3       	rjmp	.+1718   	; 0x19d2 <uart_handle+0x1172>
    131c:	cb 30       	cpi	r28, 0x0B	; 11
    131e:	09 f0       	breq	.+2      	; 0x1322 <uart_handle+0xac2>
    1320:	82 c0       	rjmp	.+260    	; 0x1426 <uart_handle+0xbc6>
					 memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1322:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    1326:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    132a:	fb 01       	movw	r30, r22
    132c:	01 90       	ld	r0, Z+
    132e:	00 20       	and	r0, r0
    1330:	e9 f7       	brne	.-6      	; 0x132c <uart_handle+0xacc>
    1332:	31 97       	sbiw	r30, 0x01	; 1
    1334:	af 01       	movw	r20, r30
    1336:	46 1b       	sub	r20, r22
    1338:	57 0b       	sbc	r21, r23
    133a:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    133e:	0d 2f       	mov	r16, r29
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	c8 01       	movw	r24, r16
    1344:	87 5c       	subi	r24, 0xC7	; 199
    1346:	97 4c       	sbci	r25, 0xC7	; 199
    1348:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				memcpy(recv + v, hex_tmp, 2);
				v += 2;
				send_size = v;
				send_enable = 1;
			} // SU write settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    134c:	89 2b       	or	r24, r25
    134e:	09 f0       	breq	.+2      	; 0x1352 <uart_handle+0xaf2>
    1350:	6a c0       	rjmp	.+212    	; 0x1426 <uart_handle+0xbc6>
					 memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
					 v >= address_length + 2 + cmd_len[SU] && 
    1352:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				v += 2;
				send_size = v;
				send_enable = 1;
			} // SU write settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					 memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	8d 2f       	mov	r24, r29
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	04 96       	adiw	r24, 0x04	; 4
    135e:	28 17       	cp	r18, r24
    1360:	39 07       	cpc	r19, r25
    1362:	0c f4       	brge	.+2      	; 0x1366 <uart_handle+0xb06>
    1364:	60 c0       	rjmp	.+192    	; 0x1426 <uart_handle+0xbc6>
					 v >= address_length + 2 + cmd_len[SU] && 
    1366:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <write_enabled>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	09 f0       	breq	.+2      	; 0x1370 <uart_handle+0xb10>
    136e:	5b c0       	rjmp	.+182    	; 0x1426 <uart_handle+0xbc6>
					 write_enabled == 1)
			{
				v--;
    1370:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1374:	81 50       	subi	r24, 0x01	; 1
    1376:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				write_enabled = 0;
    137a:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
				memcpy(hex_tmp, recv + address_length + 1 + cmd_len[SU], 2);
    137e:	f8 01       	movw	r30, r16
    1380:	e5 5c       	subi	r30, 0xC5	; 197
    1382:	f7 4c       	sbci	r31, 0xC7	; 199
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <hex_tmp>
    138c:	90 93 7a 38 	sts	0x387A, r25	; 0x80387a <hex_tmp+0x1>
				tmp_addr = GetByteFromString(hex_tmp);
    1390:	89 e7       	ldi	r24, 0x79	; 121
    1392:	98 e3       	ldi	r25, 0x38	; 56
    1394:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <GetByteFromString>
    1398:	80 93 78 38 	sts	0x3878, r24	; 0x803878 <tmp_addr>
				memcpy(hex_tmp, recv + address_length + 3 + cmd_len[SU], 2);
    139c:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <address_length>
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	e3 5c       	subi	r30, 0xC3	; 195
    13a4:	f7 4c       	sbci	r31, 0xC7	; 199
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <hex_tmp>
    13ae:	90 93 7a 38 	sts	0x387A, r25	; 0x80387a <hex_tmp+0x1>
				tmp_uart = GetByteFromString(hex_tmp);
    13b2:	89 e7       	ldi	r24, 0x79	; 121
    13b4:	98 e3       	ldi	r25, 0x38	; 56
    13b6:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <GetByteFromString>
    13ba:	80 93 a9 38 	sts	0x38A9, r24	; 0x8038a9 <tmp_uart>
				
				if (tmp_addr >= 0x21 && temp_data <= 0x7E)
    13be:	c0 91 78 38 	lds	r28, 0x3878	; 0x803878 <tmp_addr>
    13c2:	c1 32       	cpi	r28, 0x21	; 33
    13c4:	b8 f0       	brcs	.+46     	; 0x13f4 <uart_handle+0xb94>
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	4c ef       	ldi	r20, 0xFC	; 252
    13cc:	52 e4       	ldi	r21, 0x42	; 66
    13ce:	60 91 7b 38 	lds	r22, 0x387B	; 0x80387b <temp_data>
    13d2:	70 91 7c 38 	lds	r23, 0x387C	; 0x80387c <temp_data+0x1>
    13d6:	80 91 7d 38 	lds	r24, 0x387D	; 0x80387d <temp_data+0x2>
    13da:	90 91 7e 38 	lds	r25, 0x387E	; 0x80387e <temp_data+0x3>
    13de:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__cmpsf2>
    13e2:	18 16       	cp	r1, r24
    13e4:	3c f0       	brlt	.+14     	; 0x13f4 <uart_handle+0xb94>
				{
					single_primary_addr = tmp_addr;
    13e6:	c0 93 af 38 	sts	0x38AF, r28	; 0x8038af <single_primary_addr>
					EEPROM_write(EEPROM_PRIMARY_ID_START_BYTE, single_primary_addr);
    13ea:	6c 2f       	mov	r22, r28
    13ec:	87 e2       	ldi	r24, 0x27	; 39
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
				}
				
				if (tmp_uart == 0x02 || tmp_uart == 0x04 || tmp_uart == 0x05 || tmp_uart == 0x06 || tmp_uart == 0x07)
    13f4:	60 91 a9 38 	lds	r22, 0x38A9	; 0x8038a9 <tmp_uart>
    13f8:	62 30       	cpi	r22, 0x02	; 2
    13fa:	21 f0       	breq	.+8      	; 0x1404 <uart_handle+0xba4>
    13fc:	8c ef       	ldi	r24, 0xFC	; 252
    13fe:	86 0f       	add	r24, r22
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	48 f4       	brcc	.+18     	; 0x1416 <uart_handle+0xbb6>
				{
					uart_baud_rate = tmp_uart;
    1404:	60 93 ae 38 	sts	0x38AE, r22	; 0x8038ae <uart_baud_rate>
					EEPROM_write(EEPROM_BAUD_RATE_START_BYTE, uart_baud_rate);
    1408:	88 e2       	ldi	r24, 0x28	; 40
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
					bUpdateUart = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <__data_end>
				}
				
				send_size = v;
    1416:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
    1420:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
				send_enable = 1;
    1424:	d3 c0       	rjmp	.+422    	; 0x15cc <uart_handle+0xd6c>
			}  // SU write settings temp address
			else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    1426:	c2 30       	cpi	r28, 0x02	; 2
    1428:	39 f0       	breq	.+14     	; 0x1438 <uart_handle+0xbd8>
    142a:	c5 30       	cpi	r28, 0x05	; 5
    142c:	29 f0       	breq	.+10     	; 0x1438 <uart_handle+0xbd8>
    142e:	8c 2f       	mov	r24, r28
    1430:	8b 7f       	andi	r24, 0xFB	; 251
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	09 f0       	breq	.+2      	; 0x1438 <uart_handle+0xbd8>
    1436:	5e c0       	rjmp	.+188    	; 0x14f4 <uart_handle+0xc94>
					  memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1438:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    143c:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    1440:	fb 01       	movw	r30, r22
    1442:	01 90       	ld	r0, Z+
    1444:	00 20       	and	r0, r0
    1446:	e9 f7       	brne	.-6      	; 0x1442 <uart_handle+0xbe2>
    1448:	31 97       	sbiw	r30, 0x01	; 1
    144a:	af 01       	movw	r20, r30
    144c:	46 1b       	sub	r20, r22
    144e:	57 0b       	sbc	r21, r23
    1450:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    1454:	0d 2f       	mov	r16, r29
    1456:	10 e0       	ldi	r17, 0x00	; 0
    1458:	c8 01       	movw	r24, r16
    145a:	87 5c       	subi	r24, 0xC7	; 199
    145c:	97 4c       	sbci	r25, 0xC7	; 199
    145e:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				}
				
				send_size = v;
				send_enable = 1;
			}  // SU write settings temp address
			else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    1462:	89 2b       	or	r24, r25
    1464:	09 f0       	breq	.+2      	; 0x1468 <uart_handle+0xc08>
    1466:	f4 c1       	rjmp	.+1000   	; 0x1850 <uart_handle+0xff0>
					  memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
					  v >= address_length + 2 + cmd_len[SU] && 
    1468:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				
				send_size = v;
				send_enable = 1;
			}  // SU write settings temp address
			else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
					  memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	c8 01       	movw	r24, r16
    1470:	04 96       	adiw	r24, 0x04	; 4
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	0c f4       	brge	.+2      	; 0x147a <uart_handle+0xc1a>
    1478:	ef c1       	rjmp	.+990    	; 0x1858 <uart_handle+0xff8>
					  v >= address_length + 2 + cmd_len[SU] && 
    147a:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <write_enabled>
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	09 f0       	breq	.+2      	; 0x1484 <uart_handle+0xc24>
    1482:	ea c1       	rjmp	.+980    	; 0x1858 <uart_handle+0xff8>
				      write_enabled == 1)
			{
				v--;
    1484:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1488:	81 50       	subi	r24, 0x01	; 1
    148a:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				write_enabled = 0;
    148e:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
				memcpy(hex_tmp, recv + address_length + 1 + cmd_len[SU], 2);
    1492:	f8 01       	movw	r30, r16
    1494:	e5 5c       	subi	r30, 0xC5	; 197
    1496:	f7 4c       	sbci	r31, 0xC7	; 199
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <hex_tmp>
    14a0:	90 93 7a 38 	sts	0x387A, r25	; 0x80387a <hex_tmp+0x1>
				tmp_addr = GetByteFromString(hex_tmp);
    14a4:	89 e7       	ldi	r24, 0x79	; 121
    14a6:	98 e3       	ldi	r25, 0x38	; 56
    14a8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <GetByteFromString>
    14ac:	c8 2f       	mov	r28, r24
    14ae:	80 93 78 38 	sts	0x3878, r24	; 0x803878 <tmp_addr>
				
				if (tmp_addr >= 0x21 && temp_data <= 0x7E)
    14b2:	81 32       	cpi	r24, 0x21	; 33
    14b4:	b8 f0       	brcs	.+46     	; 0x14e4 <uart_handle+0xc84>
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4c ef       	ldi	r20, 0xFC	; 252
    14bc:	52 e4       	ldi	r21, 0x42	; 66
    14be:	60 91 7b 38 	lds	r22, 0x387B	; 0x80387b <temp_data>
    14c2:	70 91 7c 38 	lds	r23, 0x387C	; 0x80387c <temp_data+0x1>
    14c6:	80 91 7d 38 	lds	r24, 0x387D	; 0x80387d <temp_data+0x2>
    14ca:	90 91 7e 38 	lds	r25, 0x387E	; 0x80387e <temp_data+0x3>
    14ce:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__cmpsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	3c f0       	brlt	.+14     	; 0x14e4 <uart_handle+0xc84>
				{
					single_temp_addr = tmp_addr;
    14d6:	c0 93 93 38 	sts	0x3893, r28	; 0x803893 <single_temp_addr>
					EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
    14da:	6c 2f       	mov	r22, r28
    14dc:	85 e2       	ldi	r24, 0x25	; 37
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
				}
				send_size = v;
    14e4:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
    14ee:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
				send_enable = 1;
    14f2:	6c c0       	rjmp	.+216    	; 0x15cc <uart_handle+0xd6c>
			} // SU write settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    14f4:	c3 30       	cpi	r28, 0x03	; 3
    14f6:	31 f0       	breq	.+12     	; 0x1504 <uart_handle+0xca4>
    14f8:	c6 30       	cpi	r28, 0x06	; 6
    14fa:	21 f0       	breq	.+8      	; 0x1504 <uart_handle+0xca4>
    14fc:	cb 7f       	andi	r28, 0xFB	; 251
    14fe:	c9 30       	cpi	r28, 0x09	; 9
    1500:	09 f0       	breq	.+2      	; 0x1504 <uart_handle+0xca4>
    1502:	5d c0       	rjmp	.+186    	; 0x15be <uart_handle+0xd5e>
					  memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1504:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    1508:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    150c:	fb 01       	movw	r30, r22
    150e:	01 90       	ld	r0, Z+
    1510:	00 20       	and	r0, r0
    1512:	e9 f7       	brne	.-6      	; 0x150e <uart_handle+0xcae>
    1514:	31 97       	sbiw	r30, 0x01	; 1
    1516:	af 01       	movw	r20, r30
    1518:	46 1b       	sub	r20, r22
    151a:	57 0b       	sbc	r21, r23
    151c:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    1520:	0d 2f       	mov	r16, r29
    1522:	10 e0       	ldi	r17, 0x00	; 0
    1524:	c8 01       	movw	r24, r16
    1526:	87 5c       	subi	r24, 0xC7	; 199
    1528:	97 4c       	sbci	r25, 0xC7	; 199
    152a:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
					EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
				}
				send_size = v;
				send_enable = 1;
			} // SU write settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    152e:	89 2b       	or	r24, r25
    1530:	09 f0       	breq	.+2      	; 0x1534 <uart_handle+0xcd4>
    1532:	45 c0       	rjmp	.+138    	; 0x15be <uart_handle+0xd5e>
					  memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
					  v >= address_length + 2 + cmd_len[SU] && 
    1534:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				}
				send_size = v;
				send_enable = 1;
			} // SU write settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
					  memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	8d 2f       	mov	r24, r29
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	04 96       	adiw	r24, 0x04	; 4
    1540:	28 17       	cp	r18, r24
    1542:	39 07       	cpc	r19, r25
    1544:	e4 f1       	brlt	.+120    	; 0x15be <uart_handle+0xd5e>
					  v >= address_length + 2 + cmd_len[SU] && 
    1546:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <write_enabled>
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	c1 f5       	brne	.+112    	; 0x15be <uart_handle+0xd5e>
					  write_enabled == 1)
			{
				v--;
    154e:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    1552:	81 50       	subi	r24, 0x01	; 1
    1554:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <v>
				write_enabled = 0;
    1558:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <write_enabled>
				memcpy(hex_tmp, recv + address_length + 1 + cmd_len[SU], 2);
    155c:	f8 01       	movw	r30, r16
    155e:	e5 5c       	subi	r30, 0xC5	; 197
    1560:	f7 4c       	sbci	r31, 0xC7	; 199
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <hex_tmp>
    156a:	90 93 7a 38 	sts	0x387A, r25	; 0x80387a <hex_tmp+0x1>
				tmp_addr = GetByteFromString(hex_tmp);
    156e:	89 e7       	ldi	r24, 0x79	; 121
    1570:	98 e3       	ldi	r25, 0x38	; 56
    1572:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <GetByteFromString>
    1576:	c8 2f       	mov	r28, r24
    1578:	80 93 78 38 	sts	0x3878, r24	; 0x803878 <tmp_addr>
				
				if (tmp_addr >= 0x21 && temp_data <= 0x7E)
    157c:	81 32       	cpi	r24, 0x21	; 33
    157e:	b8 f0       	brcs	.+46     	; 0x15ae <uart_handle+0xd4e>
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	4c ef       	ldi	r20, 0xFC	; 252
    1586:	52 e4       	ldi	r21, 0x42	; 66
    1588:	60 91 7b 38 	lds	r22, 0x387B	; 0x80387b <temp_data>
    158c:	70 91 7c 38 	lds	r23, 0x387C	; 0x80387c <temp_data+0x1>
    1590:	80 91 7d 38 	lds	r24, 0x387D	; 0x80387d <temp_data+0x2>
    1594:	90 91 7e 38 	lds	r25, 0x387E	; 0x80387e <temp_data+0x3>
    1598:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__cmpsf2>
    159c:	18 16       	cp	r1, r24
    159e:	3c f0       	brlt	.+14     	; 0x15ae <uart_handle+0xd4e>
				{
					single_rh_addr = tmp_addr;
    15a0:	c0 93 94 38 	sts	0x3894, r28	; 0x803894 <single_rh_addr>
					EEPROM_write(EEPROM_RH_ADDR_START_BYTE, single_rh_addr);
    15a4:	6c 2f       	mov	r22, r28
    15a6:	86 e2       	ldi	r24, 0x26	; 38
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
				}
				send_size = v;
    15ae:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <v>
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <send_size>
    15b8:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <send_size+0x1>
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <uart_handle+0xd6c>
				send_enable = 1;
			}
			
			if (send_enable == 1)
    15be:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <send_enable>
    15c2:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <send_enable+0x1>
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <uart_handle+0xd6c>
    15ca:	42 c0       	rjmp	.+132    	; 0x1650 <uart_handle+0xdf0>
			{
				send_enable = 0;
    15cc:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <send_enable>
    15d0:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <send_enable+0x1>
				if (delay != 0)
    15d4:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <delay>
    15d8:	90 91 1a 38 	lds	r25, 0x381A	; 0x80381a <delay+0x1>
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	e1 f0       	breq	.+56     	; 0x1618 <uart_handle+0xdb8>
				{
					for(n = 0; n < delay; n++)
    15e0:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <n>
    15e4:	20 91 15 38 	lds	r18, 0x3815	; 0x803815 <n>
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	28 17       	cp	r18, r24
    15ec:	39 07       	cpc	r19, r25
    15ee:	a4 f4       	brge	.+40     	; 0x1618 <uart_handle+0xdb8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15f0:	e2 e6       	ldi	r30, 0x62	; 98
    15f2:	f3 e0       	ldi	r31, 0x03	; 3
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <uart_handle+0xd94>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <uart_handle+0xd9a>
    15fa:	80 91 15 38 	lds	r24, 0x3815	; 0x803815 <n>
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
    1600:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <n>
    1604:	80 91 15 38 	lds	r24, 0x3815	; 0x803815 <n>
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	20 91 19 38 	lds	r18, 0x3819	; 0x803819 <delay>
    160e:	30 91 1a 38 	lds	r19, 0x381A	; 0x80381a <delay+0x1>
    1612:	82 17       	cp	r24, r18
    1614:	93 07       	cpc	r25, r19
    1616:	64 f3       	brlt	.-40     	; 0x15f0 <uart_handle+0xd90>
					{
						_delay_us(1040);
					}
				}
				print_bytes((uint8_t *)recv, send_size, check_sum_enable);
    1618:	40 91 1b 38 	lds	r20, 0x381B	; 0x80381b <check_sum_enable>
    161c:	50 91 1c 38 	lds	r21, 0x381C	; 0x80381c <check_sum_enable+0x1>
    1620:	60 91 11 38 	lds	r22, 0x3811	; 0x803811 <send_size>
    1624:	88 e3       	ldi	r24, 0x38	; 56
    1626:	98 e3       	ldi	r25, 0x38	; 56
    1628:	0e 94 0d 11 	call	0x221a	; 0x221a <print_bytes>
				
				if (bUpdateUart)
    162c:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
    1630:	88 23       	and	r24, r24
    1632:	71 f0       	breq	.+28     	; 0x1650 <uart_handle+0xdf0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1634:	fa e2       	ldi	r31, 0x2A	; 42
    1636:	2c e2       	ldi	r18, 0x2C	; 44
    1638:	8a e0       	ldi	r24, 0x0A	; 10
    163a:	f1 50       	subi	r31, 0x01	; 1
    163c:	20 40       	sbci	r18, 0x00	; 0
    163e:	80 40       	sbci	r24, 0x00	; 0
    1640:	e1 f7       	brne	.-8      	; 0x163a <uart_handle+0xdda>
    1642:	00 00       	nop
				{
					_delay_ms(1000);
					bUpdateUart = 0;
    1644:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <__data_end>
					initUSART(uart_baud_rate);
    1648:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <uart_baud_rate>
    164c:	0e 94 76 10 	call	0x20ec	; 0x20ec <initUSART>
				}
			}
			address_type = 0;
    1650:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <address_type>
			v = 0;
    1654:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <v>
    1658:	ec c1       	rjmp	.+984    	; 0x1a32 <uart_handle+0x11d2>
		}
	}
	else {
		address_type = 0;
    165a:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <address_type>
		v = 0;
    165e:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <v>
    1662:	e7 c1       	rjmp	.+974    	; 0x1a32 <uart_handle+0x11d2>
			{
				read_temp_rh(&temp_data, &rh_data);
				build_output(temp_data);
			} // Other RD output
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    1664:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    1668:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    166c:	fb 01       	movw	r30, r22
    166e:	01 90       	ld	r0, Z+
    1670:	00 20       	and	r0, r0
    1672:	e9 f7       	brne	.-6      	; 0x166e <uart_handle+0xe0e>
    1674:	31 97       	sbiw	r30, 0x01	; 1
    1676:	af 01       	movw	r20, r30
    1678:	46 1b       	sub	r20, r22
    167a:	57 0b       	sbc	r21, r23
    167c:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    1680:	8d 2f       	mov	r24, r29
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	87 5c       	subi	r24, 0xC7	; 199
    1686:	97 4c       	sbci	r25, 0xC7	; 199
    1688:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
					v == address_length + 2 + cmd_len[RD])
			{
				read_temp_rh(&temp_data, &rh_data);
				build_output(temp_data);
			} // Other RD output
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    168c:	89 2b       	or	r24, r25
    168e:	09 f4       	brne	.+2      	; 0x1692 <uart_handle+0xe32>
    1690:	2f c1       	rjmp	.+606    	; 0x18f0 <uart_handle+0x1090>
    1692:	39 c1       	rjmp	.+626    	; 0x1906 <uart_handle+0x10a6>
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
			          v == address_length + 2 + cmd_len[RD])
			{
				build_output(ERROR_SYNTAX);
			} // WE
			else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) && 
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	8c 0f       	add	r24, r28
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	08 f0       	brcs	.+2      	; 0x169e <uart_handle+0xe3e>
    169c:	11 cb       	rjmp	.-2526   	; 0xcc0 <uart_handle+0x460>
    169e:	19 cb       	rjmp	.-2510   	; 0xcd2 <uart_handle+0x472>
			{
				write_enabled = 1;
				send_enable = 1;
				send_size = v - 1;
			} // Read Temp Cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
    16a0:	c2 30       	cpi	r28, 0x02	; 2
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <uart_handle+0xe46>
    16a4:	83 cb       	rjmp	.-2298   	; 0xdac <uart_handle+0x54c>
    16a6:	48 cb       	rjmp	.-2416   	; 0xd38 <uart_handle+0x4d8>
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    16a8:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
    16ac:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
    16b0:	fb 01       	movw	r30, r22
    16b2:	01 90       	ld	r0, Z+
    16b4:	00 20       	and	r0, r0
    16b6:	e9 f7       	brne	.-6      	; 0x16b2 <uart_handle+0xe52>
    16b8:	31 97       	sbiw	r30, 0x01	; 1
    16ba:	af 01       	movw	r20, r30
    16bc:	46 1b       	sub	r20, r22
    16be:	57 0b       	sbc	r21, r23
    16c0:	c8 01       	movw	r24, r16
    16c2:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
			{
				write_enabled = 1;
				send_enable = 1;
				send_size = v - 1;
			} // Read Temp Cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
    16c6:	89 2b       	or	r24, r25
    16c8:	09 f4       	brne	.+2      	; 0x16cc <uart_handle+0xe6c>
    16ca:	36 c1       	rjmp	.+620    	; 0x1938 <uart_handle+0x10d8>
    16cc:	b8 cb       	rjmp	.-2192   	; 0xe3e <uart_handle+0x5de>
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_a, cal_b, cal_c);
			} // Read RH Cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    16ce:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
    16d2:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
    16d6:	fb 01       	movw	r30, r22
    16d8:	01 90       	ld	r0, Z+
    16da:	00 20       	and	r0, r0
    16dc:	e9 f7       	brne	.-6      	; 0x16d8 <uart_handle+0xe78>
    16de:	31 97       	sbiw	r30, 0x01	; 1
    16e0:	af 01       	movw	r20, r30
    16e2:	46 1b       	sub	r20, r22
    16e4:	57 0b       	sbc	r21, r23
    16e6:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    16ea:	8d 2f       	mov	r24, r29
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	87 5c       	subi	r24, 0xC7	; 199
    16f0:	97 4c       	sbci	r25, 0xC7	; 199
    16f2:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_a, cal_b, cal_c);
			} // Read RH Cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
    16f6:	89 2b       	or	r24, r25
    16f8:	09 f4       	brne	.+2      	; 0x16fc <uart_handle+0xe9c>
    16fa:	29 c1       	rjmp	.+594    	; 0x194e <uart_handle+0x10ee>
    16fc:	37 c1       	rjmp	.+622    	; 0x196c <uart_handle+0x110c>
							
				write_rh_cal_eeprom();
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // RSRN
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					  memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    16fe:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <__data_start+0x8>
    1702:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <__data_start+0x9>
    1706:	fb 01       	movw	r30, r22
    1708:	01 90       	ld	r0, Z+
    170a:	00 20       	and	r0, r0
    170c:	e9 f7       	brne	.-6      	; 0x1708 <uart_handle+0xea8>
    170e:	31 97       	sbiw	r30, 0x01	; 1
    1710:	af 01       	movw	r20, r30
    1712:	46 1b       	sub	r20, r22
    1714:	57 0b       	sbc	r21, r23
    1716:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    171a:	8d 2f       	mov	r24, r29
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	87 5c       	subi	r24, 0xC7	; 199
    1720:	97 4c       	sbci	r25, 0xC7	; 199
    1722:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				v -= CAL_NUM_LEN * 3;
							
				write_rh_cal_eeprom();
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // RSRN
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1726:	89 2b       	or	r24, r25
    1728:	09 f4       	brne	.+2      	; 0x172c <uart_handle+0xecc>
    172a:	ea cc       	rjmp	.-1580   	; 0x1100 <uart_handle+0x8a0>
    172c:	19 cd       	rjmp	.-1486   	; 0x1160 <uart_handle+0x900>
				
				send_size = v;
				send_enable = 1;
			}  // RS read settings temp address
			else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
					 memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    172e:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1732:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1736:	fb 01       	movw	r30, r22
    1738:	01 90       	ld	r0, Z+
    173a:	00 20       	and	r0, r0
    173c:	e9 f7       	brne	.-6      	; 0x1738 <uart_handle+0xed8>
    173e:	31 97       	sbiw	r30, 0x01	; 1
    1740:	af 01       	movw	r20, r30
    1742:	46 1b       	sub	r20, r22
    1744:	57 0b       	sbc	r21, r23
    1746:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    174a:	8d 2f       	mov	r24, r29
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	87 5c       	subi	r24, 0xC7	; 199
    1750:	97 4c       	sbci	r25, 0xC7	; 199
    1752:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				v += 2;
				
				send_size = v;
				send_enable = 1;
			}  // RS read settings temp address
			else if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) &&
    1756:	89 2b       	or	r24, r25
    1758:	09 f0       	breq	.+2      	; 0x175c <uart_handle+0xefc>
    175a:	6e ce       	rjmp	.-804    	; 0x1438 <uart_handle+0xbd8>
    175c:	7a cd       	rjmp	.-1292   	; 0x1252 <uart_handle+0x9f2>
				v += 2;
				send_size = v;
				send_enable = 1;
			} // RS read settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
			memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    175e:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1762:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1766:	fb 01       	movw	r30, r22
    1768:	01 90       	ld	r0, Z+
    176a:	00 20       	and	r0, r0
    176c:	e9 f7       	brne	.-6      	; 0x1768 <uart_handle+0xf08>
    176e:	31 97       	sbiw	r30, 0x01	; 1
    1770:	af 01       	movw	r20, r30
    1772:	46 1b       	sub	r20, r22
    1774:	57 0b       	sbc	r21, r23
    1776:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    177a:	8d 2f       	mov	r24, r29
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	87 5c       	subi	r24, 0xC7	; 199
    1780:	97 4c       	sbci	r25, 0xC7	; 199
    1782:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				memcpy(recv + v, hex_tmp, 2);
				v += 2;
				send_size = v;
				send_enable = 1;
			} // RS read settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1786:	89 2b       	or	r24, r25
    1788:	09 f4       	brne	.+2      	; 0x178c <uart_handle+0xf2c>
    178a:	18 c1       	rjmp	.+560    	; 0x19bc <uart_handle+0x115c>
    178c:	bb ce       	rjmp	.-650    	; 0x1504 <uart_handle+0xca4>
			memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    178e:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1792:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1796:	fb 01       	movw	r30, r22
    1798:	01 90       	ld	r0, Z+
    179a:	00 20       	and	r0, r0
    179c:	e9 f7       	brne	.-6      	; 0x1798 <uart_handle+0xf38>
    179e:	31 97       	sbiw	r30, 0x01	; 1
    17a0:	af 01       	movw	r20, r30
    17a2:	46 1b       	sub	r20, r22
    17a4:	57 0b       	sbc	r21, r23
    17a6:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    17aa:	8d 2f       	mov	r24, r29
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	87 5c       	subi	r24, 0xC7	; 199
    17b0:	97 4c       	sbci	r25, 0xC7	; 199
    17b2:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				memcpy(recv + v, hex_tmp, 2);
				v += 2;
				send_size = v;
				send_enable = 1;
			} // RS read settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    17b6:	89 2b       	or	r24, r25
    17b8:	09 f0       	breq	.+2      	; 0x17bc <uart_handle+0xf5c>
    17ba:	a4 ce       	rjmp	.-696    	; 0x1504 <uart_handle+0xca4>
    17bc:	ff c0       	rjmp	.+510    	; 0x19bc <uart_handle+0x115c>
			memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    17be:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    17c2:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    17c6:	fb 01       	movw	r30, r22
    17c8:	01 90       	ld	r0, Z+
    17ca:	00 20       	and	r0, r0
    17cc:	e9 f7       	brne	.-6      	; 0x17c8 <uart_handle+0xf68>
    17ce:	31 97       	sbiw	r30, 0x01	; 1
    17d0:	af 01       	movw	r20, r30
    17d2:	46 1b       	sub	r20, r22
    17d4:	57 0b       	sbc	r21, r23
    17d6:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    17da:	8d 2f       	mov	r24, r29
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	87 5c       	subi	r24, 0xC7	; 199
    17e0:	97 4c       	sbci	r25, 0xC7	; 199
    17e2:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				memcpy(recv + v, hex_tmp, 2);
				v += 2;
				send_size = v;
				send_enable = 1;
			} // RS read settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    17e6:	89 2b       	or	r24, r25
    17e8:	09 f0       	breq	.+2      	; 0x17ec <uart_handle+0xf8c>
    17ea:	8c ce       	rjmp	.-744    	; 0x1504 <uart_handle+0xca4>
    17ec:	e7 c0       	rjmp	.+462    	; 0x19bc <uart_handle+0x115c>
			memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    17ee:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    17f2:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    17f6:	fb 01       	movw	r30, r22
    17f8:	01 90       	ld	r0, Z+
    17fa:	00 20       	and	r0, r0
    17fc:	e9 f7       	brne	.-6      	; 0x17f8 <uart_handle+0xf98>
    17fe:	31 97       	sbiw	r30, 0x01	; 1
    1800:	af 01       	movw	r20, r30
    1802:	46 1b       	sub	r20, r22
    1804:	57 0b       	sbc	r21, r23
    1806:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    180a:	8d 2f       	mov	r24, r29
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	87 5c       	subi	r24, 0xC7	; 199
    1810:	97 4c       	sbci	r25, 0xC7	; 199
    1812:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				memcpy(recv + v, hex_tmp, 2);
				v += 2;
				send_size = v;
				send_enable = 1;
			} // RS read settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1816:	89 2b       	or	r24, r25
    1818:	09 f4       	brne	.+2      	; 0x181c <uart_handle+0xfbc>
    181a:	d0 c0       	rjmp	.+416    	; 0x19bc <uart_handle+0x115c>
    181c:	73 ce       	rjmp	.-794    	; 0x1504 <uart_handle+0xca4>
				v += 2;
				send_size = v;
				send_enable = 1;
			} // SU write settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					 memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    181e:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    1822:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    1826:	fb 01       	movw	r30, r22
    1828:	01 90       	ld	r0, Z+
    182a:	00 20       	and	r0, r0
    182c:	e9 f7       	brne	.-6      	; 0x1828 <uart_handle+0xfc8>
    182e:	31 97       	sbiw	r30, 0x01	; 1
    1830:	af 01       	movw	r20, r30
    1832:	46 1b       	sub	r20, r22
    1834:	57 0b       	sbc	r21, r23
    1836:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    183a:	0d 2f       	mov	r16, r29
    183c:	10 e0       	ldi	r17, 0x00	; 0
    183e:	c8 01       	movw	r24, r16
    1840:	87 5c       	subi	r24, 0xC7	; 199
    1842:	97 4c       	sbci	r25, 0xC7	; 199
    1844:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				memcpy(recv + v, hex_tmp, 2);
				v += 2;
				send_size = v;
				send_enable = 1;
			} // SU write settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    1848:	89 2b       	or	r24, r25
    184a:	09 f4       	brne	.+2      	; 0x184e <uart_handle+0xfee>
    184c:	db c0       	rjmp	.+438    	; 0x1a04 <uart_handle+0x11a4>
    184e:	b7 ce       	rjmp	.-658    	; 0x15be <uart_handle+0xd5e>
					EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
				}
				send_size = v;
				send_enable = 1;
			} // SU write settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1850:	c3 30       	cpi	r28, 0x03	; 3
    1852:	09 f0       	breq	.+2      	; 0x1856 <uart_handle+0xff6>
    1854:	e2 c0       	rjmp	.+452    	; 0x1a1a <uart_handle+0x11ba>
    1856:	b3 ce       	rjmp	.-666    	; 0x15be <uart_handle+0xd5e>
    1858:	c3 30       	cpi	r28, 0x03	; 3
    185a:	09 f4       	brne	.+2      	; 0x185e <uart_handle+0xffe>
    185c:	6b ce       	rjmp	.-810    	; 0x1534 <uart_handle+0xcd4>
    185e:	e6 c0       	rjmp	.+460    	; 0x1a2c <uart_handle+0x11cc>
			}
			
			recv[0] = '*';
			/* RD temperature sensor response, all address cases */
			if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) && 
				memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 && 
    1860:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    1864:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    1868:	fb 01       	movw	r30, r22
    186a:	01 90       	ld	r0, Z+
    186c:	00 20       	and	r0, r0
    186e:	e9 f7       	brne	.-6      	; 0x186a <uart_handle+0x100a>
    1870:	31 97       	sbiw	r30, 0x01	; 1
    1872:	af 01       	movw	r20, r30
    1874:	46 1b       	sub	r20, r22
    1876:	57 0b       	sbc	r21, r23
    1878:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    187c:	8d 2f       	mov	r24, r29
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	87 5c       	subi	r24, 0xC7	; 199
    1882:	97 4c       	sbci	r25, 0xC7	; 199
    1884:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				address_type = 0;
			}
			
			recv[0] = '*';
			/* RD temperature sensor response, all address cases */
			if ((address_type == 0x02 || address_type == 0x05 || address_type == 0x08 || address_type == 0x0c) && 
    1888:	89 2b       	or	r24, r25
    188a:	09 f4       	brne	.+2      	; 0x188e <uart_handle+0x102e>
    188c:	ec c8       	rjmp	.-3624   	; 0xa66 <uart_handle+0x206>
    188e:	3f c9       	rjmp	.-3458   	; 0xb0e <uart_handle+0x2ae>
				read_temp(&temp_data);
				temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
				build_output(temp_data);
			} // RD RH sensor response, all address cases
			else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
					memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    1890:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    1894:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    1898:	fb 01       	movw	r30, r22
    189a:	01 90       	ld	r0, Z+
    189c:	00 20       	and	r0, r0
    189e:	e9 f7       	brne	.-6      	; 0x189a <uart_handle+0x103a>
    18a0:	31 97       	sbiw	r30, 0x01	; 1
    18a2:	af 01       	movw	r20, r30
    18a4:	46 1b       	sub	r20, r22
    18a6:	57 0b       	sbc	r21, r23
    18a8:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    18ac:	8d 2f       	mov	r24, r29
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	87 5c       	subi	r24, 0xC7	; 199
    18b2:	97 4c       	sbci	r25, 0xC7	; 199
    18b4:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
			{
				read_temp(&temp_data);
				temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
				build_output(temp_data);
			} // RD RH sensor response, all address cases
			else if((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    18b8:	89 2b       	or	r24, r25
    18ba:	09 f4       	brne	.+2      	; 0x18be <uart_handle+0x105e>
    18bc:	44 c9       	rjmp	.-3448   	; 0xb46 <uart_handle+0x2e6>
    18be:	97 c9       	rjmp	.-3282   	; 0xbee <uart_handle+0x38e>
				read_temp_rh(&temp_data, &rh_data);
				rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;	
				build_output(rh_data);
			} // RD RH temp sensor response, all address cases
			else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
					memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    18c0:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    18c4:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    18c8:	fb 01       	movw	r30, r22
    18ca:	01 90       	ld	r0, Z+
    18cc:	00 20       	and	r0, r0
    18ce:	e9 f7       	brne	.-6      	; 0x18ca <uart_handle+0x106a>
    18d0:	31 97       	sbiw	r30, 0x01	; 1
    18d2:	af 01       	movw	r20, r30
    18d4:	46 1b       	sub	r20, r22
    18d6:	57 0b       	sbc	r21, r23
    18d8:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    18dc:	8d 2f       	mov	r24, r29
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	87 5c       	subi	r24, 0xC7	; 199
    18e2:	97 4c       	sbci	r25, 0xC7	; 199
    18e4:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>

				read_temp_rh(&temp_data, &rh_data);
				rh_data =  cal_d +  cal_e * rh_data + cal_f * rh_data * rh_data  ;	
				build_output(rh_data);
			} // RD RH temp sensor response, all address cases
			else if((address_type == 0x04 || address_type == 0x0a || address_type == 0x0e) &&
    18e8:	89 2b       	or	r24, r25
    18ea:	09 f4       	brne	.+2      	; 0x18ee <uart_handle+0x108e>
    18ec:	9a c9       	rjmp	.-3276   	; 0xc22 <uart_handle+0x3c2>
    18ee:	d2 ce       	rjmp	.-604    	; 0x1694 <uart_handle+0xe34>
				read_temp_rh(&temp_data, &rh_data);
				build_output(temp_data);
			} // Other RD output
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
			          v == address_length + 2 + cmd_len[RD])
    18f0:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
			{
				read_temp_rh(&temp_data, &rh_data);
				build_output(temp_data);
			} // Other RD output
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	8d 2f       	mov	r24, r29
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	04 96       	adiw	r24, 0x04	; 4
    18fc:	28 17       	cp	r18, r24
    18fe:	39 07       	cpc	r19, r25
    1900:	09 f0       	breq	.+2      	; 0x1904 <uart_handle+0x10a4>
    1902:	e7 c9       	rjmp	.-3122   	; 0xcd2 <uart_handle+0x472>
    1904:	cf c9       	rjmp	.-3170   	; 0xca4 <uart_handle+0x444>
			          v == address_length + 2 + cmd_len[RD])
			{
				build_output(ERROR_SYNTAX);
			} // WE
			else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) && 
					  memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 && 
    1906:	60 91 02 38 	lds	r22, 0x3802	; 0x803802 <__data_start+0x2>
    190a:	70 91 03 38 	lds	r23, 0x3803	; 0x803803 <__data_start+0x3>
    190e:	fb 01       	movw	r30, r22
    1910:	01 90       	ld	r0, Z+
    1912:	00 20       	and	r0, r0
    1914:	e9 f7       	brne	.-6      	; 0x1910 <uart_handle+0x10b0>
    1916:	31 97       	sbiw	r30, 0x01	; 1
    1918:	af 01       	movw	r20, r30
    191a:	46 1b       	sub	r20, r22
    191c:	57 0b       	sbc	r21, r23
    191e:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    1922:	0d 2f       	mov	r16, r29
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	07 5c       	subi	r16, 0xC7	; 199
    1928:	17 4c       	sbci	r17, 0xC7	; 199
    192a:	c8 01       	movw	r24, r16
    192c:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
					  memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
			          v == address_length + 2 + cmd_len[RD])
			{
				build_output(ERROR_SYNTAX);
			} // WE
			else if ((address_type == 0x01 || address_type == 0x02 || address_type == 0x03 || address_type == 0x07 || address_type == 0x08 || address_type == 0x09 || address_type == 0x0b || address_type == 0x0c || address_type == 0x0d) && 
    1930:	89 2b       	or	r24, r25
    1932:	09 f4       	brne	.+2      	; 0x1936 <uart_handle+0x10d6>
    1934:	e5 c9       	rjmp	.-3126   	; 0xd00 <uart_handle+0x4a0>
    1936:	fc c9       	rjmp	.-3080   	; 0xd30 <uart_handle+0x4d0>
				send_enable = 1;
				send_size = v - 1;
			} // Read Temp Cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[RCAL])
    1938:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				write_enabled = 1;
				send_enable = 1;
				send_size = v - 1;
			} // Read Temp Cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	8d 2f       	mov	r24, r29
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	06 96       	adiw	r24, 0x06	; 6
    1944:	28 17       	cp	r18, r24
    1946:	39 07       	cpc	r19, r25
    1948:	09 f0       	breq	.+2      	; 0x194c <uart_handle+0x10ec>
    194a:	33 ca       	rjmp	.-2970   	; 0xdb2 <uart_handle+0x552>
    194c:	14 ca       	rjmp	.-3032   	; 0xd76 <uart_handle+0x516>
			{
				build_cal_out_put(cal_a, cal_b, cal_c);
			} // Read RH Cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
					  v == address_length + 2 + cmd_len[RCAL])
    194e:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_a, cal_b, cal_c);
			} // Read RH Cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
					  memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8d 2f       	mov	r24, r29
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	06 96       	adiw	r24, 0x06	; 6
    195a:	28 17       	cp	r18, r24
    195c:	39 07       	cpc	r19, r25
    195e:	09 f0       	breq	.+2      	; 0x1962 <uart_handle+0x1102>
    1960:	69 ca       	rjmp	.-2862   	; 0xe34 <uart_handle+0x5d4>
    1962:	4b ca       	rjmp	.-2922   	; 0xdfa <uart_handle+0x59a>
					  v == address_length + 2 + cmd_len[RCAL])
			{
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // write temp cal
			else if ((address_type == 0x02 || address_type == 0x08 || address_type == 0x0c) &&
    1964:	c2 30       	cpi	r28, 0x02	; 2
    1966:	09 f0       	breq	.+2      	; 0x196a <uart_handle+0x110a>
    1968:	09 cb       	rjmp	.-2542   	; 0xf7c <uart_handle+0x71c>
    196a:	69 ca       	rjmp	.-2862   	; 0xe3e <uart_handle+0x5de>
				
				write_temp_cal_eeprom();
				build_cal_out_put(cal_a, cal_b, cal_c);							
			} // write RH cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
					  memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
    196c:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_start+0x6>
    1970:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_start+0x7>
    1974:	fb 01       	movw	r30, r22
    1976:	01 90       	ld	r0, Z+
    1978:	00 20       	and	r0, r0
    197a:	e9 f7       	brne	.-6      	; 0x1976 <uart_handle+0x1116>
    197c:	31 97       	sbiw	r30, 0x01	; 1
    197e:	af 01       	movw	r20, r30
    1980:	46 1b       	sub	r20, r22
    1982:	57 0b       	sbc	r21, r23
    1984:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    1988:	0d 2f       	mov	r16, r29
    198a:	10 e0       	ldi	r17, 0x00	; 0
    198c:	c8 01       	movw	r24, r16
    198e:	87 5c       	subi	r24, 0xC7	; 199
    1990:	97 4c       	sbci	r25, 0xC7	; 199
    1992:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				v -= CAL_NUM_LEN * 3;
				
				write_temp_cal_eeprom();
				build_cal_out_put(cal_a, cal_b, cal_c);							
			} // write RH cal
			else if ((address_type == 0x03 || address_type == 0x09 || address_type == 0x0d) &&
    1996:	89 2b       	or	r24, r25
    1998:	09 f4       	brne	.+2      	; 0x199c <uart_handle+0x113c>
    199a:	0d cb       	rjmp	.-2534   	; 0xfb6 <uart_handle+0x756>
    199c:	3e cc       	rjmp	.-1924   	; 0x121a <uart_handle+0x9ba>
				write_rh_cal_eeprom();
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // RSRN
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					  memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
					  v == address_length + 2 + cmd_len[RSRN])
    199e:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
							
				write_rh_cal_eeprom();
				build_cal_out_put(cal_d, cal_e, cal_f);
			} // RSRN
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					  memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	8d 2f       	mov	r24, r29
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	06 96       	adiw	r24, 0x06	; 6
    19aa:	28 17       	cp	r18, r24
    19ac:	39 07       	cpc	r19, r25
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <uart_handle+0x1152>
    19b0:	d2 cb       	rjmp	.-2140   	; 0x1156 <uart_handle+0x8f6>
    19b2:	af cb       	rjmp	.-2210   	; 0x1112 <uart_handle+0x8b2>
				memcpy(recv + v, hex_tmp, 2);
				v += 2;
				send_size = v;
				send_enable = 1;
			} // RS read settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    19b4:	c3 30       	cpi	r28, 0x03	; 3
    19b6:	09 f0       	breq	.+2      	; 0x19ba <uart_handle+0x115a>
    19b8:	7d cc       	rjmp	.-1798   	; 0x12b4 <uart_handle+0xa54>
    19ba:	a4 cd       	rjmp	.-1208   	; 0x1504 <uart_handle+0xca4>
			memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
			v == address_length + 2 + cmd_len[RS])
    19bc:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				v += 2;
				send_size = v;
				send_enable = 1;
			} // RS read settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
			memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	8d 2f       	mov	r24, r29
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	04 96       	adiw	r24, 0x04	; 4
    19c8:	28 17       	cp	r18, r24
    19ca:	39 07       	cpc	r19, r25
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <uart_handle+0x1170>
    19ce:	7b cc       	rjmp	.-1802   	; 0x12c6 <uart_handle+0xa66>
    19d0:	2e cd       	rjmp	.-1444   	; 0x142e <uart_handle+0xbce>
				v += 2;
				send_size = v;
				send_enable = 1;
			} // SU write settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					 memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    19d2:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    19d6:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    19da:	fb 01       	movw	r30, r22
    19dc:	01 90       	ld	r0, Z+
    19de:	00 20       	and	r0, r0
    19e0:	e9 f7       	brne	.-6      	; 0x19dc <uart_handle+0x117c>
    19e2:	31 97       	sbiw	r30, 0x01	; 1
    19e4:	af 01       	movw	r20, r30
    19e6:	46 1b       	sub	r20, r22
    19e8:	57 0b       	sbc	r21, r23
    19ea:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    19ee:	0d 2f       	mov	r16, r29
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	c8 01       	movw	r24, r16
    19f4:	87 5c       	subi	r24, 0xC7	; 199
    19f6:	97 4c       	sbci	r25, 0xC7	; 199
    19f8:	0e 94 24 18 	call	0x3048	; 0x3048 <memcmp>
				memcpy(recv + v, hex_tmp, 2);
				v += 2;
				send_size = v;
				send_enable = 1;
			} // SU write settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
    19fc:	89 2b       	or	r24, r25
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <uart_handle+0x11a2>
    1a00:	16 cd       	rjmp	.-1492   	; 0x142e <uart_handle+0xbce>
    1a02:	a7 cc       	rjmp	.-1714   	; 0x1352 <uart_handle+0xaf2>
					 memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
					 v >= address_length + 2 + cmd_len[SU] && 
    1a04:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <v>
				v += 2;
				send_size = v;
				send_enable = 1;
			} // SU write settings address + baud + rate
			else if ((address_type == 0x01 || address_type == 0x07 || address_type == 0x0b) &&
					 memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	8d 2f       	mov	r24, r29
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	04 96       	adiw	r24, 0x04	; 4
    1a10:	28 17       	cp	r18, r24
    1a12:	39 07       	cpc	r19, r25
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <uart_handle+0x11b8>
    1a16:	a7 cc       	rjmp	.-1714   	; 0x1366 <uart_handle+0xb06>
    1a18:	0a cd       	rjmp	.-1516   	; 0x142e <uart_handle+0xbce>
					EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
				}
				send_size = v;
				send_enable = 1;
			} // SU write settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1a1a:	c6 30       	cpi	r28, 0x06	; 6
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <uart_handle+0x11c0>
    1a1e:	6e cd       	rjmp	.-1316   	; 0x14fc <uart_handle+0xc9c>
    1a20:	ce cd       	rjmp	.-1124   	; 0x15be <uart_handle+0xd5e>
					  memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1a22:	d0 91 1d 38 	lds	r29, 0x381D	; 0x80381d <address_length>
    1a26:	0d 2f       	mov	r16, r29
    1a28:	10 e0       	ldi	r17, 0x00	; 0
    1a2a:	84 cd       	rjmp	.-1272   	; 0x1534 <uart_handle+0xcd4>
					EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, single_temp_addr);
				}
				send_size = v;
				send_enable = 1;
			} // SU write settings rh address
			else if ((address_type == 0x03 || address_type == 0x06 || address_type == 0x09 || address_type == 0x0d) &&
    1a2c:	c6 30       	cpi	r28, 0x06	; 6
    1a2e:	c9 f3       	breq	.-14     	; 0x1a22 <uart_handle+0x11c2>
    1a30:	65 cd       	rjmp	.-1334   	; 0x14fc <uart_handle+0xc9c>
	else {
		address_type = 0;
		v = 0;
	}

}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	08 95       	ret

00001a4c <init_config>:

void init_config()
{
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
	int i;
	
	
	cal_a = DEFAULT_CAL_A;
    1a58:	10 92 99 38 	sts	0x3899, r1	; 0x803899 <cal_a>
    1a5c:	10 92 9a 38 	sts	0x389A, r1	; 0x80389a <cal_a+0x1>
    1a60:	10 92 9b 38 	sts	0x389B, r1	; 0x80389b <cal_a+0x2>
    1a64:	10 92 9c 38 	sts	0x389C, r1	; 0x80389c <cal_a+0x3>
	cal_b = DEFAULT_CAL_B;
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 e8       	ldi	r26, 0x80	; 128
    1a6e:	bf e3       	ldi	r27, 0x3F	; 63
    1a70:	80 93 aa 38 	sts	0x38AA, r24	; 0x8038aa <cal_b>
    1a74:	90 93 ab 38 	sts	0x38AB, r25	; 0x8038ab <cal_b+0x1>
    1a78:	a0 93 ac 38 	sts	0x38AC, r26	; 0x8038ac <cal_b+0x2>
    1a7c:	b0 93 ad 38 	sts	0x38AD, r27	; 0x8038ad <cal_b+0x3>
	cal_c = DEFAULT_CAL_C;
    1a80:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <cal_c>
    1a84:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <cal_c+0x1>
    1a88:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <cal_c+0x2>
    1a8c:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <cal_c+0x3>
	
	cal_d = DEFAULT_CAL_D;
    1a90:	10 92 7f 38 	sts	0x387F, r1	; 0x80387f <cal_d>
    1a94:	10 92 80 38 	sts	0x3880, r1	; 0x803880 <cal_d+0x1>
    1a98:	10 92 81 38 	sts	0x3881, r1	; 0x803881 <cal_d+0x2>
    1a9c:	10 92 82 38 	sts	0x3882, r1	; 0x803882 <cal_d+0x3>
	cal_e = DEFAULT_CAL_E;
    1aa0:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <cal_e>
    1aa4:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <cal_e+0x1>
    1aa8:	a0 93 97 38 	sts	0x3897, r26	; 0x803897 <cal_e+0x2>
    1aac:	b0 93 98 38 	sts	0x3898, r27	; 0x803898 <cal_e+0x3>
	cal_f = DEFAULT_CAL_F;
    1ab0:	10 92 c8 38 	sts	0x38C8, r1	; 0x8038c8 <cal_f>
    1ab4:	10 92 c9 38 	sts	0x38C9, r1	; 0x8038c9 <cal_f+0x1>
    1ab8:	10 92 ca 38 	sts	0x38CA, r1	; 0x8038ca <cal_f+0x2>
    1abc:	10 92 cb 38 	sts	0x38CB, r1	; 0x8038cb <cal_f+0x3>
    1ac0:	0f 2e       	mov	r0, r31
    1ac2:	f0 e4       	ldi	r31, 0x40	; 64
    1ac4:	ef 2e       	mov	r14, r31
    1ac6:	f5 eb       	ldi	r31, 0xB5	; 181
    1ac8:	ff 2e       	mov	r15, r31
    1aca:	f0 2d       	mov	r31, r0
    1acc:	03 ea       	ldi	r16, 0xA3	; 163
    1ace:	18 e3       	ldi	r17, 0x38	; 56

	for(i = 0; i < 6; i++)
    1ad0:	c0 e0       	ldi	r28, 0x00	; 0
    1ad2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		addr[i] = DEFAULT_ADDR[i];
    1ad4:	f7 01       	movw	r30, r14
    1ad6:	61 91       	ld	r22, Z+
    1ad8:	7f 01       	movw	r14, r30
    1ada:	f8 01       	movw	r30, r16
    1adc:	61 93       	st	Z+, r22
    1ade:	8f 01       	movw	r16, r30
		EEPROM_write(EEPROM_ADDR_START_BYTE + i, DEFAULT_ADDR[i]);
    1ae0:	21 96       	adiw	r28, 0x01	; 1
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
	
	cal_d = DEFAULT_CAL_D;
	cal_e = DEFAULT_CAL_E;
	cal_f = DEFAULT_CAL_F;

	for(i = 0; i < 6; i++)
    1ae8:	c6 30       	cpi	r28, 0x06	; 6
    1aea:	d1 05       	cpc	r29, r1
    1aec:	99 f7       	brne	.-26     	; 0x1ad4 <init_config+0x88>
    1aee:	0f 2e       	mov	r0, r31
    1af0:	f7 e4       	ldi	r31, 0x47	; 71
    1af2:	ef 2e       	mov	r14, r31
    1af4:	f5 eb       	ldi	r31, 0xB5	; 181
    1af6:	ff 2e       	mov	r15, r31
    1af8:	f0 2d       	mov	r31, r0
    1afa:	0d e9       	ldi	r16, 0x9D	; 157
    1afc:	18 e3       	ldi	r17, 0x38	; 56
    1afe:	cf e1       	ldi	r28, 0x1F	; 31
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_write(EEPROM_ADDR_START_BYTE + i, DEFAULT_ADDR[i]);
	}
	
	for(i = 0; i < 6; i++)
	{
		setting[i] = DEFAULT_SETTING[i];
    1b02:	f7 01       	movw	r30, r14
    1b04:	61 91       	ld	r22, Z+
    1b06:	7f 01       	movw	r14, r30
    1b08:	f8 01       	movw	r30, r16
    1b0a:	61 93       	st	Z+, r22
    1b0c:	8f 01       	movw	r16, r30
		EEPROM_write(EEPROM_SETTING_START_BYTE + i, DEFAULT_SETTING[i]);
    1b0e:	ce 01       	movw	r24, r28
    1b10:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
    1b14:	21 96       	adiw	r28, 0x01	; 1
	{
		addr[i] = DEFAULT_ADDR[i];
		EEPROM_write(EEPROM_ADDR_START_BYTE + i, DEFAULT_ADDR[i]);
	}
	
	for(i = 0; i < 6; i++)
    1b16:	c5 32       	cpi	r28, 0x25	; 37
    1b18:	d1 05       	cpc	r29, r1
    1b1a:	99 f7       	brne	.-26     	; 0x1b02 <init_config+0xb6>
	{
		setting[i] = DEFAULT_SETTING[i];
		EEPROM_write(EEPROM_SETTING_START_BYTE + i, DEFAULT_SETTING[i]);
	}
	check_sum_enable = DEFAULT_SETTING[0] - 0x30;
    1b1c:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <check_sum_enable>
    1b20:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <check_sum_enable+0x1>
	delay = DEFAULT_SETTING[1] - 0x30;
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <delay>
    1b2c:	90 93 1a 38 	sts	0x381A, r25	; 0x80381a <delay+0x1>
	
	write_temp_cal_eeprom();
    1b30:	0e 94 4a 03 	call	0x694	; 0x694 <write_temp_cal_eeprom>
	write_rh_cal_eeprom();
    1b34:	0e 94 bd 03 	call	0x77a	; 0x77a <write_rh_cal_eeprom>


	
	EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, DEFAULT_SINGLE_TEMP_ADDR);
    1b38:	62 e4       	ldi	r22, 0x42	; 66
    1b3a:	85 e2       	ldi	r24, 0x25	; 37
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
	EEPROM_write(EEPROM_RH_ADDR_START_BYTE, DEFAULT_SINGLE_RH_ADDR);
    1b42:	63 e4       	ldi	r22, 0x43	; 67
    1b44:	86 e2       	ldi	r24, 0x26	; 38
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
	EEPROM_write(EEPROM_PRIMARY_ID_START_BYTE, DEFAULT_SINGLE_PRIMARY_ID);
    1b4c:	61 e4       	ldi	r22, 0x41	; 65
    1b4e:	87 e2       	ldi	r24, 0x27	; 39
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
	EEPROM_write(EEPROM_BAUD_RATE_START_BYTE, DEFAULT_BAUD_BYTE);
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	88 e2       	ldi	r24, 0x28	; 40
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
	
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	08 95       	ret

00001b6e <read_init>:

uint8_t read_init()
{
	return EEPROM_read(EEPROM_INIT_STATUS_BYTE);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
}
    1b76:	08 95       	ret

00001b78 <load_config>:

void load_config()
{
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	0f 2e       	mov	r0, r31
    1b86:	f3 ea       	ldi	r31, 0xA3	; 163
    1b88:	ef 2e       	mov	r14, r31
    1b8a:	f8 e3       	ldi	r31, 0x38	; 56
    1b8c:	ff 2e       	mov	r15, r31
    1b8e:	f0 2d       	mov	r31, r0
    1b90:	0d e9       	ldi	r16, 0x9D	; 157
    1b92:	18 e3       	ldi	r17, 0x38	; 56
	int i;
	for(i = 0; i < 6; i++)
    1b94:	c0 e0       	ldi	r28, 0x00	; 0
    1b96:	d0 e0       	ldi	r29, 0x00	; 0
	{
		addr[i] = EEPROM_read(EEPROM_ADDR_START_BYTE + i);
    1b98:	21 96       	adiw	r28, 0x01	; 1
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1ba0:	d7 01       	movw	r26, r14
    1ba2:	8d 93       	st	X+, r24
    1ba4:	7d 01       	movw	r14, r26
		setting[i] = EEPROM_read(EEPROM_SETTING_START_BYTE + i);
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	4e 96       	adiw	r24, 0x1e	; 30
    1baa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1bae:	f8 01       	movw	r30, r16
    1bb0:	81 93       	st	Z+, r24
    1bb2:	8f 01       	movw	r16, r30
}

void load_config()
{
	int i;
	for(i = 0; i < 6; i++)
    1bb4:	c6 30       	cpi	r28, 0x06	; 6
    1bb6:	d1 05       	cpc	r29, r1
    1bb8:	79 f7       	brne	.-34     	; 0x1b98 <load_config+0x20>
	{
		addr[i] = EEPROM_read(EEPROM_ADDR_START_BYTE + i);
		setting[i] = EEPROM_read(EEPROM_SETTING_START_BYTE + i);
	}
	check_sum_enable = setting[0] - 0x30;
    1bba:	ed e9       	ldi	r30, 0x9D	; 157
    1bbc:	f8 e3       	ldi	r31, 0x38	; 56
    1bbe:	80 81       	ld	r24, Z
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	c0 97       	sbiw	r24, 0x30	; 48
    1bc4:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <check_sum_enable>
    1bc8:	90 93 1c 38 	sts	0x381C, r25	; 0x80381c <check_sum_enable+0x1>
	delay = setting[1] - 0x30;
    1bcc:	81 81       	ldd	r24, Z+1	; 0x01
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	c0 97       	sbiw	r24, 0x30	; 48
    1bd2:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <delay>
    1bd6:	90 93 1a 38 	sts	0x381A, r25	; 0x80381a <delay+0x1>

	single_primary_addr = EEPROM_read(EEPROM_PRIMARY_ID_START_BYTE);
    1bda:	87 e2       	ldi	r24, 0x27	; 39
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1be2:	80 93 af 38 	sts	0x38AF, r24	; 0x8038af <single_primary_addr>

	single_temp_addr = EEPROM_read(EEPROM_TEMP_ADDR_START_BYTE);
    1be6:	85 e2       	ldi	r24, 0x25	; 37
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1bee:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <single_temp_addr>
	
	single_rh_addr = EEPROM_read(EEPROM_RH_ADDR_START_BYTE);
    1bf2:	86 e2       	ldi	r24, 0x26	; 38
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1bfa:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <single_rh_addr>
	
	uart_baud_rate = EEPROM_read(EEPROM_BAUD_RATE_START_BYTE);
    1bfe:	88 e2       	ldi	r24, 0x28	; 40
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1c06:	80 93 ae 38 	sts	0x38AE, r24	; 0x8038ae <uart_baud_rate>

	memset(tmp,0,sizeof(tmp));
    1c0a:	84 e0       	ldi	r24, 0x04	; 4
    1c0c:	e4 e3       	ldi	r30, 0x34	; 52
    1c0e:	f8 e3       	ldi	r31, 0x38	; 56
    1c10:	df 01       	movw	r26, r30
    1c12:	1d 92       	st	X+, r1
    1c14:	8a 95       	dec	r24
    1c16:	e9 f7       	brne	.-6      	; 0x1c12 <load_config+0x9a>
	for(m = 0; m < 4; m++)
    1c18:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <m>
    1c1c:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1c20:	84 30       	cpi	r24, 0x04	; 4
    1c22:	b0 f4       	brcc	.+44     	; 0x1c50 <load_config+0xd8>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
    1c24:	c0 91 16 38 	lds	r28, 0x3816	; 0x803816 <m>
    1c28:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	07 96       	adiw	r24, 0x07	; 7
    1c30:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1c34:	ec 2f       	mov	r30, r28
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	ec 5c       	subi	r30, 0xCC	; 204
    1c3a:	f7 4c       	sbci	r31, 0xC7	; 199
    1c3c:	80 83       	st	Z, r24
	single_rh_addr = EEPROM_read(EEPROM_RH_ADDR_START_BYTE);
	
	uart_baud_rate = EEPROM_read(EEPROM_BAUD_RATE_START_BYTE);

	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1c3e:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1c42:	8f 5f       	subi	r24, 0xFF	; 255
    1c44:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <m>
    1c48:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	50 f3       	brcs	.-44     	; 0x1c24 <load_config+0xac>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
	}
	memcpy(&cal_a, tmp, sizeof(float));
    1c50:	e4 e3       	ldi	r30, 0x34	; 52
    1c52:	f8 e3       	ldi	r31, 0x38	; 56
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	a2 81       	ldd	r26, Z+2	; 0x02
    1c5a:	b3 81       	ldd	r27, Z+3	; 0x03
    1c5c:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <cal_a>
    1c60:	90 93 9a 38 	sts	0x389A, r25	; 0x80389a <cal_a+0x1>
    1c64:	a0 93 9b 38 	sts	0x389B, r26	; 0x80389b <cal_a+0x2>
    1c68:	b0 93 9c 38 	sts	0x389C, r27	; 0x80389c <cal_a+0x3>
	
	memset(tmp,0,sizeof(tmp));
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	df 01       	movw	r26, r30
    1c70:	1d 92       	st	X+, r1
    1c72:	8a 95       	dec	r24
    1c74:	e9 f7       	brne	.-6      	; 0x1c70 <load_config+0xf8>
	for(m = 0; m < 4; m++)
    1c76:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <m>
    1c7a:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1c7e:	84 30       	cpi	r24, 0x04	; 4
    1c80:	b0 f4       	brcc	.+44     	; 0x1cae <load_config+0x136>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
    1c82:	c0 91 16 38 	lds	r28, 0x3816	; 0x803816 <m>
    1c86:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0b 96       	adiw	r24, 0x0b	; 11
    1c8e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1c92:	ec 2f       	mov	r30, r28
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	ec 5c       	subi	r30, 0xCC	; 204
    1c98:	f7 4c       	sbci	r31, 0xC7	; 199
    1c9a:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
	}
	memcpy(&cal_a, tmp, sizeof(float));
	
	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1c9c:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <m>
    1ca6:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1caa:	84 30       	cpi	r24, 0x04	; 4
    1cac:	50 f3       	brcs	.-44     	; 0x1c82 <load_config+0x10a>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_b, tmp, sizeof(float));
    1cae:	e4 e3       	ldi	r30, 0x34	; 52
    1cb0:	f8 e3       	ldi	r31, 0x38	; 56
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	a2 81       	ldd	r26, Z+2	; 0x02
    1cb8:	b3 81       	ldd	r27, Z+3	; 0x03
    1cba:	80 93 aa 38 	sts	0x38AA, r24	; 0x8038aa <cal_b>
    1cbe:	90 93 ab 38 	sts	0x38AB, r25	; 0x8038ab <cal_b+0x1>
    1cc2:	a0 93 ac 38 	sts	0x38AC, r26	; 0x8038ac <cal_b+0x2>
    1cc6:	b0 93 ad 38 	sts	0x38AD, r27	; 0x8038ad <cal_b+0x3>

	memset(tmp,0,sizeof(tmp));
    1cca:	84 e0       	ldi	r24, 0x04	; 4
    1ccc:	df 01       	movw	r26, r30
    1cce:	1d 92       	st	X+, r1
    1cd0:	8a 95       	dec	r24
    1cd2:	e9 f7       	brne	.-6      	; 0x1cce <load_config+0x156>
	for(m = 0; m < 4; m++)
    1cd4:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <m>
    1cd8:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	b0 f4       	brcc	.+44     	; 0x1d0c <load_config+0x194>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x08 + m);
    1ce0:	c0 91 16 38 	lds	r28, 0x3816	; 0x803816 <m>
    1ce4:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0f 96       	adiw	r24, 0x0f	; 15
    1cec:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1cf0:	ec 2f       	mov	r30, r28
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	ec 5c       	subi	r30, 0xCC	; 204
    1cf6:	f7 4c       	sbci	r31, 0xC7	; 199
    1cf8:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_b, tmp, sizeof(float));

	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1cfa:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1cfe:	8f 5f       	subi	r24, 0xFF	; 255
    1d00:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <m>
    1d04:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1d08:	84 30       	cpi	r24, 0x04	; 4
    1d0a:	50 f3       	brcs	.-44     	; 0x1ce0 <load_config+0x168>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x08 + m);
	}
	memcpy(&cal_c, tmp, sizeof(float));
    1d0c:	e4 e3       	ldi	r30, 0x34	; 52
    1d0e:	f8 e3       	ldi	r31, 0x38	; 56
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	a2 81       	ldd	r26, Z+2	; 0x02
    1d16:	b3 81       	ldd	r27, Z+3	; 0x03
    1d18:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <cal_c>
    1d1c:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <cal_c+0x1>
    1d20:	a0 93 32 38 	sts	0x3832, r26	; 0x803832 <cal_c+0x2>
    1d24:	b0 93 33 38 	sts	0x3833, r27	; 0x803833 <cal_c+0x3>


	memset(tmp,0,sizeof(tmp));
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	df 01       	movw	r26, r30
    1d2c:	1d 92       	st	X+, r1
    1d2e:	8a 95       	dec	r24
    1d30:	e9 f7       	brne	.-6      	; 0x1d2c <load_config+0x1b4>
	for(m = 0; m < 4; m++)
    1d32:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <m>
    1d36:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1d3a:	84 30       	cpi	r24, 0x04	; 4
    1d3c:	b0 f4       	brcc	.+44     	; 0x1d6a <load_config+0x1f2>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
    1d3e:	c0 91 16 38 	lds	r28, 0x3816	; 0x803816 <m>
    1d42:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	43 96       	adiw	r24, 0x13	; 19
    1d4a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1d4e:	ec 2f       	mov	r30, r28
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	ec 5c       	subi	r30, 0xCC	; 204
    1d54:	f7 4c       	sbci	r31, 0xC7	; 199
    1d56:	80 83       	st	Z, r24
	}
	memcpy(&cal_c, tmp, sizeof(float));


	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1d58:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <m>
    1d62:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	50 f3       	brcs	.-44     	; 0x1d3e <load_config+0x1c6>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
	}
	memcpy(&cal_d, tmp, sizeof(float));
    1d6a:	e4 e3       	ldi	r30, 0x34	; 52
    1d6c:	f8 e3       	ldi	r31, 0x38	; 56
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	a2 81       	ldd	r26, Z+2	; 0x02
    1d74:	b3 81       	ldd	r27, Z+3	; 0x03
    1d76:	80 93 7f 38 	sts	0x387F, r24	; 0x80387f <cal_d>
    1d7a:	90 93 80 38 	sts	0x3880, r25	; 0x803880 <cal_d+0x1>
    1d7e:	a0 93 81 38 	sts	0x3881, r26	; 0x803881 <cal_d+0x2>
    1d82:	b0 93 82 38 	sts	0x3882, r27	; 0x803882 <cal_d+0x3>
	
	memset(tmp,0,sizeof(tmp));
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	df 01       	movw	r26, r30
    1d8a:	1d 92       	st	X+, r1
    1d8c:	8a 95       	dec	r24
    1d8e:	e9 f7       	brne	.-6      	; 0x1d8a <load_config+0x212>
	for(m = 0; m < 4; m++)
    1d90:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <m>
    1d94:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1d98:	84 30       	cpi	r24, 0x04	; 4
    1d9a:	b0 f4       	brcc	.+44     	; 0x1dc8 <load_config+0x250>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
    1d9c:	c0 91 16 38 	lds	r28, 0x3816	; 0x803816 <m>
    1da0:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	47 96       	adiw	r24, 0x17	; 23
    1da8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1dac:	ec 2f       	mov	r30, r28
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	ec 5c       	subi	r30, 0xCC	; 204
    1db2:	f7 4c       	sbci	r31, 0xC7	; 199
    1db4:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
	}
	memcpy(&cal_d, tmp, sizeof(float));
	
	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1db6:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <m>
    1dc0:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1dc4:	84 30       	cpi	r24, 0x04	; 4
    1dc6:	50 f3       	brcs	.-44     	; 0x1d9c <load_config+0x224>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_e, tmp, sizeof(float));
    1dc8:	e4 e3       	ldi	r30, 0x34	; 52
    1dca:	f8 e3       	ldi	r31, 0x38	; 56
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	a2 81       	ldd	r26, Z+2	; 0x02
    1dd2:	b3 81       	ldd	r27, Z+3	; 0x03
    1dd4:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <cal_e>
    1dd8:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <cal_e+0x1>
    1ddc:	a0 93 97 38 	sts	0x3897, r26	; 0x803897 <cal_e+0x2>
    1de0:	b0 93 98 38 	sts	0x3898, r27	; 0x803898 <cal_e+0x3>

	memset(tmp,0,sizeof(tmp));
    1de4:	84 e0       	ldi	r24, 0x04	; 4
    1de6:	df 01       	movw	r26, r30
    1de8:	1d 92       	st	X+, r1
    1dea:	8a 95       	dec	r24
    1dec:	e9 f7       	brne	.-6      	; 0x1de8 <load_config+0x270>
	for(m = 0; m < 4; m++)
    1dee:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <m>
    1df2:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1df6:	84 30       	cpi	r24, 0x04	; 4
    1df8:	b0 f4       	brcc	.+44     	; 0x1e26 <load_config+0x2ae>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x08 + m);
    1dfa:	c0 91 16 38 	lds	r28, 0x3816	; 0x803816 <m>
    1dfe:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	4b 96       	adiw	r24, 0x1b	; 27
    1e06:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <EEPROM_read>
    1e0a:	ec 2f       	mov	r30, r28
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	ec 5c       	subi	r30, 0xCC	; 204
    1e10:	f7 4c       	sbci	r31, 0xC7	; 199
    1e12:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_e, tmp, sizeof(float));

	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
    1e14:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1e18:	8f 5f       	subi	r24, 0xFF	; 255
    1e1a:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <m>
    1e1e:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <m>
    1e22:	84 30       	cpi	r24, 0x04	; 4
    1e24:	50 f3       	brcs	.-44     	; 0x1dfa <load_config+0x282>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x08 + m);
	}
	memcpy(&cal_f, tmp, sizeof(float));
    1e26:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <tmp>
    1e2a:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <tmp+0x1>
    1e2e:	a0 91 36 38 	lds	r26, 0x3836	; 0x803836 <tmp+0x2>
    1e32:	b0 91 37 38 	lds	r27, 0x3837	; 0x803837 <tmp+0x3>
    1e36:	80 93 c8 38 	sts	0x38C8, r24	; 0x8038c8 <cal_f>
    1e3a:	90 93 c9 38 	sts	0x38C9, r25	; 0x8038c9 <cal_f+0x1>
    1e3e:	a0 93 ca 38 	sts	0x38CA, r26	; 0x8038ca <cal_f+0x2>
    1e42:	b0 93 cb 38 	sts	0x38CB, r27	; 0x8038cb <cal_f+0x3>
}
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	08 95       	ret

00001e54 <main>:

int main(void)
{
	if (read_init() != INITED)
    1e54:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <read_init>
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	39 f0       	breq	.+14     	; 0x1e6a <main+0x16>
	{
		EEPROM_write(EEPROM_INIT_STATUS_BYTE, INITED);
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 06 01 	call	0x20c	; 0x20c <EEPROM_write>
		init_config();
    1e66:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <init_config>
	}

	load_config();
    1e6a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <load_config>
		
	initUSART(uart_baud_rate);
    1e6e:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <uart_baud_rate>
    1e72:	0e 94 76 10 	call	0x20ec	; 0x20ec <initUSART>
	init_i2c();
    1e76:	0e 94 15 01 	call	0x22a	; 0x22a <init_i2c>
    1e7a:	8d e8       	ldi	r24, 0x8D	; 141
    1e7c:	90 e2       	ldi	r25, 0x20	; 32
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <main+0x2a>
    1e82:	00 00       	nop
	
	_delay_ms(10);
	read_temp(&temp_data);
    1e84:	8b e7       	ldi	r24, 0x7B	; 123
    1e86:	98 e3       	ldi	r25, 0x38	; 56
    1e88:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <read_temp>
    1e8c:	8d e8       	ldi	r24, 0x8D	; 141
    1e8e:	90 e2       	ldi	r25, 0x20	; 32
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <main+0x3c>
    1e94:	00 00       	nop
	_delay_ms(10);
	read_temp_rh(&temp_data, &rh_data);
    1e96:	64 ec       	ldi	r22, 0xC4	; 196
    1e98:	78 e3       	ldi	r23, 0x38	; 56
    1e9a:	8b e7       	ldi	r24, 0x7B	; 123
    1e9c:	98 e3       	ldi	r25, 0x38	; 56
    1e9e:	0e 94 2e 01 	call	0x25c	; 0x25c <read_temp_rh>
    1ea2:	8d e8       	ldi	r24, 0x8D	; 141
    1ea4:	90 e2       	ldi	r25, 0x20	; 32
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <main+0x52>
    1eaa:	00 00       	nop
	_delay_ms(10);
	
	while(1)
	{
		rev = receive_byte();
    1eac:	0e 94 ca 10 	call	0x2194	; 0x2194 <receive_byte>
    1eb0:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <rev>

		uart_handle(rev);
    1eb4:	0e 94 30 04 	call	0x860	; 0x860 <uart_handle>
    1eb8:	f9 cf       	rjmp	.-14     	; 0x1eac <main+0x58>

00001eba <__vector_25>:
	}
}

ISR(TWI0_TWIM_vect)
{
    1eba:	1f 92       	push	r1
    1ebc:	0f 92       	push	r0
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	0f 92       	push	r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	2f 93       	push	r18
    1ec6:	3f 93       	push	r19
    1ec8:	4f 93       	push	r20
    1eca:	5f 93       	push	r21
    1ecc:	6f 93       	push	r22
    1ece:	7f 93       	push	r23
    1ed0:	8f 93       	push	r24
    1ed2:	9f 93       	push	r25
    1ed4:	af 93       	push	r26
    1ed6:	bf 93       	push	r27
    1ed8:	ef 93       	push	r30
    1eda:	ff 93       	push	r31
	/* Needed for the TWI to complete transactions */
	TWI_MasterInterruptHandler(&twi_master);
    1edc:	8c ec       	ldi	r24, 0xCC	; 204
    1ede:	98 e3       	ldi	r25, 0x38	; 56
    1ee0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <TWI_MasterInterruptHandler>
}
    1ee4:	ff 91       	pop	r31
    1ee6:	ef 91       	pop	r30
    1ee8:	bf 91       	pop	r27
    1eea:	af 91       	pop	r26
    1eec:	9f 91       	pop	r25
    1eee:	8f 91       	pop	r24
    1ef0:	7f 91       	pop	r23
    1ef2:	6f 91       	pop	r22
    1ef4:	5f 91       	pop	r21
    1ef6:	4f 91       	pop	r20
    1ef8:	3f 91       	pop	r19
    1efa:	2f 91       	pop	r18
    1efc:	0f 90       	pop	r0
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	0f 90       	pop	r0
    1f02:	1f 90       	pop	r1
    1f04:	18 95       	reti

00001f06 <TWI_MasterInit>:
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
	bool twi_status = (twi->status & TWIM_STATUS_READY);
	return twi_status;
}
    1f06:	fc 01       	movw	r30, r24
    1f08:	60 83       	st	Z, r22
    1f0a:	71 83       	std	Z+1, r23	; 0x01
    1f0c:	41 60       	ori	r20, 0x01	; 1
    1f0e:	db 01       	movw	r26, r22
    1f10:	13 96       	adiw	r26, 0x03	; 3
    1f12:	4c 93       	st	X, r20
    1f14:	a0 81       	ld	r26, Z
    1f16:	b1 81       	ldd	r27, Z+1	; 0x01
    1f18:	16 96       	adiw	r26, 0x06	; 6
    1f1a:	2c 93       	st	X, r18
    1f1c:	01 90       	ld	r0, Z+
    1f1e:	f0 81       	ld	r31, Z
    1f20:	e0 2d       	mov	r30, r0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	85 83       	std	Z+5, r24	; 0x05
    1f26:	08 95       	ret

00001f28 <TWI_MasterWriteRead>:
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterWriteRead(TWI_Master_t *twi, uint8_t slave_address, uint8_t *write_data, uint8_t bytes_to_write,
                         uint8_t bytes_to_read)
{
    1f28:	0f 93       	push	r16
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	ec 01       	movw	r28, r24
	/*Parameter sanity check. */
	if (bytes_to_write > TWIM_WRITE_BUFFER_SIZE) {
    1f30:	22 31       	cpi	r18, 0x12	; 18
    1f32:	c0 f5       	brcc	.+112    	; 0x1fa4 <TWI_MasterWriteRead+0x7c>
		return false;
	}
	if (bytes_to_read > TWIM_READ_BUFFER_SIZE) {
    1f34:	01 31       	cpi	r16, 0x11	; 17
    1f36:	c0 f5       	brcc	.+112    	; 0x1fa8 <TWI_MasterWriteRead+0x80>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
    1f38:	88 a5       	ldd	r24, Y+40	; 0x28
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	37 c0       	rjmp	.+110    	; 0x1fac <TWI_MasterWriteRead+0x84>

		twi->status = TWIM_STATUS_BUSY;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	88 a7       	std	Y+40, r24	; 0x28
		twi->result = TWIM_RESULT_UNKNOWN;
    1f42:	19 a6       	std	Y+41, r1	; 0x29

		twi->slave_address = slave_address << 1;
    1f44:	66 0f       	add	r22, r22
    1f46:	6a 83       	std	Y+2, r22	; 0x02

		/* Fill write data buffer. */
		for (uint8_t bufferIndex = 0; bufferIndex < bytes_to_write; bufferIndex++) {
    1f48:	22 23       	and	r18, r18
    1f4a:	a1 f0       	breq	.+40     	; 0x1f74 <TWI_MasterWriteRead+0x4c>
    1f4c:	e4 2f       	mov	r30, r20
    1f4e:	f5 2f       	mov	r31, r21
    1f50:	6f ef       	ldi	r22, 0xFF	; 255
    1f52:	62 0f       	add	r22, r18
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	6f 5f       	subi	r22, 0xFF	; 255
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
			twi->writeData[bufferIndex] = write_data[bufferIndex];
    1f5e:	91 91       	ld	r25, Z+
    1f60:	de 01       	movw	r26, r28
    1f62:	a4 0f       	add	r26, r20
    1f64:	b5 1f       	adc	r27, r21
    1f66:	13 96       	adiw	r26, 0x03	; 3
    1f68:	9c 93       	st	X, r25
    1f6a:	4f 5f       	subi	r20, 0xFF	; 255
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->slave_address = slave_address << 1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex = 0; bufferIndex < bytes_to_write; bufferIndex++) {
    1f6e:	46 17       	cp	r20, r22
    1f70:	57 07       	cpc	r21, r23
    1f72:	a9 f7       	brne	.-22     	; 0x1f5e <TWI_MasterWriteRead+0x36>
			twi->writeData[bufferIndex] = write_data[bufferIndex];
		}

		twi->bytesToWrite = bytes_to_write;
    1f74:	2c a3       	std	Y+36, r18	; 0x24
		twi->bytesToRead  = bytes_to_read;
    1f76:	0d a3       	std	Y+37, r16	; 0x25
		twi->bytesWritten = 0;
    1f78:	1e a2       	std	Y+38, r1	; 0x26
		twi->bytesRead    = 0;
    1f7a:	1f a2       	std	Y+39, r1	; 0x27

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
    1f7c:	8c a1       	ldd	r24, Y+36	; 0x24
    1f7e:	88 23       	and	r24, r24
    1f80:	39 f0       	breq	.+14     	; 0x1f90 <TWI_MasterWriteRead+0x68>
			uint8_t writeAddress = twi->slave_address & ~0x01;
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	8e 7f       	andi	r24, 0xFE	; 254
			twi->module->MADDR   = writeAddress;
    1f86:	e8 81       	ld	r30, Y
    1f88:	f9 81       	ldd	r31, Y+1	; 0x01
    1f8a:	87 83       	std	Z+7, r24	; 0x07
		 */
		else if (twi->bytesToRead > 0) {
			uint8_t readAddress = twi->slave_address | 0x01;
			twi->module->MADDR  = readAddress;
		}
		return true;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	11 c0       	rjmp	.+34     	; 0x1fb2 <TWI_MasterWriteRead+0x8a>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
    1f90:	8d a1       	ldd	r24, Y+37	; 0x25
    1f92:	88 23       	and	r24, r24
    1f94:	69 f0       	breq	.+26     	; 0x1fb0 <TWI_MasterWriteRead+0x88>
			uint8_t readAddress = twi->slave_address | 0x01;
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	81 60       	ori	r24, 0x01	; 1
			twi->module->MADDR  = readAddress;
    1f9a:	e8 81       	ld	r30, Y
    1f9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9e:	87 83       	std	Z+7, r24	; 0x07
		}
		return true;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	07 c0       	rjmp	.+14     	; 0x1fb2 <TWI_MasterWriteRead+0x8a>
bool TWI_MasterWriteRead(TWI_Master_t *twi, uint8_t slave_address, uint8_t *write_data, uint8_t bytes_to_write,
                         uint8_t bytes_to_read)
{
	/*Parameter sanity check. */
	if (bytes_to_write > TWIM_WRITE_BUFFER_SIZE) {
		return false;
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	05 c0       	rjmp	.+10     	; 0x1fb2 <TWI_MasterWriteRead+0x8a>
	}
	if (bytes_to_read > TWIM_READ_BUFFER_SIZE) {
		return false;
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	03 c0       	rjmp	.+6      	; 0x1fb2 <TWI_MasterWriteRead+0x8a>
			uint8_t readAddress = twi->slave_address | 0x01;
			twi->module->MADDR  = readAddress;
		}
		return true;
	} else {
		return false;
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <TWI_MasterWriteRead+0x8a>
		 */
		else if (twi->bytesToRead > 0) {
			uint8_t readAddress = twi->slave_address | 0x01;
			twi->module->MADDR  = readAddress;
		}
		return true;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <TWI_MasterWrite>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterWrite(TWI_Master_t *twi, uint8_t slave_address, uint8_t *write_data, uint8_t bytes_to_write)
{
    1fba:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, slave_address, write_data, bytes_to_write, 0);
    1fbc:	00 e0       	ldi	r16, 0x00	; 0
    1fbe:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <TWI_MasterWriteRead>
	return twi_status;
}
    1fc2:	0f 91       	pop	r16
    1fc4:	08 95       	ret

00001fc6 <TWI_MasterRead>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi, uint8_t slave_address, uint8_t bytes_to_read)
{
    1fc6:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, slave_address, 0, 0, bytes_to_read);
    1fc8:	04 2f       	mov	r16, r20
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <TWI_MasterWriteRead>
	return twi_status;
}
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    1fd8:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->module->MSTATUS;
    1fda:	a0 81       	ld	r26, Z
    1fdc:	b1 81       	ldd	r27, Z+1	; 0x01
    1fde:	15 96       	adiw	r26, 0x05	; 5
    1fe0:	9c 91       	ld	r25, X
    1fe2:	15 97       	sbiw	r26, 0x05	; 5

	/* If bus error. */
	if (currentStatus & TWI_BUSERR_bm) {
    1fe4:	92 ff       	sbrs	r25, 2
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
    1fe8:	84 e0       	ldi	r24, 0x04	; 4
    1fea:	81 a7       	std	Z+41, r24	; 0x29
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	81 a7       	std	Z+41, r24	; 0x29
	}

	/* Clear interrupt flag. */
	twi->module->MSTATUS = currentStatus | TWI_ARBLOST_bm;
    1ff2:	98 60       	ori	r25, 0x08	; 8
    1ff4:	15 96       	adiw	r26, 0x05	; 5
    1ff6:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
    1ff8:	10 a6       	std	Z+40, r1	; 0x28
    1ffa:	08 95       	ret

00001ffc <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite = twi->bytesToWrite;
    2002:	94 a1       	ldd	r25, Z+36	; 0x24
	uint8_t bytesToRead  = twi->bytesToRead;
    2004:	25 a1       	ldd	r18, Z+37	; 0x25

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->module->MSTATUS & TWI_RXACK_bm) {
    2006:	a0 81       	ld	r26, Z
    2008:	b1 81       	ldd	r27, Z+1	; 0x01
    200a:	15 96       	adiw	r26, 0x05	; 5
    200c:	8c 91       	ld	r24, X
    200e:	15 97       	sbiw	r26, 0x05	; 5
    2010:	84 ff       	sbrs	r24, 4
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <TWI_MasterWriteHandler+0x26>
		twi->module->MCTRLB = TWI_MCMD_STOP_gc;
    2014:	83 e0       	ldi	r24, 0x03	; 3
    2016:	14 96       	adiw	r26, 0x04	; 4
    2018:	8c 93       	st	X, r24
		twi->result         = TWIM_RESULT_NACK_RECEIVED;
    201a:	85 e0       	ldi	r24, 0x05	; 5
    201c:	81 a7       	std	Z+41, r24	; 0x29
		twi->status         = TWIM_STATUS_READY;
    201e:	10 a6       	std	Z+40, r1	; 0x28
    2020:	1c c0       	rjmp	.+56     	; 0x205a <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    2022:	86 a1       	ldd	r24, Z+38	; 0x26
    2024:	89 17       	cp	r24, r25
    2026:	58 f4       	brcc	.+22     	; 0x203e <TWI_MasterWriteHandler+0x42>
		uint8_t data       = twi->writeData[twi->bytesWritten];
    2028:	86 a1       	ldd	r24, Z+38	; 0x26
    202a:	ef 01       	movw	r28, r30
    202c:	c8 0f       	add	r28, r24
    202e:	d1 1d       	adc	r29, r1
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->module->MDATA = data;
    2032:	18 96       	adiw	r26, 0x08	; 8
    2034:	8c 93       	st	X, r24
		++twi->bytesWritten;
    2036:	86 a1       	ldd	r24, Z+38	; 0x26
    2038:	8f 5f       	subi	r24, 0xFF	; 255
    203a:	86 a3       	std	Z+38, r24	; 0x26
    203c:	0e c0       	rjmp	.+28     	; 0x205a <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    203e:	87 a1       	ldd	r24, Z+39	; 0x27
    2040:	82 17       	cp	r24, r18
    2042:	28 f4       	brcc	.+10     	; 0x204e <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->slave_address | 0x01;
    2044:	82 81       	ldd	r24, Z+2	; 0x02
    2046:	81 60       	ori	r24, 0x01	; 1
		twi->module->MADDR  = readAddress;
    2048:	17 96       	adiw	r26, 0x07	; 7
    204a:	8c 93       	st	X, r24
    204c:	06 c0       	rjmp	.+12     	; 0x205a <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->module->MCTRLB = TWI_MCMD_STOP_gc;
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	14 96       	adiw	r26, 0x04	; 4
    2052:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	81 a7       	std	Z+41, r24	; 0x29
	twi->status = TWIM_STATUS_READY;
    2058:	10 a6       	std	Z+40, r1	; 0x28
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->module->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	08 95       	ret

00002060 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    2060:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    2062:	87 a1       	ldd	r24, Z+39	; 0x27
    2064:	80 31       	cpi	r24, 0x10	; 16
    2066:	70 f4       	brcc	.+28     	; 0x2084 <TWI_MasterReadHandler+0x24>
		uint8_t data                  = twi->module->MDATA;
    2068:	a0 81       	ld	r26, Z
    206a:	b1 81       	ldd	r27, Z+1	; 0x01
    206c:	18 96       	adiw	r26, 0x08	; 8
    206e:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    2070:	97 a1       	ldd	r25, Z+39	; 0x27
    2072:	df 01       	movw	r26, r30
    2074:	a9 0f       	add	r26, r25
    2076:	b1 1d       	adc	r27, r1
    2078:	54 96       	adiw	r26, 0x14	; 20
    207a:	8c 93       	st	X, r24
		twi->bytesRead++;
    207c:	87 a1       	ldd	r24, Z+39	; 0x27
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	87 a3       	std	Z+39, r24	; 0x27
    2082:	08 c0       	rjmp	.+16     	; 0x2094 <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->module->MCTRLB = TWI_MCMD_STOP_gc;
    2084:	a0 81       	ld	r26, Z
    2086:	b1 81       	ldd	r27, Z+1	; 0x01
    2088:	83 e0       	ldi	r24, 0x03	; 3
    208a:	14 96       	adiw	r26, 0x04	; 4
    208c:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	81 a7       	std	Z+41, r24	; 0x29
	twi->status = TWIM_STATUS_READY;
    2092:	10 a6       	std	Z+40, r1	; 0x28
		twi->module->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    2094:	95 a1       	ldd	r25, Z+37	; 0x25

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    2096:	87 a1       	ldd	r24, Z+39	; 0x27
    2098:	89 17       	cp	r24, r25
    209a:	30 f4       	brcc	.+12     	; 0x20a8 <TWI_MasterReadHandler+0x48>
		twi->module->MCTRLB = TWI_MCMD_RECVTRANS_gc;
    209c:	01 90       	ld	r0, Z+
    209e:	f0 81       	ld	r31, Z
    20a0:	e0 2d       	mov	r30, r0
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	84 83       	std	Z+4, r24	; 0x04
    20a6:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->module->MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
    20a8:	a0 81       	ld	r26, Z
    20aa:	b1 81       	ldd	r27, Z+1	; 0x01
    20ac:	87 e0       	ldi	r24, 0x07	; 7
    20ae:	14 96       	adiw	r26, 0x04	; 4
    20b0:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	81 a7       	std	Z+41, r24	; 0x29
	twi->status = TWIM_STATUS_READY;
    20b6:	10 a6       	std	Z+40, r1	; 0x28
    20b8:	08 95       	ret

000020ba <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->module->MSTATUS;
    20ba:	dc 01       	movw	r26, r24
    20bc:	ed 91       	ld	r30, X+
    20be:	fc 91       	ld	r31, X
    20c0:	25 81       	ldd	r18, Z+5	; 0x05

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_ARBLOST_bm) || (currentStatus & TWI_BUSERR_bm)) {
    20c2:	32 2f       	mov	r19, r18
    20c4:	3c 70       	andi	r19, 0x0C	; 12
    20c6:	19 f0       	breq	.+6      	; 0x20ce <TWI_MasterInterruptHandler+0x14>

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    20c8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <TWI_MasterArbitrationLostBusErrorHandler>
    20cc:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_WIF_bm) {
    20ce:	26 ff       	sbrs	r18, 6
    20d0:	03 c0       	rjmp	.+6      	; 0x20d8 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    20d2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <TWI_MasterWriteHandler>
    20d6:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_RIF_bm) {
    20d8:	22 23       	and	r18, r18
    20da:	1c f4       	brge	.+6      	; 0x20e2 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    20dc:	0e 94 30 10 	call	0x2060	; 0x2060 <TWI_MasterReadHandler>
    20e0:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    20e2:	26 e0       	ldi	r18, 0x06	; 6
    20e4:	fc 01       	movw	r30, r24
    20e6:	21 a7       	std	Z+41, r18	; 0x29
	twi->status = TWIM_STATUS_READY;
    20e8:	10 a6       	std	Z+40, r1	; 0x28
    20ea:	08 95       	ret

000020ec <initUSART>:
 void initUSART(uint8_t baud_rate_code){  // Initialize USART

	int baud_rate = 9600;
	int cal_baud = 0;
	
	switch(baud_rate_code)
    20ec:	85 30       	cpi	r24, 0x05	; 5
    20ee:	71 f0       	breq	.+28     	; 0x210c <initUSART+0x20>
    20f0:	28 f4       	brcc	.+10     	; 0x20fc <initUSART+0x10>
    20f2:	82 30       	cpi	r24, 0x02	; 2
    20f4:	b9 f0       	breq	.+46     	; 0x2124 <initUSART+0x38>
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	31 f0       	breq	.+12     	; 0x2106 <initUSART+0x1a>
    20fa:	11 c0       	rjmp	.+34     	; 0x211e <initUSART+0x32>
    20fc:	86 30       	cpi	r24, 0x06	; 6
    20fe:	49 f0       	breq	.+18     	; 0x2112 <initUSART+0x26>
    2100:	87 30       	cpi	r24, 0x07	; 7
    2102:	51 f0       	breq	.+20     	; 0x2118 <initUSART+0x2c>
    2104:	0c c0       	rjmp	.+24     	; 0x211e <initUSART+0x32>
	{
		case 0x02: // 9600
			baud_rate = 9600;
			break;
		case 0x04: // 19200
			baud_rate = 19200;
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3b e4       	ldi	r19, 0x4B	; 75
    210a:	0e c0       	rjmp	.+28     	; 0x2128 <initUSART+0x3c>
			break;
		case 0x05: // 1200
			baud_rate = 1200;
    210c:	20 eb       	ldi	r18, 0xB0	; 176
    210e:	34 e0       	ldi	r19, 0x04	; 4
			break;
    2110:	0b c0       	rjmp	.+22     	; 0x2128 <initUSART+0x3c>
		case 0x06:	// 4800
			baud_rate = 4800;
    2112:	20 ec       	ldi	r18, 0xC0	; 192
    2114:	32 e1       	ldi	r19, 0x12	; 18
			break;
    2116:	08 c0       	rjmp	.+16     	; 0x2128 <initUSART+0x3c>
		case 0x07: // baud rate 300
			baud_rate = 300;
    2118:	2c e2       	ldi	r18, 0x2C	; 44
    211a:	31 e0       	ldi	r19, 0x01	; 1
			break;
    211c:	05 c0       	rjmp	.+10     	; 0x2128 <initUSART+0x3c>
		default:
			baud_rate = 300;
    211e:	2c e2       	ldi	r18, 0x2C	; 44
    2120:	31 e0       	ldi	r19, 0x01	; 1
			break;
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <initUSART+0x3c>
	int cal_baud = 0;
	
	switch(baud_rate_code)
	{
		case 0x02: // 9600
			baud_rate = 9600;
    2124:	20 e8       	ldi	r18, 0x80	; 128
    2126:	35 e2       	ldi	r19, 0x25	; 37
		default:
			baud_rate = 300;
			break;
	}
	
	 cal_baud = 64 * F_CPU / 16 / baud_rate;
    2128:	03 2e       	mov	r0, r19
    212a:	00 0c       	add	r0, r0
    212c:	44 0b       	sbc	r20, r20
    212e:	55 0b       	sbc	r21, r21
    2130:	64 e5       	ldi	r22, 0x54	; 84
    2132:	73 e7       	ldi	r23, 0x73	; 115
    2134:	8b ec       	ldi	r24, 0xCB	; 203
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodsi4>
		
	 PORTB_DIR |= (1 << PIN2_bp);
    213c:	e0 e2       	ldi	r30, 0x20	; 32
    213e:	f4 e0       	ldi	r31, 0x04	; 4
    2140:	80 81       	ld	r24, Z
    2142:	84 60       	ori	r24, 0x04	; 4
    2144:	80 83       	st	Z, r24

	 PORTB_OUT |= (1 << PIN2_bp);
    2146:	a4 e2       	ldi	r26, 0x24	; 36
    2148:	b4 e0       	ldi	r27, 0x04	; 4
    214a:	8c 91       	ld	r24, X
    214c:	84 60       	ori	r24, 0x04	; 4
    214e:	8c 93       	st	X, r24

	 PORTB_DIR &= ~(1 << PIN3_bp);
    2150:	80 81       	ld	r24, Z
    2152:	87 7f       	andi	r24, 0xF7	; 247
    2154:	80 83       	st	Z, r24

     PORTB_DIR |= (1 << PIN0_bp);
    2156:	80 81       	ld	r24, Z
    2158:	81 60       	ori	r24, 0x01	; 1
    215a:	80 83       	st	Z, r24
	 
	 USART0_BAUDH = (uint8_t)(cal_baud>>8); // Set the baud rate
    215c:	83 2f       	mov	r24, r19
    215e:	99 27       	eor	r25, r25
    2160:	87 fd       	sbrc	r24, 7
    2162:	9a 95       	dec	r25
    2164:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
	 USART0_BAUDL = (uint8_t)cal_baud;
    2168:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>

	 USART0_CTRLA |= (1 << USART_RS4850_bp);  // enable RS485 Support
    216c:	e5 e0       	ldi	r30, 0x05	; 5
    216e:	f8 e0       	ldi	r31, 0x08	; 8
    2170:	80 81       	ld	r24, Z
    2172:	81 60       	ori	r24, 0x01	; 1
    2174:	80 83       	st	Z, r24
		
	 USART0_CTRLB = (1 << USART_RXEN_bp) | (1 << USART_TXEN_bp);  // enable RX and TX
    2176:	80 ec       	ldi	r24, 0xC0	; 192
    2178:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>

	 USART0_CTRLC = (1 << USART_CHSIZE0_bp) | (1 << USART_CHSIZE1_bp); // 8 bit None parity 1stop bit
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
    2182:	08 95       	ret

00002184 <transmit_byte>:
	
 }

 void transmit_byte( uint8_t data ){
	
	 while ( !( USART0_STATUS & (1 << USART_DREIF_bp)) );  // Wait for empty buffer.
    2184:	e4 e0       	ldi	r30, 0x04	; 4
    2186:	f8 e0       	ldi	r31, 0x08	; 8
    2188:	90 81       	ld	r25, Z
    218a:	95 ff       	sbrs	r25, 5
    218c:	fd cf       	rjmp	.-6      	; 0x2188 <transmit_byte+0x4>
	 USART0_TXDATAL = data;            // Put data into buffer.
    218e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    2192:	08 95       	ret

00002194 <receive_byte>:
 }

 uint8_t receive_byte(void) {
	 loop_until_bit_is_set(USART0_STATUS, USART_RXCIE_bp);       /* Wait for incoming data */
    2194:	e4 e0       	ldi	r30, 0x04	; 4
    2196:	f8 e0       	ldi	r31, 0x08	; 8
    2198:	80 81       	ld	r24, Z
    219a:	88 23       	and	r24, r24
    219c:	ec f7       	brge	.-6      	; 0x2198 <receive_byte+0x4>
	 return USART0_RXDATAL;                                /* return register value */
    219e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 }
    21a2:	08 95       	ret

000021a4 <nibbleToHexCharacter>:

 char nibbleToHexCharacter(uint8_t nibble) {
	 /* Converts 4 bits into hexadecimal */
	 if (nibble < 10) {
    21a4:	8a 30       	cpi	r24, 0x0A	; 10
    21a6:	10 f4       	brcc	.+4      	; 0x21ac <nibbleToHexCharacter+0x8>
		 return ('0' + nibble);
    21a8:	80 5d       	subi	r24, 0xD0	; 208
    21aa:	08 95       	ret
	 }
	 else {
		 return ('A' + nibble - 10);
    21ac:	89 5c       	subi	r24, 0xC9	; 201
	 }
 }
    21ae:	08 95       	ret

000021b0 <GetHexString>:

 void GetHexString(uint8_t byte, char *out)
 {
    21b0:	1f 93       	push	r17
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	18 2f       	mov	r17, r24
    21b8:	eb 01       	movw	r28, r22
	 uint8_t nibble;
	 nibble = (byte & 0b11110000) >> 4;
	 out[0] = nibbleToHexCharacter(nibble);
    21ba:	82 95       	swap	r24
    21bc:	8f 70       	andi	r24, 0x0F	; 15
    21be:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <nibbleToHexCharacter>
    21c2:	88 83       	st	Y, r24
	 nibble = byte & 0b00001111;
	 out[1] = nibbleToHexCharacter(nibble);
    21c4:	81 2f       	mov	r24, r17
    21c6:	8f 70       	andi	r24, 0x0F	; 15
    21c8:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <nibbleToHexCharacter>
    21cc:	89 83       	std	Y+1, r24	; 0x01
 }
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	08 95       	ret

000021d6 <GetByteFromString>:
 
 uint8_t GetByteFromString(char *in)
 {
    21d6:	fc 01       	movw	r30, r24
	 uint8_t out = 0x00;
	 
	 if (in[0] >= 0x30 && in[0] <= 0x39)
    21d8:	20 81       	ld	r18, Z
    21da:	90 ed       	ldi	r25, 0xD0	; 208
    21dc:	92 0f       	add	r25, r18
    21de:	9a 30       	cpi	r25, 0x0A	; 10
    21e0:	20 f4       	brcc	.+8      	; 0x21ea <GetByteFromString+0x14>
	 {
		 out += (in[0] - 0x30) << 4;
    21e2:	89 2f       	mov	r24, r25
    21e4:	82 95       	swap	r24
    21e6:	80 7f       	andi	r24, 0xF0	; 240
    21e8:	0a c0       	rjmp	.+20     	; 0x21fe <GetByteFromString+0x28>
	 }
	 else if (in[0] >= 0x41 && in[0] <= 0x46)
    21ea:	8f eb       	ldi	r24, 0xBF	; 191
    21ec:	82 0f       	add	r24, r18
    21ee:	86 30       	cpi	r24, 0x06	; 6
    21f0:	28 f4       	brcc	.+10     	; 0x21fc <GetByteFromString+0x26>
	 {
		 out += (in[0] - 0x37) << 4;
    21f2:	27 53       	subi	r18, 0x37	; 55
    21f4:	82 2f       	mov	r24, r18
    21f6:	82 95       	swap	r24
    21f8:	80 7f       	andi	r24, 0xF0	; 240
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <GetByteFromString+0x28>
	 out[1] = nibbleToHexCharacter(nibble);
 }
 
 uint8_t GetByteFromString(char *in)
 {
	 uint8_t out = 0x00;
    21fc:	80 e0       	ldi	r24, 0x00	; 0
	 else if (in[0] >= 0x41 && in[0] <= 0x46)
	 {
		 out += (in[0] - 0x37) << 4;
	 }
	 
	 if (in[1] >= 0x30 && in[1] <= 0x39)
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	20 ed       	ldi	r18, 0xD0	; 208
    2202:	29 0f       	add	r18, r25
    2204:	2a 30       	cpi	r18, 0x0A	; 10
    2206:	10 f4       	brcc	.+4      	; 0x220c <GetByteFromString+0x36>
	 {
		 out += (in[1] - 0x30);
    2208:	82 0f       	add	r24, r18
    220a:	08 95       	ret
	 }
	 else if (in[1] >= 0x41 && in[1] <= 0x46)
    220c:	2f eb       	ldi	r18, 0xBF	; 191
    220e:	29 0f       	add	r18, r25
    2210:	26 30       	cpi	r18, 0x06	; 6
    2212:	10 f4       	brcc	.+4      	; 0x2218 <GetByteFromString+0x42>
	 {
		 out += (in[1] - 0x37);
    2214:	97 53       	subi	r25, 0x37	; 55
    2216:	89 0f       	add	r24, r25
		 
	 }
	 
	 
	 return out;
 }
    2218:	08 95       	ret

0000221a <print_bytes>:

 void print_bytes(uint8_t myBytes[], uint8_t len, int check_sum_enable)
 {
    221a:	af 92       	push	r10
    221c:	bf 92       	push	r11
    221e:	cf 92       	push	r12
    2220:	df 92       	push	r13
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	00 d0       	rcall	.+0      	; 0x2230 <print_bytes+0x16>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
	 uint8_t i = 0;
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
    2234:	41 30       	cpi	r20, 0x01	; 1
    2236:	51 05       	cpc	r21, r1
    2238:	19 f0       	breq	.+6      	; 0x2240 <print_bytes+0x26>
		 GetHexString((uint8_t)checksum, tmp);
		 transmit_byte(tmp[0]);
		 transmit_byte(tmp[1]);
	 }
	 else{
		 for(i = 0; i < len; i++)
    223a:	61 11       	cpse	r22, r1
    223c:	2b c0       	rjmp	.+86     	; 0x2294 <print_bytes+0x7a>
    223e:	3a c0       	rjmp	.+116    	; 0x22b4 <print_bytes+0x9a>
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
	 {
		 for(i = 0; i < len; i++)
    2240:	66 23       	and	r22, r22
    2242:	c9 f0       	breq	.+50     	; 0x2276 <print_bytes+0x5c>
    2244:	8c 01       	movw	r16, r24
    2246:	61 50       	subi	r22, 0x01	; 1
    2248:	26 2f       	mov	r18, r22
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	2f 5f       	subi	r18, 0xFF	; 255
    224e:	3f 4f       	sbci	r19, 0xFF	; 255
    2250:	7c 01       	movw	r14, r24
    2252:	e2 0e       	add	r14, r18
    2254:	f3 1e       	adc	r15, r19
    2256:	c1 2c       	mov	r12, r1
    2258:	d1 2c       	mov	r13, r1
    225a:	58 01       	movw	r10, r16
		 {
			 transmit_byte(myBytes[i]);
    225c:	f8 01       	movw	r30, r16
    225e:	81 91       	ld	r24, Z+
    2260:	8f 01       	movw	r16, r30
    2262:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmit_byte>
			 checksum += myBytes[i];
    2266:	f5 01       	movw	r30, r10
    2268:	80 81       	ld	r24, Z
    226a:	c8 0e       	add	r12, r24
    226c:	d1 1c       	adc	r13, r1
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
	 {
		 for(i = 0; i < len; i++)
    226e:	e0 16       	cp	r14, r16
    2270:	f1 06       	cpc	r15, r17
    2272:	99 f7       	brne	.-26     	; 0x225a <print_bytes+0x40>
    2274:	02 c0       	rjmp	.+4      	; 0x227a <print_bytes+0x60>
    2276:	c1 2c       	mov	r12, r1
    2278:	d1 2c       	mov	r13, r1
		 {
			 transmit_byte(myBytes[i]);
			 checksum += myBytes[i];
		 }
		 checksum = checksum & 0xff;
		 GetHexString((uint8_t)checksum, tmp);
    227a:	be 01       	movw	r22, r28
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	8c 2d       	mov	r24, r12
    2282:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <GetHexString>
		 transmit_byte(tmp[0]);
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmit_byte>
		 transmit_byte(tmp[1]);
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmit_byte>
    2292:	10 c0       	rjmp	.+32     	; 0x22b4 <print_bytes+0x9a>
    2294:	8c 01       	movw	r16, r24
    2296:	61 50       	subi	r22, 0x01	; 1
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	6f 5f       	subi	r22, 0xFF	; 255
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	7c 01       	movw	r14, r24
    22a0:	e6 0e       	add	r14, r22
    22a2:	f7 1e       	adc	r15, r23
	 }
	 else{
		 for(i = 0; i < len; i++)
		 {
			 transmit_byte(myBytes[i]);
    22a4:	f8 01       	movw	r30, r16
    22a6:	81 91       	ld	r24, Z+
    22a8:	8f 01       	movw	r16, r30
    22aa:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmit_byte>
		 GetHexString((uint8_t)checksum, tmp);
		 transmit_byte(tmp[0]);
		 transmit_byte(tmp[1]);
	 }
	 else{
		 for(i = 0; i < len; i++)
    22ae:	0e 15       	cp	r16, r14
    22b0:	1f 05       	cpc	r17, r15
    22b2:	c1 f7       	brne	.-16     	; 0x22a4 <print_bytes+0x8a>
		 {
			 transmit_byte(myBytes[i]);
		 }
	 }

	 transmit_byte(0x0d);
    22b4:	8d e0       	ldi	r24, 0x0D	; 13
    22b6:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmit_byte>
	 
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	ef 90       	pop	r14
    22ca:	df 90       	pop	r13
    22cc:	cf 90       	pop	r12
    22ce:	bf 90       	pop	r11
    22d0:	af 90       	pop	r10
    22d2:	08 95       	ret

000022d4 <__subsf3>:
    22d4:	50 58       	subi	r21, 0x80	; 128

000022d6 <__addsf3>:
    22d6:	bb 27       	eor	r27, r27
    22d8:	aa 27       	eor	r26, r26
    22da:	0e 94 82 11 	call	0x2304	; 0x2304 <__addsf3x>
    22de:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__fp_round>
    22e2:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_pscA>
    22e6:	38 f0       	brcs	.+14     	; 0x22f6 <__addsf3+0x20>
    22e8:	0e 94 bf 12 	call	0x257e	; 0x257e <__fp_pscB>
    22ec:	20 f0       	brcs	.+8      	; 0x22f6 <__addsf3+0x20>
    22ee:	39 f4       	brne	.+14     	; 0x22fe <__addsf3+0x28>
    22f0:	9f 3f       	cpi	r25, 0xFF	; 255
    22f2:	19 f4       	brne	.+6      	; 0x22fa <__addsf3+0x24>
    22f4:	26 f4       	brtc	.+8      	; 0x22fe <__addsf3+0x28>
    22f6:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>
    22fa:	0e f4       	brtc	.+2      	; 0x22fe <__addsf3+0x28>
    22fc:	e0 95       	com	r30
    22fe:	e7 fb       	bst	r30, 7
    2300:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>

00002304 <__addsf3x>:
    2304:	e9 2f       	mov	r30, r25
    2306:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fp_split3>
    230a:	58 f3       	brcs	.-42     	; 0x22e2 <__addsf3+0xc>
    230c:	ba 17       	cp	r27, r26
    230e:	62 07       	cpc	r22, r18
    2310:	73 07       	cpc	r23, r19
    2312:	84 07       	cpc	r24, r20
    2314:	95 07       	cpc	r25, r21
    2316:	20 f0       	brcs	.+8      	; 0x2320 <__addsf3x+0x1c>
    2318:	79 f4       	brne	.+30     	; 0x2338 <__addsf3x+0x34>
    231a:	a6 f5       	brtc	.+104    	; 0x2384 <__addsf3x+0x80>
    231c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__fp_zero>
    2320:	0e f4       	brtc	.+2      	; 0x2324 <__addsf3x+0x20>
    2322:	e0 95       	com	r30
    2324:	0b 2e       	mov	r0, r27
    2326:	ba 2f       	mov	r27, r26
    2328:	a0 2d       	mov	r26, r0
    232a:	0b 01       	movw	r0, r22
    232c:	b9 01       	movw	r22, r18
    232e:	90 01       	movw	r18, r0
    2330:	0c 01       	movw	r0, r24
    2332:	ca 01       	movw	r24, r20
    2334:	a0 01       	movw	r20, r0
    2336:	11 24       	eor	r1, r1
    2338:	ff 27       	eor	r31, r31
    233a:	59 1b       	sub	r21, r25
    233c:	99 f0       	breq	.+38     	; 0x2364 <__addsf3x+0x60>
    233e:	59 3f       	cpi	r21, 0xF9	; 249
    2340:	50 f4       	brcc	.+20     	; 0x2356 <__addsf3x+0x52>
    2342:	50 3e       	cpi	r21, 0xE0	; 224
    2344:	68 f1       	brcs	.+90     	; 0x23a0 <__addsf3x+0x9c>
    2346:	1a 16       	cp	r1, r26
    2348:	f0 40       	sbci	r31, 0x00	; 0
    234a:	a2 2f       	mov	r26, r18
    234c:	23 2f       	mov	r18, r19
    234e:	34 2f       	mov	r19, r20
    2350:	44 27       	eor	r20, r20
    2352:	58 5f       	subi	r21, 0xF8	; 248
    2354:	f3 cf       	rjmp	.-26     	; 0x233c <__addsf3x+0x38>
    2356:	46 95       	lsr	r20
    2358:	37 95       	ror	r19
    235a:	27 95       	ror	r18
    235c:	a7 95       	ror	r26
    235e:	f0 40       	sbci	r31, 0x00	; 0
    2360:	53 95       	inc	r21
    2362:	c9 f7       	brne	.-14     	; 0x2356 <__addsf3x+0x52>
    2364:	7e f4       	brtc	.+30     	; 0x2384 <__addsf3x+0x80>
    2366:	1f 16       	cp	r1, r31
    2368:	ba 0b       	sbc	r27, r26
    236a:	62 0b       	sbc	r22, r18
    236c:	73 0b       	sbc	r23, r19
    236e:	84 0b       	sbc	r24, r20
    2370:	ba f0       	brmi	.+46     	; 0x23a0 <__addsf3x+0x9c>
    2372:	91 50       	subi	r25, 0x01	; 1
    2374:	a1 f0       	breq	.+40     	; 0x239e <__addsf3x+0x9a>
    2376:	ff 0f       	add	r31, r31
    2378:	bb 1f       	adc	r27, r27
    237a:	66 1f       	adc	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	c2 f7       	brpl	.-16     	; 0x2372 <__addsf3x+0x6e>
    2382:	0e c0       	rjmp	.+28     	; 0x23a0 <__addsf3x+0x9c>
    2384:	ba 0f       	add	r27, r26
    2386:	62 1f       	adc	r22, r18
    2388:	73 1f       	adc	r23, r19
    238a:	84 1f       	adc	r24, r20
    238c:	48 f4       	brcc	.+18     	; 0x23a0 <__addsf3x+0x9c>
    238e:	87 95       	ror	r24
    2390:	77 95       	ror	r23
    2392:	67 95       	ror	r22
    2394:	b7 95       	ror	r27
    2396:	f7 95       	ror	r31
    2398:	9e 3f       	cpi	r25, 0xFE	; 254
    239a:	08 f0       	brcs	.+2      	; 0x239e <__addsf3x+0x9a>
    239c:	b0 cf       	rjmp	.-160    	; 0x22fe <__addsf3+0x28>
    239e:	93 95       	inc	r25
    23a0:	88 0f       	add	r24, r24
    23a2:	08 f0       	brcs	.+2      	; 0x23a6 <__addsf3x+0xa2>
    23a4:	99 27       	eor	r25, r25
    23a6:	ee 0f       	add	r30, r30
    23a8:	97 95       	ror	r25
    23aa:	87 95       	ror	r24
    23ac:	08 95       	ret

000023ae <__cmpsf2>:
    23ae:	0e 94 8b 12 	call	0x2516	; 0x2516 <__fp_cmp>
    23b2:	08 f4       	brcc	.+2      	; 0x23b6 <__cmpsf2+0x8>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	08 95       	ret

000023b8 <__divsf3>:
    23b8:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__divsf3x>
    23bc:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__fp_round>
    23c0:	0e 94 bf 12 	call	0x257e	; 0x257e <__fp_pscB>
    23c4:	58 f0       	brcs	.+22     	; 0x23dc <__divsf3+0x24>
    23c6:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_pscA>
    23ca:	40 f0       	brcs	.+16     	; 0x23dc <__divsf3+0x24>
    23cc:	29 f4       	brne	.+10     	; 0x23d8 <__divsf3+0x20>
    23ce:	5f 3f       	cpi	r21, 0xFF	; 255
    23d0:	29 f0       	breq	.+10     	; 0x23dc <__divsf3+0x24>
    23d2:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>
    23d6:	51 11       	cpse	r21, r1
    23d8:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__fp_szero>
    23dc:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>

000023e0 <__divsf3x>:
    23e0:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fp_split3>
    23e4:	68 f3       	brcs	.-38     	; 0x23c0 <__divsf3+0x8>

000023e6 <__divsf3_pse>:
    23e6:	99 23       	and	r25, r25
    23e8:	b1 f3       	breq	.-20     	; 0x23d6 <__divsf3+0x1e>
    23ea:	55 23       	and	r21, r21
    23ec:	91 f3       	breq	.-28     	; 0x23d2 <__divsf3+0x1a>
    23ee:	95 1b       	sub	r25, r21
    23f0:	55 0b       	sbc	r21, r21
    23f2:	bb 27       	eor	r27, r27
    23f4:	aa 27       	eor	r26, r26
    23f6:	62 17       	cp	r22, r18
    23f8:	73 07       	cpc	r23, r19
    23fa:	84 07       	cpc	r24, r20
    23fc:	38 f0       	brcs	.+14     	; 0x240c <__divsf3_pse+0x26>
    23fe:	9f 5f       	subi	r25, 0xFF	; 255
    2400:	5f 4f       	sbci	r21, 0xFF	; 255
    2402:	22 0f       	add	r18, r18
    2404:	33 1f       	adc	r19, r19
    2406:	44 1f       	adc	r20, r20
    2408:	aa 1f       	adc	r26, r26
    240a:	a9 f3       	breq	.-22     	; 0x23f6 <__divsf3_pse+0x10>
    240c:	35 d0       	rcall	.+106    	; 0x2478 <__divsf3_pse+0x92>
    240e:	0e 2e       	mov	r0, r30
    2410:	3a f0       	brmi	.+14     	; 0x2420 <__divsf3_pse+0x3a>
    2412:	e0 e8       	ldi	r30, 0x80	; 128
    2414:	32 d0       	rcall	.+100    	; 0x247a <__divsf3_pse+0x94>
    2416:	91 50       	subi	r25, 0x01	; 1
    2418:	50 40       	sbci	r21, 0x00	; 0
    241a:	e6 95       	lsr	r30
    241c:	00 1c       	adc	r0, r0
    241e:	ca f7       	brpl	.-14     	; 0x2412 <__divsf3_pse+0x2c>
    2420:	2b d0       	rcall	.+86     	; 0x2478 <__divsf3_pse+0x92>
    2422:	fe 2f       	mov	r31, r30
    2424:	29 d0       	rcall	.+82     	; 0x2478 <__divsf3_pse+0x92>
    2426:	66 0f       	add	r22, r22
    2428:	77 1f       	adc	r23, r23
    242a:	88 1f       	adc	r24, r24
    242c:	bb 1f       	adc	r27, r27
    242e:	26 17       	cp	r18, r22
    2430:	37 07       	cpc	r19, r23
    2432:	48 07       	cpc	r20, r24
    2434:	ab 07       	cpc	r26, r27
    2436:	b0 e8       	ldi	r27, 0x80	; 128
    2438:	09 f0       	breq	.+2      	; 0x243c <__divsf3_pse+0x56>
    243a:	bb 0b       	sbc	r27, r27
    243c:	80 2d       	mov	r24, r0
    243e:	bf 01       	movw	r22, r30
    2440:	ff 27       	eor	r31, r31
    2442:	93 58       	subi	r25, 0x83	; 131
    2444:	5f 4f       	sbci	r21, 0xFF	; 255
    2446:	3a f0       	brmi	.+14     	; 0x2456 <__divsf3_pse+0x70>
    2448:	9e 3f       	cpi	r25, 0xFE	; 254
    244a:	51 05       	cpc	r21, r1
    244c:	78 f0       	brcs	.+30     	; 0x246c <__divsf3_pse+0x86>
    244e:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>
    2452:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__fp_szero>
    2456:	5f 3f       	cpi	r21, 0xFF	; 255
    2458:	e4 f3       	brlt	.-8      	; 0x2452 <__divsf3_pse+0x6c>
    245a:	98 3e       	cpi	r25, 0xE8	; 232
    245c:	d4 f3       	brlt	.-12     	; 0x2452 <__divsf3_pse+0x6c>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b7 95       	ror	r27
    2466:	f7 95       	ror	r31
    2468:	9f 5f       	subi	r25, 0xFF	; 255
    246a:	c9 f7       	brne	.-14     	; 0x245e <__divsf3_pse+0x78>
    246c:	88 0f       	add	r24, r24
    246e:	91 1d       	adc	r25, r1
    2470:	96 95       	lsr	r25
    2472:	87 95       	ror	r24
    2474:	97 f9       	bld	r25, 7
    2476:	08 95       	ret
    2478:	e1 e0       	ldi	r30, 0x01	; 1
    247a:	66 0f       	add	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	bb 1f       	adc	r27, r27
    2482:	62 17       	cp	r22, r18
    2484:	73 07       	cpc	r23, r19
    2486:	84 07       	cpc	r24, r20
    2488:	ba 07       	cpc	r27, r26
    248a:	20 f0       	brcs	.+8      	; 0x2494 <__divsf3_pse+0xae>
    248c:	62 1b       	sub	r22, r18
    248e:	73 0b       	sbc	r23, r19
    2490:	84 0b       	sbc	r24, r20
    2492:	ba 0b       	sbc	r27, r26
    2494:	ee 1f       	adc	r30, r30
    2496:	88 f7       	brcc	.-30     	; 0x247a <__divsf3_pse+0x94>
    2498:	e0 95       	com	r30
    249a:	08 95       	ret

0000249c <__floatunsisf>:
    249c:	e8 94       	clt
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <__floatsisf+0x12>

000024a0 <__floatsisf>:
    24a0:	97 fb       	bst	r25, 7
    24a2:	3e f4       	brtc	.+14     	; 0x24b2 <__floatsisf+0x12>
    24a4:	90 95       	com	r25
    24a6:	80 95       	com	r24
    24a8:	70 95       	com	r23
    24aa:	61 95       	neg	r22
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	99 23       	and	r25, r25
    24b4:	a9 f0       	breq	.+42     	; 0x24e0 <__floatsisf+0x40>
    24b6:	f9 2f       	mov	r31, r25
    24b8:	96 e9       	ldi	r25, 0x96	; 150
    24ba:	bb 27       	eor	r27, r27
    24bc:	93 95       	inc	r25
    24be:	f6 95       	lsr	r31
    24c0:	87 95       	ror	r24
    24c2:	77 95       	ror	r23
    24c4:	67 95       	ror	r22
    24c6:	b7 95       	ror	r27
    24c8:	f1 11       	cpse	r31, r1
    24ca:	f8 cf       	rjmp	.-16     	; 0x24bc <__floatsisf+0x1c>
    24cc:	fa f4       	brpl	.+62     	; 0x250c <__floatsisf+0x6c>
    24ce:	bb 0f       	add	r27, r27
    24d0:	11 f4       	brne	.+4      	; 0x24d6 <__floatsisf+0x36>
    24d2:	60 ff       	sbrs	r22, 0
    24d4:	1b c0       	rjmp	.+54     	; 0x250c <__floatsisf+0x6c>
    24d6:	6f 5f       	subi	r22, 0xFF	; 255
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255
    24da:	8f 4f       	sbci	r24, 0xFF	; 255
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	16 c0       	rjmp	.+44     	; 0x250c <__floatsisf+0x6c>
    24e0:	88 23       	and	r24, r24
    24e2:	11 f0       	breq	.+4      	; 0x24e8 <__floatsisf+0x48>
    24e4:	96 e9       	ldi	r25, 0x96	; 150
    24e6:	11 c0       	rjmp	.+34     	; 0x250a <__floatsisf+0x6a>
    24e8:	77 23       	and	r23, r23
    24ea:	21 f0       	breq	.+8      	; 0x24f4 <__floatsisf+0x54>
    24ec:	9e e8       	ldi	r25, 0x8E	; 142
    24ee:	87 2f       	mov	r24, r23
    24f0:	76 2f       	mov	r23, r22
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <__floatsisf+0x5e>
    24f4:	66 23       	and	r22, r22
    24f6:	71 f0       	breq	.+28     	; 0x2514 <__floatsisf+0x74>
    24f8:	96 e8       	ldi	r25, 0x86	; 134
    24fa:	86 2f       	mov	r24, r22
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	2a f0       	brmi	.+10     	; 0x250c <__floatsisf+0x6c>
    2502:	9a 95       	dec	r25
    2504:	66 0f       	add	r22, r22
    2506:	77 1f       	adc	r23, r23
    2508:	88 1f       	adc	r24, r24
    250a:	da f7       	brpl	.-10     	; 0x2502 <__floatsisf+0x62>
    250c:	88 0f       	add	r24, r24
    250e:	96 95       	lsr	r25
    2510:	87 95       	ror	r24
    2512:	97 f9       	bld	r25, 7
    2514:	08 95       	ret

00002516 <__fp_cmp>:
    2516:	99 0f       	add	r25, r25
    2518:	00 08       	sbc	r0, r0
    251a:	55 0f       	add	r21, r21
    251c:	aa 0b       	sbc	r26, r26
    251e:	e0 e8       	ldi	r30, 0x80	; 128
    2520:	fe ef       	ldi	r31, 0xFE	; 254
    2522:	16 16       	cp	r1, r22
    2524:	17 06       	cpc	r1, r23
    2526:	e8 07       	cpc	r30, r24
    2528:	f9 07       	cpc	r31, r25
    252a:	c0 f0       	brcs	.+48     	; 0x255c <__fp_cmp+0x46>
    252c:	12 16       	cp	r1, r18
    252e:	13 06       	cpc	r1, r19
    2530:	e4 07       	cpc	r30, r20
    2532:	f5 07       	cpc	r31, r21
    2534:	98 f0       	brcs	.+38     	; 0x255c <__fp_cmp+0x46>
    2536:	62 1b       	sub	r22, r18
    2538:	73 0b       	sbc	r23, r19
    253a:	84 0b       	sbc	r24, r20
    253c:	95 0b       	sbc	r25, r21
    253e:	39 f4       	brne	.+14     	; 0x254e <__fp_cmp+0x38>
    2540:	0a 26       	eor	r0, r26
    2542:	61 f0       	breq	.+24     	; 0x255c <__fp_cmp+0x46>
    2544:	23 2b       	or	r18, r19
    2546:	24 2b       	or	r18, r20
    2548:	25 2b       	or	r18, r21
    254a:	21 f4       	brne	.+8      	; 0x2554 <__fp_cmp+0x3e>
    254c:	08 95       	ret
    254e:	0a 26       	eor	r0, r26
    2550:	09 f4       	brne	.+2      	; 0x2554 <__fp_cmp+0x3e>
    2552:	a1 40       	sbci	r26, 0x01	; 1
    2554:	a6 95       	lsr	r26
    2556:	8f ef       	ldi	r24, 0xFF	; 255
    2558:	81 1d       	adc	r24, r1
    255a:	81 1d       	adc	r24, r1
    255c:	08 95       	ret

0000255e <__fp_inf>:
    255e:	97 f9       	bld	r25, 7
    2560:	9f 67       	ori	r25, 0x7F	; 127
    2562:	80 e8       	ldi	r24, 0x80	; 128
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	08 95       	ret

0000256a <__fp_nan>:
    256a:	9f ef       	ldi	r25, 0xFF	; 255
    256c:	80 ec       	ldi	r24, 0xC0	; 192
    256e:	08 95       	ret

00002570 <__fp_pscA>:
    2570:	00 24       	eor	r0, r0
    2572:	0a 94       	dec	r0
    2574:	16 16       	cp	r1, r22
    2576:	17 06       	cpc	r1, r23
    2578:	18 06       	cpc	r1, r24
    257a:	09 06       	cpc	r0, r25
    257c:	08 95       	ret

0000257e <__fp_pscB>:
    257e:	00 24       	eor	r0, r0
    2580:	0a 94       	dec	r0
    2582:	12 16       	cp	r1, r18
    2584:	13 06       	cpc	r1, r19
    2586:	14 06       	cpc	r1, r20
    2588:	05 06       	cpc	r0, r21
    258a:	08 95       	ret

0000258c <__fp_round>:
    258c:	09 2e       	mov	r0, r25
    258e:	03 94       	inc	r0
    2590:	00 0c       	add	r0, r0
    2592:	11 f4       	brne	.+4      	; 0x2598 <__fp_round+0xc>
    2594:	88 23       	and	r24, r24
    2596:	52 f0       	brmi	.+20     	; 0x25ac <__fp_round+0x20>
    2598:	bb 0f       	add	r27, r27
    259a:	40 f4       	brcc	.+16     	; 0x25ac <__fp_round+0x20>
    259c:	bf 2b       	or	r27, r31
    259e:	11 f4       	brne	.+4      	; 0x25a4 <__fp_round+0x18>
    25a0:	60 ff       	sbrs	r22, 0
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <__fp_round+0x20>
    25a4:	6f 5f       	subi	r22, 0xFF	; 255
    25a6:	7f 4f       	sbci	r23, 0xFF	; 255
    25a8:	8f 4f       	sbci	r24, 0xFF	; 255
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	08 95       	ret

000025ae <__fp_split3>:
    25ae:	57 fd       	sbrc	r21, 7
    25b0:	90 58       	subi	r25, 0x80	; 128
    25b2:	44 0f       	add	r20, r20
    25b4:	55 1f       	adc	r21, r21
    25b6:	59 f0       	breq	.+22     	; 0x25ce <__fp_splitA+0x10>
    25b8:	5f 3f       	cpi	r21, 0xFF	; 255
    25ba:	71 f0       	breq	.+28     	; 0x25d8 <__fp_splitA+0x1a>
    25bc:	47 95       	ror	r20

000025be <__fp_splitA>:
    25be:	88 0f       	add	r24, r24
    25c0:	97 fb       	bst	r25, 7
    25c2:	99 1f       	adc	r25, r25
    25c4:	61 f0       	breq	.+24     	; 0x25de <__fp_splitA+0x20>
    25c6:	9f 3f       	cpi	r25, 0xFF	; 255
    25c8:	79 f0       	breq	.+30     	; 0x25e8 <__fp_splitA+0x2a>
    25ca:	87 95       	ror	r24
    25cc:	08 95       	ret
    25ce:	12 16       	cp	r1, r18
    25d0:	13 06       	cpc	r1, r19
    25d2:	14 06       	cpc	r1, r20
    25d4:	55 1f       	adc	r21, r21
    25d6:	f2 cf       	rjmp	.-28     	; 0x25bc <__fp_split3+0xe>
    25d8:	46 95       	lsr	r20
    25da:	f1 df       	rcall	.-30     	; 0x25be <__fp_splitA>
    25dc:	08 c0       	rjmp	.+16     	; 0x25ee <__fp_splitA+0x30>
    25de:	16 16       	cp	r1, r22
    25e0:	17 06       	cpc	r1, r23
    25e2:	18 06       	cpc	r1, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	f1 cf       	rjmp	.-30     	; 0x25ca <__fp_splitA+0xc>
    25e8:	86 95       	lsr	r24
    25ea:	71 05       	cpc	r23, r1
    25ec:	61 05       	cpc	r22, r1
    25ee:	08 94       	sec
    25f0:	08 95       	ret

000025f2 <__fp_zero>:
    25f2:	e8 94       	clt

000025f4 <__fp_szero>:
    25f4:	bb 27       	eor	r27, r27
    25f6:	66 27       	eor	r22, r22
    25f8:	77 27       	eor	r23, r23
    25fa:	cb 01       	movw	r24, r22
    25fc:	97 f9       	bld	r25, 7
    25fe:	08 95       	ret

00002600 <__mulsf3>:
    2600:	0e 94 13 13 	call	0x2626	; 0x2626 <__mulsf3x>
    2604:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__fp_round>
    2608:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_pscA>
    260c:	38 f0       	brcs	.+14     	; 0x261c <__mulsf3+0x1c>
    260e:	0e 94 bf 12 	call	0x257e	; 0x257e <__fp_pscB>
    2612:	20 f0       	brcs	.+8      	; 0x261c <__mulsf3+0x1c>
    2614:	95 23       	and	r25, r21
    2616:	11 f0       	breq	.+4      	; 0x261c <__mulsf3+0x1c>
    2618:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>
    261c:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>
    2620:	11 24       	eor	r1, r1
    2622:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__fp_szero>

00002626 <__mulsf3x>:
    2626:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fp_split3>
    262a:	70 f3       	brcs	.-36     	; 0x2608 <__mulsf3+0x8>

0000262c <__mulsf3_pse>:
    262c:	95 9f       	mul	r25, r21
    262e:	c1 f3       	breq	.-16     	; 0x2620 <__mulsf3+0x20>
    2630:	95 0f       	add	r25, r21
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	55 1f       	adc	r21, r21
    2636:	62 9f       	mul	r22, r18
    2638:	f0 01       	movw	r30, r0
    263a:	72 9f       	mul	r23, r18
    263c:	bb 27       	eor	r27, r27
    263e:	f0 0d       	add	r31, r0
    2640:	b1 1d       	adc	r27, r1
    2642:	63 9f       	mul	r22, r19
    2644:	aa 27       	eor	r26, r26
    2646:	f0 0d       	add	r31, r0
    2648:	b1 1d       	adc	r27, r1
    264a:	aa 1f       	adc	r26, r26
    264c:	64 9f       	mul	r22, r20
    264e:	66 27       	eor	r22, r22
    2650:	b0 0d       	add	r27, r0
    2652:	a1 1d       	adc	r26, r1
    2654:	66 1f       	adc	r22, r22
    2656:	82 9f       	mul	r24, r18
    2658:	22 27       	eor	r18, r18
    265a:	b0 0d       	add	r27, r0
    265c:	a1 1d       	adc	r26, r1
    265e:	62 1f       	adc	r22, r18
    2660:	73 9f       	mul	r23, r19
    2662:	b0 0d       	add	r27, r0
    2664:	a1 1d       	adc	r26, r1
    2666:	62 1f       	adc	r22, r18
    2668:	83 9f       	mul	r24, r19
    266a:	a0 0d       	add	r26, r0
    266c:	61 1d       	adc	r22, r1
    266e:	22 1f       	adc	r18, r18
    2670:	74 9f       	mul	r23, r20
    2672:	33 27       	eor	r19, r19
    2674:	a0 0d       	add	r26, r0
    2676:	61 1d       	adc	r22, r1
    2678:	23 1f       	adc	r18, r19
    267a:	84 9f       	mul	r24, r20
    267c:	60 0d       	add	r22, r0
    267e:	21 1d       	adc	r18, r1
    2680:	82 2f       	mov	r24, r18
    2682:	76 2f       	mov	r23, r22
    2684:	6a 2f       	mov	r22, r26
    2686:	11 24       	eor	r1, r1
    2688:	9f 57       	subi	r25, 0x7F	; 127
    268a:	50 40       	sbci	r21, 0x00	; 0
    268c:	9a f0       	brmi	.+38     	; 0x26b4 <__mulsf3_pse+0x88>
    268e:	f1 f0       	breq	.+60     	; 0x26cc <__mulsf3_pse+0xa0>
    2690:	88 23       	and	r24, r24
    2692:	4a f0       	brmi	.+18     	; 0x26a6 <__mulsf3_pse+0x7a>
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	bb 1f       	adc	r27, r27
    269a:	66 1f       	adc	r22, r22
    269c:	77 1f       	adc	r23, r23
    269e:	88 1f       	adc	r24, r24
    26a0:	91 50       	subi	r25, 0x01	; 1
    26a2:	50 40       	sbci	r21, 0x00	; 0
    26a4:	a9 f7       	brne	.-22     	; 0x2690 <__mulsf3_pse+0x64>
    26a6:	9e 3f       	cpi	r25, 0xFE	; 254
    26a8:	51 05       	cpc	r21, r1
    26aa:	80 f0       	brcs	.+32     	; 0x26cc <__mulsf3_pse+0xa0>
    26ac:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>
    26b0:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__fp_szero>
    26b4:	5f 3f       	cpi	r21, 0xFF	; 255
    26b6:	e4 f3       	brlt	.-8      	; 0x26b0 <__mulsf3_pse+0x84>
    26b8:	98 3e       	cpi	r25, 0xE8	; 232
    26ba:	d4 f3       	brlt	.-12     	; 0x26b0 <__mulsf3_pse+0x84>
    26bc:	86 95       	lsr	r24
    26be:	77 95       	ror	r23
    26c0:	67 95       	ror	r22
    26c2:	b7 95       	ror	r27
    26c4:	f7 95       	ror	r31
    26c6:	e7 95       	ror	r30
    26c8:	9f 5f       	subi	r25, 0xFF	; 255
    26ca:	c1 f7       	brne	.-16     	; 0x26bc <__mulsf3_pse+0x90>
    26cc:	fe 2b       	or	r31, r30
    26ce:	88 0f       	add	r24, r24
    26d0:	91 1d       	adc	r25, r1
    26d2:	96 95       	lsr	r25
    26d4:	87 95       	ror	r24
    26d6:	97 f9       	bld	r25, 7
    26d8:	08 95       	ret

000026da <vfprintf>:
    26da:	a0 e1       	ldi	r26, 0x10	; 16
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e3 e7       	ldi	r30, 0x73	; 115
    26e0:	f3 e1       	ldi	r31, 0x13	; 19
    26e2:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__prologue_saves__>
    26e6:	7c 01       	movw	r14, r24
    26e8:	1b 01       	movw	r2, r22
    26ea:	6a 01       	movw	r12, r20
    26ec:	fc 01       	movw	r30, r24
    26ee:	16 82       	std	Z+6, r1	; 0x06
    26f0:	17 82       	std	Z+7, r1	; 0x07
    26f2:	83 81       	ldd	r24, Z+3	; 0x03
    26f4:	81 ff       	sbrs	r24, 1
    26f6:	44 c3       	rjmp	.+1672   	; 0x2d80 <vfprintf+0x6a6>
    26f8:	9e 01       	movw	r18, r28
    26fa:	2f 5f       	subi	r18, 0xFF	; 255
    26fc:	3f 4f       	sbci	r19, 0xFF	; 255
    26fe:	39 01       	movw	r6, r18
    2700:	f7 01       	movw	r30, r14
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	f1 01       	movw	r30, r2
    2706:	93 fd       	sbrc	r25, 3
    2708:	85 91       	lpm	r24, Z+
    270a:	93 ff       	sbrs	r25, 3
    270c:	81 91       	ld	r24, Z+
    270e:	1f 01       	movw	r2, r30
    2710:	88 23       	and	r24, r24
    2712:	09 f4       	brne	.+2      	; 0x2716 <vfprintf+0x3c>
    2714:	31 c3       	rjmp	.+1634   	; 0x2d78 <vfprintf+0x69e>
    2716:	85 32       	cpi	r24, 0x25	; 37
    2718:	39 f4       	brne	.+14     	; 0x2728 <vfprintf+0x4e>
    271a:	93 fd       	sbrc	r25, 3
    271c:	85 91       	lpm	r24, Z+
    271e:	93 ff       	sbrs	r25, 3
    2720:	81 91       	ld	r24, Z+
    2722:	1f 01       	movw	r2, r30
    2724:	85 32       	cpi	r24, 0x25	; 37
    2726:	39 f4       	brne	.+14     	; 0x2736 <vfprintf+0x5c>
    2728:	b7 01       	movw	r22, r14
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2730:	56 01       	movw	r10, r12
    2732:	65 01       	movw	r12, r10
    2734:	e5 cf       	rjmp	.-54     	; 0x2700 <vfprintf+0x26>
    2736:	10 e0       	ldi	r17, 0x00	; 0
    2738:	51 2c       	mov	r5, r1
    273a:	91 2c       	mov	r9, r1
    273c:	ff e1       	ldi	r31, 0x1F	; 31
    273e:	f9 15       	cp	r31, r9
    2740:	d8 f0       	brcs	.+54     	; 0x2778 <vfprintf+0x9e>
    2742:	8b 32       	cpi	r24, 0x2B	; 43
    2744:	79 f0       	breq	.+30     	; 0x2764 <vfprintf+0x8a>
    2746:	38 f4       	brcc	.+14     	; 0x2756 <vfprintf+0x7c>
    2748:	80 32       	cpi	r24, 0x20	; 32
    274a:	79 f0       	breq	.+30     	; 0x276a <vfprintf+0x90>
    274c:	83 32       	cpi	r24, 0x23	; 35
    274e:	a1 f4       	brne	.+40     	; 0x2778 <vfprintf+0x9e>
    2750:	f9 2d       	mov	r31, r9
    2752:	f0 61       	ori	r31, 0x10	; 16
    2754:	2e c0       	rjmp	.+92     	; 0x27b2 <vfprintf+0xd8>
    2756:	8d 32       	cpi	r24, 0x2D	; 45
    2758:	61 f0       	breq	.+24     	; 0x2772 <vfprintf+0x98>
    275a:	80 33       	cpi	r24, 0x30	; 48
    275c:	69 f4       	brne	.+26     	; 0x2778 <vfprintf+0x9e>
    275e:	29 2d       	mov	r18, r9
    2760:	21 60       	ori	r18, 0x01	; 1
    2762:	2d c0       	rjmp	.+90     	; 0x27be <vfprintf+0xe4>
    2764:	39 2d       	mov	r19, r9
    2766:	32 60       	ori	r19, 0x02	; 2
    2768:	93 2e       	mov	r9, r19
    276a:	89 2d       	mov	r24, r9
    276c:	84 60       	ori	r24, 0x04	; 4
    276e:	98 2e       	mov	r9, r24
    2770:	2a c0       	rjmp	.+84     	; 0x27c6 <vfprintf+0xec>
    2772:	e9 2d       	mov	r30, r9
    2774:	e8 60       	ori	r30, 0x08	; 8
    2776:	15 c0       	rjmp	.+42     	; 0x27a2 <vfprintf+0xc8>
    2778:	97 fc       	sbrc	r9, 7
    277a:	2d c0       	rjmp	.+90     	; 0x27d6 <vfprintf+0xfc>
    277c:	20 ed       	ldi	r18, 0xD0	; 208
    277e:	28 0f       	add	r18, r24
    2780:	2a 30       	cpi	r18, 0x0A	; 10
    2782:	88 f4       	brcc	.+34     	; 0x27a6 <vfprintf+0xcc>
    2784:	96 fe       	sbrs	r9, 6
    2786:	06 c0       	rjmp	.+12     	; 0x2794 <vfprintf+0xba>
    2788:	3a e0       	ldi	r19, 0x0A	; 10
    278a:	13 9f       	mul	r17, r19
    278c:	20 0d       	add	r18, r0
    278e:	11 24       	eor	r1, r1
    2790:	12 2f       	mov	r17, r18
    2792:	19 c0       	rjmp	.+50     	; 0x27c6 <vfprintf+0xec>
    2794:	8a e0       	ldi	r24, 0x0A	; 10
    2796:	58 9e       	mul	r5, r24
    2798:	20 0d       	add	r18, r0
    279a:	11 24       	eor	r1, r1
    279c:	52 2e       	mov	r5, r18
    279e:	e9 2d       	mov	r30, r9
    27a0:	e0 62       	ori	r30, 0x20	; 32
    27a2:	9e 2e       	mov	r9, r30
    27a4:	10 c0       	rjmp	.+32     	; 0x27c6 <vfprintf+0xec>
    27a6:	8e 32       	cpi	r24, 0x2E	; 46
    27a8:	31 f4       	brne	.+12     	; 0x27b6 <vfprintf+0xdc>
    27aa:	96 fc       	sbrc	r9, 6
    27ac:	e5 c2       	rjmp	.+1482   	; 0x2d78 <vfprintf+0x69e>
    27ae:	f9 2d       	mov	r31, r9
    27b0:	f0 64       	ori	r31, 0x40	; 64
    27b2:	9f 2e       	mov	r9, r31
    27b4:	08 c0       	rjmp	.+16     	; 0x27c6 <vfprintf+0xec>
    27b6:	8c 36       	cpi	r24, 0x6C	; 108
    27b8:	21 f4       	brne	.+8      	; 0x27c2 <vfprintf+0xe8>
    27ba:	29 2d       	mov	r18, r9
    27bc:	20 68       	ori	r18, 0x80	; 128
    27be:	92 2e       	mov	r9, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <vfprintf+0xec>
    27c2:	88 36       	cpi	r24, 0x68	; 104
    27c4:	41 f4       	brne	.+16     	; 0x27d6 <vfprintf+0xfc>
    27c6:	f1 01       	movw	r30, r2
    27c8:	93 fd       	sbrc	r25, 3
    27ca:	85 91       	lpm	r24, Z+
    27cc:	93 ff       	sbrs	r25, 3
    27ce:	81 91       	ld	r24, Z+
    27d0:	1f 01       	movw	r2, r30
    27d2:	81 11       	cpse	r24, r1
    27d4:	b3 cf       	rjmp	.-154    	; 0x273c <vfprintf+0x62>
    27d6:	9b eb       	ldi	r25, 0xBB	; 187
    27d8:	98 0f       	add	r25, r24
    27da:	93 30       	cpi	r25, 0x03	; 3
    27dc:	20 f4       	brcc	.+8      	; 0x27e6 <vfprintf+0x10c>
    27de:	99 2d       	mov	r25, r9
    27e0:	90 61       	ori	r25, 0x10	; 16
    27e2:	80 5e       	subi	r24, 0xE0	; 224
    27e4:	07 c0       	rjmp	.+14     	; 0x27f4 <vfprintf+0x11a>
    27e6:	9b e9       	ldi	r25, 0x9B	; 155
    27e8:	98 0f       	add	r25, r24
    27ea:	93 30       	cpi	r25, 0x03	; 3
    27ec:	08 f0       	brcs	.+2      	; 0x27f0 <vfprintf+0x116>
    27ee:	66 c1       	rjmp	.+716    	; 0x2abc <vfprintf+0x3e2>
    27f0:	99 2d       	mov	r25, r9
    27f2:	9f 7e       	andi	r25, 0xEF	; 239
    27f4:	96 ff       	sbrs	r25, 6
    27f6:	16 e0       	ldi	r17, 0x06	; 6
    27f8:	9f 73       	andi	r25, 0x3F	; 63
    27fa:	99 2e       	mov	r9, r25
    27fc:	85 36       	cpi	r24, 0x65	; 101
    27fe:	19 f4       	brne	.+6      	; 0x2806 <vfprintf+0x12c>
    2800:	90 64       	ori	r25, 0x40	; 64
    2802:	99 2e       	mov	r9, r25
    2804:	08 c0       	rjmp	.+16     	; 0x2816 <vfprintf+0x13c>
    2806:	86 36       	cpi	r24, 0x66	; 102
    2808:	21 f4       	brne	.+8      	; 0x2812 <vfprintf+0x138>
    280a:	39 2f       	mov	r19, r25
    280c:	30 68       	ori	r19, 0x80	; 128
    280e:	93 2e       	mov	r9, r19
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <vfprintf+0x13c>
    2812:	11 11       	cpse	r17, r1
    2814:	11 50       	subi	r17, 0x01	; 1
    2816:	97 fe       	sbrs	r9, 7
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <vfprintf+0x14e>
    281a:	1c 33       	cpi	r17, 0x3C	; 60
    281c:	50 f4       	brcc	.+20     	; 0x2832 <vfprintf+0x158>
    281e:	44 24       	eor	r4, r4
    2820:	43 94       	inc	r4
    2822:	41 0e       	add	r4, r17
    2824:	27 e0       	ldi	r18, 0x07	; 7
    2826:	0b c0       	rjmp	.+22     	; 0x283e <vfprintf+0x164>
    2828:	18 30       	cpi	r17, 0x08	; 8
    282a:	38 f0       	brcs	.+14     	; 0x283a <vfprintf+0x160>
    282c:	27 e0       	ldi	r18, 0x07	; 7
    282e:	17 e0       	ldi	r17, 0x07	; 7
    2830:	05 c0       	rjmp	.+10     	; 0x283c <vfprintf+0x162>
    2832:	27 e0       	ldi	r18, 0x07	; 7
    2834:	9c e3       	ldi	r25, 0x3C	; 60
    2836:	49 2e       	mov	r4, r25
    2838:	02 c0       	rjmp	.+4      	; 0x283e <vfprintf+0x164>
    283a:	21 2f       	mov	r18, r17
    283c:	41 2c       	mov	r4, r1
    283e:	56 01       	movw	r10, r12
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	a8 0e       	add	r10, r24
    2844:	b1 1c       	adc	r11, r1
    2846:	f6 01       	movw	r30, r12
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	04 2d       	mov	r16, r4
    2852:	a3 01       	movw	r20, r6
    2854:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__ftoa_engine>
    2858:	6c 01       	movw	r12, r24
    285a:	f9 81       	ldd	r31, Y+1	; 0x01
    285c:	fc 87       	std	Y+12, r31	; 0x0c
    285e:	f0 ff       	sbrs	r31, 0
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <vfprintf+0x18c>
    2862:	f3 ff       	sbrs	r31, 3
    2864:	06 c0       	rjmp	.+12     	; 0x2872 <vfprintf+0x198>
    2866:	91 fc       	sbrc	r9, 1
    2868:	06 c0       	rjmp	.+12     	; 0x2876 <vfprintf+0x19c>
    286a:	92 fe       	sbrs	r9, 2
    286c:	06 c0       	rjmp	.+12     	; 0x287a <vfprintf+0x1a0>
    286e:	00 e2       	ldi	r16, 0x20	; 32
    2870:	05 c0       	rjmp	.+10     	; 0x287c <vfprintf+0x1a2>
    2872:	0d e2       	ldi	r16, 0x2D	; 45
    2874:	03 c0       	rjmp	.+6      	; 0x287c <vfprintf+0x1a2>
    2876:	0b e2       	ldi	r16, 0x2B	; 43
    2878:	01 c0       	rjmp	.+2      	; 0x287c <vfprintf+0x1a2>
    287a:	00 e0       	ldi	r16, 0x00	; 0
    287c:	8c 85       	ldd	r24, Y+12	; 0x0c
    287e:	8c 70       	andi	r24, 0x0C	; 12
    2880:	19 f0       	breq	.+6      	; 0x2888 <vfprintf+0x1ae>
    2882:	01 11       	cpse	r16, r1
    2884:	5a c2       	rjmp	.+1204   	; 0x2d3a <vfprintf+0x660>
    2886:	9b c2       	rjmp	.+1334   	; 0x2dbe <vfprintf+0x6e4>
    2888:	97 fe       	sbrs	r9, 7
    288a:	10 c0       	rjmp	.+32     	; 0x28ac <vfprintf+0x1d2>
    288c:	4c 0c       	add	r4, r12
    288e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2890:	f4 ff       	sbrs	r31, 4
    2892:	04 c0       	rjmp	.+8      	; 0x289c <vfprintf+0x1c2>
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	81 33       	cpi	r24, 0x31	; 49
    2898:	09 f4       	brne	.+2      	; 0x289c <vfprintf+0x1c2>
    289a:	4a 94       	dec	r4
    289c:	14 14       	cp	r1, r4
    289e:	74 f5       	brge	.+92     	; 0x28fc <vfprintf+0x222>
    28a0:	28 e0       	ldi	r18, 0x08	; 8
    28a2:	24 15       	cp	r18, r4
    28a4:	78 f5       	brcc	.+94     	; 0x2904 <vfprintf+0x22a>
    28a6:	88 e0       	ldi	r24, 0x08	; 8
    28a8:	48 2e       	mov	r4, r24
    28aa:	2c c0       	rjmp	.+88     	; 0x2904 <vfprintf+0x22a>
    28ac:	96 fc       	sbrc	r9, 6
    28ae:	2a c0       	rjmp	.+84     	; 0x2904 <vfprintf+0x22a>
    28b0:	81 2f       	mov	r24, r17
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	8c 15       	cp	r24, r12
    28b6:	9d 05       	cpc	r25, r13
    28b8:	9c f0       	brlt	.+38     	; 0x28e0 <vfprintf+0x206>
    28ba:	3c ef       	ldi	r19, 0xFC	; 252
    28bc:	c3 16       	cp	r12, r19
    28be:	3f ef       	ldi	r19, 0xFF	; 255
    28c0:	d3 06       	cpc	r13, r19
    28c2:	74 f0       	brlt	.+28     	; 0x28e0 <vfprintf+0x206>
    28c4:	89 2d       	mov	r24, r9
    28c6:	80 68       	ori	r24, 0x80	; 128
    28c8:	98 2e       	mov	r9, r24
    28ca:	0a c0       	rjmp	.+20     	; 0x28e0 <vfprintf+0x206>
    28cc:	e2 e0       	ldi	r30, 0x02	; 2
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	ec 0f       	add	r30, r28
    28d2:	fd 1f       	adc	r31, r29
    28d4:	e1 0f       	add	r30, r17
    28d6:	f1 1d       	adc	r31, r1
    28d8:	80 81       	ld	r24, Z
    28da:	80 33       	cpi	r24, 0x30	; 48
    28dc:	19 f4       	brne	.+6      	; 0x28e4 <vfprintf+0x20a>
    28de:	11 50       	subi	r17, 0x01	; 1
    28e0:	11 11       	cpse	r17, r1
    28e2:	f4 cf       	rjmp	.-24     	; 0x28cc <vfprintf+0x1f2>
    28e4:	97 fe       	sbrs	r9, 7
    28e6:	0e c0       	rjmp	.+28     	; 0x2904 <vfprintf+0x22a>
    28e8:	44 24       	eor	r4, r4
    28ea:	43 94       	inc	r4
    28ec:	41 0e       	add	r4, r17
    28ee:	81 2f       	mov	r24, r17
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	c8 16       	cp	r12, r24
    28f4:	d9 06       	cpc	r13, r25
    28f6:	2c f4       	brge	.+10     	; 0x2902 <vfprintf+0x228>
    28f8:	1c 19       	sub	r17, r12
    28fa:	04 c0       	rjmp	.+8      	; 0x2904 <vfprintf+0x22a>
    28fc:	44 24       	eor	r4, r4
    28fe:	43 94       	inc	r4
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <vfprintf+0x22a>
    2902:	10 e0       	ldi	r17, 0x00	; 0
    2904:	97 fe       	sbrs	r9, 7
    2906:	06 c0       	rjmp	.+12     	; 0x2914 <vfprintf+0x23a>
    2908:	1c 14       	cp	r1, r12
    290a:	1d 04       	cpc	r1, r13
    290c:	34 f4       	brge	.+12     	; 0x291a <vfprintf+0x240>
    290e:	c6 01       	movw	r24, r12
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	05 c0       	rjmp	.+10     	; 0x291e <vfprintf+0x244>
    2914:	85 e0       	ldi	r24, 0x05	; 5
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	02 c0       	rjmp	.+4      	; 0x291e <vfprintf+0x244>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	01 11       	cpse	r16, r1
    2920:	01 96       	adiw	r24, 0x01	; 1
    2922:	11 23       	and	r17, r17
    2924:	31 f0       	breq	.+12     	; 0x2932 <vfprintf+0x258>
    2926:	21 2f       	mov	r18, r17
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	2f 5f       	subi	r18, 0xFF	; 255
    292c:	3f 4f       	sbci	r19, 0xFF	; 255
    292e:	82 0f       	add	r24, r18
    2930:	93 1f       	adc	r25, r19
    2932:	25 2d       	mov	r18, r5
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	82 17       	cp	r24, r18
    2938:	93 07       	cpc	r25, r19
    293a:	14 f4       	brge	.+4      	; 0x2940 <vfprintf+0x266>
    293c:	58 1a       	sub	r5, r24
    293e:	01 c0       	rjmp	.+2      	; 0x2942 <vfprintf+0x268>
    2940:	51 2c       	mov	r5, r1
    2942:	89 2d       	mov	r24, r9
    2944:	89 70       	andi	r24, 0x09	; 9
    2946:	49 f4       	brne	.+18     	; 0x295a <vfprintf+0x280>
    2948:	55 20       	and	r5, r5
    294a:	39 f0       	breq	.+14     	; 0x295a <vfprintf+0x280>
    294c:	b7 01       	movw	r22, r14
    294e:	80 e2       	ldi	r24, 0x20	; 32
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2956:	5a 94       	dec	r5
    2958:	f7 cf       	rjmp	.-18     	; 0x2948 <vfprintf+0x26e>
    295a:	00 23       	and	r16, r16
    295c:	29 f0       	breq	.+10     	; 0x2968 <vfprintf+0x28e>
    295e:	b7 01       	movw	r22, r14
    2960:	80 2f       	mov	r24, r16
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2968:	93 fc       	sbrc	r9, 3
    296a:	09 c0       	rjmp	.+18     	; 0x297e <vfprintf+0x2a4>
    296c:	55 20       	and	r5, r5
    296e:	39 f0       	breq	.+14     	; 0x297e <vfprintf+0x2a4>
    2970:	b7 01       	movw	r22, r14
    2972:	80 e3       	ldi	r24, 0x30	; 48
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    297a:	5a 94       	dec	r5
    297c:	f7 cf       	rjmp	.-18     	; 0x296c <vfprintf+0x292>
    297e:	97 fe       	sbrs	r9, 7
    2980:	4c c0       	rjmp	.+152    	; 0x2a1a <vfprintf+0x340>
    2982:	46 01       	movw	r8, r12
    2984:	d7 fe       	sbrs	r13, 7
    2986:	02 c0       	rjmp	.+4      	; 0x298c <vfprintf+0x2b2>
    2988:	81 2c       	mov	r8, r1
    298a:	91 2c       	mov	r9, r1
    298c:	c6 01       	movw	r24, r12
    298e:	88 19       	sub	r24, r8
    2990:	99 09       	sbc	r25, r9
    2992:	f3 01       	movw	r30, r6
    2994:	e8 0f       	add	r30, r24
    2996:	f9 1f       	adc	r31, r25
    2998:	ed 87       	std	Y+13, r30	; 0x0d
    299a:	fe 87       	std	Y+14, r31	; 0x0e
    299c:	96 01       	movw	r18, r12
    299e:	24 19       	sub	r18, r4
    29a0:	31 09       	sbc	r19, r1
    29a2:	2f 87       	std	Y+15, r18	; 0x0f
    29a4:	38 8b       	std	Y+16, r19	; 0x10
    29a6:	01 2f       	mov	r16, r17
    29a8:	10 e0       	ldi	r17, 0x00	; 0
    29aa:	11 95       	neg	r17
    29ac:	01 95       	neg	r16
    29ae:	11 09       	sbc	r17, r1
    29b0:	3f ef       	ldi	r19, 0xFF	; 255
    29b2:	83 16       	cp	r8, r19
    29b4:	93 06       	cpc	r9, r19
    29b6:	29 f4       	brne	.+10     	; 0x29c2 <vfprintf+0x2e8>
    29b8:	b7 01       	movw	r22, r14
    29ba:	8e e2       	ldi	r24, 0x2E	; 46
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    29c2:	c8 14       	cp	r12, r8
    29c4:	d9 04       	cpc	r13, r9
    29c6:	4c f0       	brlt	.+18     	; 0x29da <vfprintf+0x300>
    29c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ca:	98 89       	ldd	r25, Y+16	; 0x10
    29cc:	88 15       	cp	r24, r8
    29ce:	99 05       	cpc	r25, r9
    29d0:	24 f4       	brge	.+8      	; 0x29da <vfprintf+0x300>
    29d2:	ed 85       	ldd	r30, Y+13	; 0x0d
    29d4:	fe 85       	ldd	r31, Y+14	; 0x0e
    29d6:	81 81       	ldd	r24, Z+1	; 0x01
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <vfprintf+0x302>
    29da:	80 e3       	ldi	r24, 0x30	; 48
    29dc:	f1 e0       	ldi	r31, 0x01	; 1
    29de:	8f 1a       	sub	r8, r31
    29e0:	91 08       	sbc	r9, r1
    29e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    29e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    29e6:	2f 5f       	subi	r18, 0xFF	; 255
    29e8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ea:	2d 87       	std	Y+13, r18	; 0x0d
    29ec:	3e 87       	std	Y+14, r19	; 0x0e
    29ee:	80 16       	cp	r8, r16
    29f0:	91 06       	cpc	r9, r17
    29f2:	2c f0       	brlt	.+10     	; 0x29fe <vfprintf+0x324>
    29f4:	b7 01       	movw	r22, r14
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    29fc:	d9 cf       	rjmp	.-78     	; 0x29b0 <vfprintf+0x2d6>
    29fe:	c8 14       	cp	r12, r8
    2a00:	d9 04       	cpc	r13, r9
    2a02:	41 f4       	brne	.+16     	; 0x2a14 <vfprintf+0x33a>
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	96 33       	cpi	r25, 0x36	; 54
    2a08:	20 f4       	brcc	.+8      	; 0x2a12 <vfprintf+0x338>
    2a0a:	95 33       	cpi	r25, 0x35	; 53
    2a0c:	19 f4       	brne	.+6      	; 0x2a14 <vfprintf+0x33a>
    2a0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a10:	34 ff       	sbrs	r19, 4
    2a12:	81 e3       	ldi	r24, 0x31	; 49
    2a14:	b7 01       	movw	r22, r14
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	4e c0       	rjmp	.+156    	; 0x2ab6 <vfprintf+0x3dc>
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	81 33       	cpi	r24, 0x31	; 49
    2a1e:	19 f0       	breq	.+6      	; 0x2a26 <vfprintf+0x34c>
    2a20:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a22:	9f 7e       	andi	r25, 0xEF	; 239
    2a24:	9c 87       	std	Y+12, r25	; 0x0c
    2a26:	b7 01       	movw	r22, r14
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2a2e:	11 11       	cpse	r17, r1
    2a30:	05 c0       	rjmp	.+10     	; 0x2a3c <vfprintf+0x362>
    2a32:	94 fc       	sbrc	r9, 4
    2a34:	18 c0       	rjmp	.+48     	; 0x2a66 <vfprintf+0x38c>
    2a36:	85 e6       	ldi	r24, 0x65	; 101
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	17 c0       	rjmp	.+46     	; 0x2a6a <vfprintf+0x390>
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	8e e2       	ldi	r24, 0x2E	; 46
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2a46:	1e 5f       	subi	r17, 0xFE	; 254
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	01 e0       	ldi	r16, 0x01	; 1
    2a4c:	08 0f       	add	r16, r24
    2a4e:	f3 01       	movw	r30, r6
    2a50:	e8 0f       	add	r30, r24
    2a52:	f1 1d       	adc	r31, r1
    2a54:	80 81       	ld	r24, Z
    2a56:	b7 01       	movw	r22, r14
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2a5e:	80 2f       	mov	r24, r16
    2a60:	01 13       	cpse	r16, r17
    2a62:	f3 cf       	rjmp	.-26     	; 0x2a4a <vfprintf+0x370>
    2a64:	e6 cf       	rjmp	.-52     	; 0x2a32 <vfprintf+0x358>
    2a66:	85 e4       	ldi	r24, 0x45	; 69
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	b7 01       	movw	r22, r14
    2a6c:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2a70:	d7 fc       	sbrc	r13, 7
    2a72:	06 c0       	rjmp	.+12     	; 0x2a80 <vfprintf+0x3a6>
    2a74:	c1 14       	cp	r12, r1
    2a76:	d1 04       	cpc	r13, r1
    2a78:	41 f4       	brne	.+16     	; 0x2a8a <vfprintf+0x3b0>
    2a7a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a7c:	e4 ff       	sbrs	r30, 4
    2a7e:	05 c0       	rjmp	.+10     	; 0x2a8a <vfprintf+0x3b0>
    2a80:	d1 94       	neg	r13
    2a82:	c1 94       	neg	r12
    2a84:	d1 08       	sbc	r13, r1
    2a86:	8d e2       	ldi	r24, 0x2D	; 45
    2a88:	01 c0       	rjmp	.+2      	; 0x2a8c <vfprintf+0x3b2>
    2a8a:	8b e2       	ldi	r24, 0x2B	; 43
    2a8c:	b7 01       	movw	r22, r14
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2a94:	80 e3       	ldi	r24, 0x30	; 48
    2a96:	2a e0       	ldi	r18, 0x0A	; 10
    2a98:	c2 16       	cp	r12, r18
    2a9a:	d1 04       	cpc	r13, r1
    2a9c:	2c f0       	brlt	.+10     	; 0x2aa8 <vfprintf+0x3ce>
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	fa e0       	ldi	r31, 0x0A	; 10
    2aa2:	cf 1a       	sub	r12, r31
    2aa4:	d1 08       	sbc	r13, r1
    2aa6:	f7 cf       	rjmp	.-18     	; 0x2a96 <vfprintf+0x3bc>
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2ab0:	b7 01       	movw	r22, r14
    2ab2:	c6 01       	movw	r24, r12
    2ab4:	c0 96       	adiw	r24, 0x30	; 48
    2ab6:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2aba:	54 c1       	rjmp	.+680    	; 0x2d64 <vfprintf+0x68a>
    2abc:	83 36       	cpi	r24, 0x63	; 99
    2abe:	31 f0       	breq	.+12     	; 0x2acc <vfprintf+0x3f2>
    2ac0:	83 37       	cpi	r24, 0x73	; 115
    2ac2:	79 f0       	breq	.+30     	; 0x2ae2 <vfprintf+0x408>
    2ac4:	83 35       	cpi	r24, 0x53	; 83
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <vfprintf+0x3f0>
    2ac8:	56 c0       	rjmp	.+172    	; 0x2b76 <vfprintf+0x49c>
    2aca:	20 c0       	rjmp	.+64     	; 0x2b0c <vfprintf+0x432>
    2acc:	56 01       	movw	r10, r12
    2ace:	32 e0       	ldi	r19, 0x02	; 2
    2ad0:	a3 0e       	add	r10, r19
    2ad2:	b1 1c       	adc	r11, r1
    2ad4:	f6 01       	movw	r30, r12
    2ad6:	80 81       	ld	r24, Z
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	01 e0       	ldi	r16, 0x01	; 1
    2adc:	10 e0       	ldi	r17, 0x00	; 0
    2ade:	63 01       	movw	r12, r6
    2ae0:	12 c0       	rjmp	.+36     	; 0x2b06 <vfprintf+0x42c>
    2ae2:	56 01       	movw	r10, r12
    2ae4:	f2 e0       	ldi	r31, 0x02	; 2
    2ae6:	af 0e       	add	r10, r31
    2ae8:	b1 1c       	adc	r11, r1
    2aea:	f6 01       	movw	r30, r12
    2aec:	c0 80       	ld	r12, Z
    2aee:	d1 80       	ldd	r13, Z+1	; 0x01
    2af0:	96 fe       	sbrs	r9, 6
    2af2:	03 c0       	rjmp	.+6      	; 0x2afa <vfprintf+0x420>
    2af4:	61 2f       	mov	r22, r17
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <vfprintf+0x424>
    2afa:	6f ef       	ldi	r22, 0xFF	; 255
    2afc:	7f ef       	ldi	r23, 0xFF	; 255
    2afe:	c6 01       	movw	r24, r12
    2b00:	0e 94 31 18 	call	0x3062	; 0x3062 <strnlen>
    2b04:	8c 01       	movw	r16, r24
    2b06:	f9 2d       	mov	r31, r9
    2b08:	ff 77       	andi	r31, 0x7F	; 127
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <vfprintf+0x45a>
    2b0c:	56 01       	movw	r10, r12
    2b0e:	22 e0       	ldi	r18, 0x02	; 2
    2b10:	a2 0e       	add	r10, r18
    2b12:	b1 1c       	adc	r11, r1
    2b14:	f6 01       	movw	r30, r12
    2b16:	c0 80       	ld	r12, Z
    2b18:	d1 80       	ldd	r13, Z+1	; 0x01
    2b1a:	96 fe       	sbrs	r9, 6
    2b1c:	03 c0       	rjmp	.+6      	; 0x2b24 <vfprintf+0x44a>
    2b1e:	61 2f       	mov	r22, r17
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <vfprintf+0x44e>
    2b24:	6f ef       	ldi	r22, 0xFF	; 255
    2b26:	7f ef       	ldi	r23, 0xFF	; 255
    2b28:	c6 01       	movw	r24, r12
    2b2a:	0e 94 19 18 	call	0x3032	; 0x3032 <strnlen_P>
    2b2e:	8c 01       	movw	r16, r24
    2b30:	f9 2d       	mov	r31, r9
    2b32:	f0 68       	ori	r31, 0x80	; 128
    2b34:	9f 2e       	mov	r9, r31
    2b36:	f3 fd       	sbrc	r31, 3
    2b38:	1a c0       	rjmp	.+52     	; 0x2b6e <vfprintf+0x494>
    2b3a:	85 2d       	mov	r24, r5
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	08 17       	cp	r16, r24
    2b40:	19 07       	cpc	r17, r25
    2b42:	a8 f4       	brcc	.+42     	; 0x2b6e <vfprintf+0x494>
    2b44:	b7 01       	movw	r22, r14
    2b46:	80 e2       	ldi	r24, 0x20	; 32
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2b4e:	5a 94       	dec	r5
    2b50:	f4 cf       	rjmp	.-24     	; 0x2b3a <vfprintf+0x460>
    2b52:	f6 01       	movw	r30, r12
    2b54:	97 fc       	sbrc	r9, 7
    2b56:	85 91       	lpm	r24, Z+
    2b58:	97 fe       	sbrs	r9, 7
    2b5a:	81 91       	ld	r24, Z+
    2b5c:	6f 01       	movw	r12, r30
    2b5e:	b7 01       	movw	r22, r14
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2b66:	51 10       	cpse	r5, r1
    2b68:	5a 94       	dec	r5
    2b6a:	01 50       	subi	r16, 0x01	; 1
    2b6c:	11 09       	sbc	r17, r1
    2b6e:	01 15       	cp	r16, r1
    2b70:	11 05       	cpc	r17, r1
    2b72:	79 f7       	brne	.-34     	; 0x2b52 <vfprintf+0x478>
    2b74:	f7 c0       	rjmp	.+494    	; 0x2d64 <vfprintf+0x68a>
    2b76:	84 36       	cpi	r24, 0x64	; 100
    2b78:	11 f0       	breq	.+4      	; 0x2b7e <vfprintf+0x4a4>
    2b7a:	89 36       	cpi	r24, 0x69	; 105
    2b7c:	61 f5       	brne	.+88     	; 0x2bd6 <vfprintf+0x4fc>
    2b7e:	56 01       	movw	r10, r12
    2b80:	97 fe       	sbrs	r9, 7
    2b82:	09 c0       	rjmp	.+18     	; 0x2b96 <vfprintf+0x4bc>
    2b84:	24 e0       	ldi	r18, 0x04	; 4
    2b86:	a2 0e       	add	r10, r18
    2b88:	b1 1c       	adc	r11, r1
    2b8a:	f6 01       	movw	r30, r12
    2b8c:	60 81       	ld	r22, Z
    2b8e:	71 81       	ldd	r23, Z+1	; 0x01
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	93 81       	ldd	r25, Z+3	; 0x03
    2b94:	0a c0       	rjmp	.+20     	; 0x2baa <vfprintf+0x4d0>
    2b96:	f2 e0       	ldi	r31, 0x02	; 2
    2b98:	af 0e       	add	r10, r31
    2b9a:	b1 1c       	adc	r11, r1
    2b9c:	f6 01       	movw	r30, r12
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	07 2e       	mov	r0, r23
    2ba4:	00 0c       	add	r0, r0
    2ba6:	88 0b       	sbc	r24, r24
    2ba8:	99 0b       	sbc	r25, r25
    2baa:	f9 2d       	mov	r31, r9
    2bac:	ff 76       	andi	r31, 0x6F	; 111
    2bae:	9f 2e       	mov	r9, r31
    2bb0:	97 ff       	sbrs	r25, 7
    2bb2:	09 c0       	rjmp	.+18     	; 0x2bc6 <vfprintf+0x4ec>
    2bb4:	90 95       	com	r25
    2bb6:	80 95       	com	r24
    2bb8:	70 95       	com	r23
    2bba:	61 95       	neg	r22
    2bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc2:	f0 68       	ori	r31, 0x80	; 128
    2bc4:	9f 2e       	mov	r9, r31
    2bc6:	2a e0       	ldi	r18, 0x0A	; 10
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	a3 01       	movw	r20, r6
    2bcc:	0e 94 a8 18 	call	0x3150	; 0x3150 <__ultoa_invert>
    2bd0:	c8 2e       	mov	r12, r24
    2bd2:	c6 18       	sub	r12, r6
    2bd4:	3f c0       	rjmp	.+126    	; 0x2c54 <vfprintf+0x57a>
    2bd6:	09 2d       	mov	r16, r9
    2bd8:	85 37       	cpi	r24, 0x75	; 117
    2bda:	21 f4       	brne	.+8      	; 0x2be4 <vfprintf+0x50a>
    2bdc:	0f 7e       	andi	r16, 0xEF	; 239
    2bde:	2a e0       	ldi	r18, 0x0A	; 10
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	1d c0       	rjmp	.+58     	; 0x2c1e <vfprintf+0x544>
    2be4:	09 7f       	andi	r16, 0xF9	; 249
    2be6:	8f 36       	cpi	r24, 0x6F	; 111
    2be8:	91 f0       	breq	.+36     	; 0x2c0e <vfprintf+0x534>
    2bea:	18 f4       	brcc	.+6      	; 0x2bf2 <vfprintf+0x518>
    2bec:	88 35       	cpi	r24, 0x58	; 88
    2bee:	59 f0       	breq	.+22     	; 0x2c06 <vfprintf+0x52c>
    2bf0:	c3 c0       	rjmp	.+390    	; 0x2d78 <vfprintf+0x69e>
    2bf2:	80 37       	cpi	r24, 0x70	; 112
    2bf4:	19 f0       	breq	.+6      	; 0x2bfc <vfprintf+0x522>
    2bf6:	88 37       	cpi	r24, 0x78	; 120
    2bf8:	11 f0       	breq	.+4      	; 0x2bfe <vfprintf+0x524>
    2bfa:	be c0       	rjmp	.+380    	; 0x2d78 <vfprintf+0x69e>
    2bfc:	00 61       	ori	r16, 0x10	; 16
    2bfe:	04 ff       	sbrs	r16, 4
    2c00:	09 c0       	rjmp	.+18     	; 0x2c14 <vfprintf+0x53a>
    2c02:	04 60       	ori	r16, 0x04	; 4
    2c04:	07 c0       	rjmp	.+14     	; 0x2c14 <vfprintf+0x53a>
    2c06:	94 fe       	sbrs	r9, 4
    2c08:	08 c0       	rjmp	.+16     	; 0x2c1a <vfprintf+0x540>
    2c0a:	06 60       	ori	r16, 0x06	; 6
    2c0c:	06 c0       	rjmp	.+12     	; 0x2c1a <vfprintf+0x540>
    2c0e:	28 e0       	ldi	r18, 0x08	; 8
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <vfprintf+0x544>
    2c14:	20 e1       	ldi	r18, 0x10	; 16
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <vfprintf+0x544>
    2c1a:	20 e1       	ldi	r18, 0x10	; 16
    2c1c:	32 e0       	ldi	r19, 0x02	; 2
    2c1e:	56 01       	movw	r10, r12
    2c20:	07 ff       	sbrs	r16, 7
    2c22:	09 c0       	rjmp	.+18     	; 0x2c36 <vfprintf+0x55c>
    2c24:	84 e0       	ldi	r24, 0x04	; 4
    2c26:	a8 0e       	add	r10, r24
    2c28:	b1 1c       	adc	r11, r1
    2c2a:	f6 01       	movw	r30, r12
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	08 c0       	rjmp	.+16     	; 0x2c46 <vfprintf+0x56c>
    2c36:	f2 e0       	ldi	r31, 0x02	; 2
    2c38:	af 0e       	add	r10, r31
    2c3a:	b1 1c       	adc	r11, r1
    2c3c:	f6 01       	movw	r30, r12
    2c3e:	60 81       	ld	r22, Z
    2c40:	71 81       	ldd	r23, Z+1	; 0x01
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a3 01       	movw	r20, r6
    2c48:	0e 94 a8 18 	call	0x3150	; 0x3150 <__ultoa_invert>
    2c4c:	c8 2e       	mov	r12, r24
    2c4e:	c6 18       	sub	r12, r6
    2c50:	0f 77       	andi	r16, 0x7F	; 127
    2c52:	90 2e       	mov	r9, r16
    2c54:	96 fe       	sbrs	r9, 6
    2c56:	0b c0       	rjmp	.+22     	; 0x2c6e <vfprintf+0x594>
    2c58:	09 2d       	mov	r16, r9
    2c5a:	0e 7f       	andi	r16, 0xFE	; 254
    2c5c:	c1 16       	cp	r12, r17
    2c5e:	50 f4       	brcc	.+20     	; 0x2c74 <vfprintf+0x59a>
    2c60:	94 fe       	sbrs	r9, 4
    2c62:	0a c0       	rjmp	.+20     	; 0x2c78 <vfprintf+0x59e>
    2c64:	92 fc       	sbrc	r9, 2
    2c66:	08 c0       	rjmp	.+16     	; 0x2c78 <vfprintf+0x59e>
    2c68:	09 2d       	mov	r16, r9
    2c6a:	0e 7e       	andi	r16, 0xEE	; 238
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <vfprintf+0x59e>
    2c6e:	dc 2c       	mov	r13, r12
    2c70:	09 2d       	mov	r16, r9
    2c72:	03 c0       	rjmp	.+6      	; 0x2c7a <vfprintf+0x5a0>
    2c74:	dc 2c       	mov	r13, r12
    2c76:	01 c0       	rjmp	.+2      	; 0x2c7a <vfprintf+0x5a0>
    2c78:	d1 2e       	mov	r13, r17
    2c7a:	04 ff       	sbrs	r16, 4
    2c7c:	0d c0       	rjmp	.+26     	; 0x2c98 <vfprintf+0x5be>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ec 0d       	add	r30, r12
    2c82:	f1 1d       	adc	r31, r1
    2c84:	80 81       	ld	r24, Z
    2c86:	80 33       	cpi	r24, 0x30	; 48
    2c88:	11 f4       	brne	.+4      	; 0x2c8e <vfprintf+0x5b4>
    2c8a:	09 7e       	andi	r16, 0xE9	; 233
    2c8c:	09 c0       	rjmp	.+18     	; 0x2ca0 <vfprintf+0x5c6>
    2c8e:	02 ff       	sbrs	r16, 2
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <vfprintf+0x5c4>
    2c92:	d3 94       	inc	r13
    2c94:	d3 94       	inc	r13
    2c96:	04 c0       	rjmp	.+8      	; 0x2ca0 <vfprintf+0x5c6>
    2c98:	80 2f       	mov	r24, r16
    2c9a:	86 78       	andi	r24, 0x86	; 134
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <vfprintf+0x5c6>
    2c9e:	d3 94       	inc	r13
    2ca0:	03 fd       	sbrc	r16, 3
    2ca2:	11 c0       	rjmp	.+34     	; 0x2cc6 <vfprintf+0x5ec>
    2ca4:	00 ff       	sbrs	r16, 0
    2ca6:	06 c0       	rjmp	.+12     	; 0x2cb4 <vfprintf+0x5da>
    2ca8:	1c 2d       	mov	r17, r12
    2caa:	d5 14       	cp	r13, r5
    2cac:	80 f4       	brcc	.+32     	; 0x2cce <vfprintf+0x5f4>
    2cae:	15 0d       	add	r17, r5
    2cb0:	1d 19       	sub	r17, r13
    2cb2:	0d c0       	rjmp	.+26     	; 0x2cce <vfprintf+0x5f4>
    2cb4:	d5 14       	cp	r13, r5
    2cb6:	58 f4       	brcc	.+22     	; 0x2cce <vfprintf+0x5f4>
    2cb8:	b7 01       	movw	r22, r14
    2cba:	80 e2       	ldi	r24, 0x20	; 32
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2cc2:	d3 94       	inc	r13
    2cc4:	f7 cf       	rjmp	.-18     	; 0x2cb4 <vfprintf+0x5da>
    2cc6:	d5 14       	cp	r13, r5
    2cc8:	10 f4       	brcc	.+4      	; 0x2cce <vfprintf+0x5f4>
    2cca:	5d 18       	sub	r5, r13
    2ccc:	01 c0       	rjmp	.+2      	; 0x2cd0 <vfprintf+0x5f6>
    2cce:	51 2c       	mov	r5, r1
    2cd0:	04 ff       	sbrs	r16, 4
    2cd2:	10 c0       	rjmp	.+32     	; 0x2cf4 <vfprintf+0x61a>
    2cd4:	b7 01       	movw	r22, r14
    2cd6:	80 e3       	ldi	r24, 0x30	; 48
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2cde:	02 ff       	sbrs	r16, 2
    2ce0:	17 c0       	rjmp	.+46     	; 0x2d10 <vfprintf+0x636>
    2ce2:	01 fd       	sbrc	r16, 1
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <vfprintf+0x612>
    2ce6:	88 e7       	ldi	r24, 0x78	; 120
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <vfprintf+0x616>
    2cec:	88 e5       	ldi	r24, 0x58	; 88
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	b7 01       	movw	r22, r14
    2cf2:	0c c0       	rjmp	.+24     	; 0x2d0c <vfprintf+0x632>
    2cf4:	80 2f       	mov	r24, r16
    2cf6:	86 78       	andi	r24, 0x86	; 134
    2cf8:	59 f0       	breq	.+22     	; 0x2d10 <vfprintf+0x636>
    2cfa:	01 ff       	sbrs	r16, 1
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <vfprintf+0x628>
    2cfe:	8b e2       	ldi	r24, 0x2B	; 43
    2d00:	01 c0       	rjmp	.+2      	; 0x2d04 <vfprintf+0x62a>
    2d02:	80 e2       	ldi	r24, 0x20	; 32
    2d04:	07 fd       	sbrc	r16, 7
    2d06:	8d e2       	ldi	r24, 0x2D	; 45
    2d08:	b7 01       	movw	r22, r14
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2d10:	c1 16       	cp	r12, r17
    2d12:	38 f4       	brcc	.+14     	; 0x2d22 <vfprintf+0x648>
    2d14:	b7 01       	movw	r22, r14
    2d16:	80 e3       	ldi	r24, 0x30	; 48
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2d1e:	11 50       	subi	r17, 0x01	; 1
    2d20:	f7 cf       	rjmp	.-18     	; 0x2d10 <vfprintf+0x636>
    2d22:	ca 94       	dec	r12
    2d24:	f3 01       	movw	r30, r6
    2d26:	ec 0d       	add	r30, r12
    2d28:	f1 1d       	adc	r31, r1
    2d2a:	80 81       	ld	r24, Z
    2d2c:	b7 01       	movw	r22, r14
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2d34:	c1 10       	cpse	r12, r1
    2d36:	f5 cf       	rjmp	.-22     	; 0x2d22 <vfprintf+0x648>
    2d38:	15 c0       	rjmp	.+42     	; 0x2d64 <vfprintf+0x68a>
    2d3a:	f4 e0       	ldi	r31, 0x04	; 4
    2d3c:	f5 15       	cp	r31, r5
    2d3e:	60 f5       	brcc	.+88     	; 0x2d98 <vfprintf+0x6be>
    2d40:	84 e0       	ldi	r24, 0x04	; 4
    2d42:	58 1a       	sub	r5, r24
    2d44:	93 fe       	sbrs	r9, 3
    2d46:	1f c0       	rjmp	.+62     	; 0x2d86 <vfprintf+0x6ac>
    2d48:	01 11       	cpse	r16, r1
    2d4a:	27 c0       	rjmp	.+78     	; 0x2d9a <vfprintf+0x6c0>
    2d4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d4e:	23 ff       	sbrs	r18, 3
    2d50:	2a c0       	rjmp	.+84     	; 0x2da6 <vfprintf+0x6cc>
    2d52:	0c e7       	ldi	r16, 0x7C	; 124
    2d54:	10 e0       	ldi	r17, 0x00	; 0
    2d56:	39 2d       	mov	r19, r9
    2d58:	30 71       	andi	r19, 0x10	; 16
    2d5a:	93 2e       	mov	r9, r19
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	84 91       	lpm	r24, Z
    2d60:	81 11       	cpse	r24, r1
    2d62:	24 c0       	rjmp	.+72     	; 0x2dac <vfprintf+0x6d2>
    2d64:	55 20       	and	r5, r5
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <vfprintf+0x690>
    2d68:	e4 cc       	rjmp	.-1592   	; 0x2732 <vfprintf+0x58>
    2d6a:	b7 01       	movw	r22, r14
    2d6c:	80 e2       	ldi	r24, 0x20	; 32
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2d74:	5a 94       	dec	r5
    2d76:	f6 cf       	rjmp	.-20     	; 0x2d64 <vfprintf+0x68a>
    2d78:	f7 01       	movw	r30, r14
    2d7a:	86 81       	ldd	r24, Z+6	; 0x06
    2d7c:	97 81       	ldd	r25, Z+7	; 0x07
    2d7e:	26 c0       	rjmp	.+76     	; 0x2dcc <vfprintf+0x6f2>
    2d80:	8f ef       	ldi	r24, 0xFF	; 255
    2d82:	9f ef       	ldi	r25, 0xFF	; 255
    2d84:	23 c0       	rjmp	.+70     	; 0x2dcc <vfprintf+0x6f2>
    2d86:	b7 01       	movw	r22, r14
    2d88:	80 e2       	ldi	r24, 0x20	; 32
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2d90:	5a 94       	dec	r5
    2d92:	51 10       	cpse	r5, r1
    2d94:	f8 cf       	rjmp	.-16     	; 0x2d86 <vfprintf+0x6ac>
    2d96:	d8 cf       	rjmp	.-80     	; 0x2d48 <vfprintf+0x66e>
    2d98:	51 2c       	mov	r5, r1
    2d9a:	b7 01       	movw	r22, r14
    2d9c:	80 2f       	mov	r24, r16
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2da4:	d3 cf       	rjmp	.-90     	; 0x2d4c <vfprintf+0x672>
    2da6:	00 e8       	ldi	r16, 0x80	; 128
    2da8:	10 e0       	ldi	r17, 0x00	; 0
    2daa:	d5 cf       	rjmp	.-86     	; 0x2d56 <vfprintf+0x67c>
    2dac:	91 10       	cpse	r9, r1
    2dae:	80 52       	subi	r24, 0x20	; 32
    2db0:	b7 01       	movw	r22, r14
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	0e 94 3c 18 	call	0x3078	; 0x3078 <fputc>
    2db8:	0f 5f       	subi	r16, 0xFF	; 255
    2dba:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbc:	cf cf       	rjmp	.-98     	; 0x2d5c <vfprintf+0x682>
    2dbe:	23 e0       	ldi	r18, 0x03	; 3
    2dc0:	25 15       	cp	r18, r5
    2dc2:	10 f4       	brcc	.+4      	; 0x2dc8 <vfprintf+0x6ee>
    2dc4:	83 e0       	ldi	r24, 0x03	; 3
    2dc6:	bd cf       	rjmp	.-134    	; 0x2d42 <vfprintf+0x668>
    2dc8:	51 2c       	mov	r5, r1
    2dca:	c0 cf       	rjmp	.-128    	; 0x2d4c <vfprintf+0x672>
    2dcc:	60 96       	adiw	r28, 0x10	; 16
    2dce:	e2 e1       	ldi	r30, 0x12	; 18
    2dd0:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__>

00002dd4 <__udivmodsi4>:
    2dd4:	a1 e2       	ldi	r26, 0x21	; 33
    2dd6:	1a 2e       	mov	r1, r26
    2dd8:	aa 1b       	sub	r26, r26
    2dda:	bb 1b       	sub	r27, r27
    2ddc:	fd 01       	movw	r30, r26
    2dde:	0d c0       	rjmp	.+26     	; 0x2dfa <__udivmodsi4_ep>

00002de0 <__udivmodsi4_loop>:
    2de0:	aa 1f       	adc	r26, r26
    2de2:	bb 1f       	adc	r27, r27
    2de4:	ee 1f       	adc	r30, r30
    2de6:	ff 1f       	adc	r31, r31
    2de8:	a2 17       	cp	r26, r18
    2dea:	b3 07       	cpc	r27, r19
    2dec:	e4 07       	cpc	r30, r20
    2dee:	f5 07       	cpc	r31, r21
    2df0:	20 f0       	brcs	.+8      	; 0x2dfa <__udivmodsi4_ep>
    2df2:	a2 1b       	sub	r26, r18
    2df4:	b3 0b       	sbc	r27, r19
    2df6:	e4 0b       	sbc	r30, r20
    2df8:	f5 0b       	sbc	r31, r21

00002dfa <__udivmodsi4_ep>:
    2dfa:	66 1f       	adc	r22, r22
    2dfc:	77 1f       	adc	r23, r23
    2dfe:	88 1f       	adc	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	1a 94       	dec	r1
    2e04:	69 f7       	brne	.-38     	; 0x2de0 <__udivmodsi4_loop>
    2e06:	60 95       	com	r22
    2e08:	70 95       	com	r23
    2e0a:	80 95       	com	r24
    2e0c:	90 95       	com	r25
    2e0e:	9b 01       	movw	r18, r22
    2e10:	ac 01       	movw	r20, r24
    2e12:	bd 01       	movw	r22, r26
    2e14:	cf 01       	movw	r24, r30
    2e16:	08 95       	ret

00002e18 <__prologue_saves__>:
    2e18:	2f 92       	push	r2
    2e1a:	3f 92       	push	r3
    2e1c:	4f 92       	push	r4
    2e1e:	5f 92       	push	r5
    2e20:	6f 92       	push	r6
    2e22:	7f 92       	push	r7
    2e24:	8f 92       	push	r8
    2e26:	9f 92       	push	r9
    2e28:	af 92       	push	r10
    2e2a:	bf 92       	push	r11
    2e2c:	cf 92       	push	r12
    2e2e:	df 92       	push	r13
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	ca 1b       	sub	r28, r26
    2e42:	db 0b       	sbc	r29, r27
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	09 94       	ijmp

00002e4a <__epilogue_restores__>:
    2e4a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e4c:	39 88       	ldd	r3, Y+17	; 0x11
    2e4e:	48 88       	ldd	r4, Y+16	; 0x10
    2e50:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e52:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e54:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e56:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e58:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e5c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e5e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e60:	df 80       	ldd	r13, Y+7	; 0x07
    2e62:	ee 80       	ldd	r14, Y+6	; 0x06
    2e64:	fd 80       	ldd	r15, Y+5	; 0x05
    2e66:	0c 81       	ldd	r16, Y+4	; 0x04
    2e68:	1b 81       	ldd	r17, Y+3	; 0x03
    2e6a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e6c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e6e:	ce 0f       	add	r28, r30
    2e70:	d1 1d       	adc	r29, r1
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	ed 01       	movw	r28, r26
    2e78:	08 95       	ret

00002e7a <atof>:
    2e7a:	66 27       	eor	r22, r22
    2e7c:	77 27       	eor	r23, r23
    2e7e:	0c 94 06 19 	jmp	0x320c	; 0x320c <strtod>

00002e82 <__ftoa_engine>:
    2e82:	28 30       	cpi	r18, 0x08	; 8
    2e84:	08 f0       	brcs	.+2      	; 0x2e88 <__ftoa_engine+0x6>
    2e86:	27 e0       	ldi	r18, 0x07	; 7
    2e88:	33 27       	eor	r19, r19
    2e8a:	da 01       	movw	r26, r20
    2e8c:	99 0f       	add	r25, r25
    2e8e:	31 1d       	adc	r19, r1
    2e90:	87 fd       	sbrc	r24, 7
    2e92:	91 60       	ori	r25, 0x01	; 1
    2e94:	00 96       	adiw	r24, 0x00	; 0
    2e96:	61 05       	cpc	r22, r1
    2e98:	71 05       	cpc	r23, r1
    2e9a:	39 f4       	brne	.+14     	; 0x2eaa <__ftoa_engine+0x28>
    2e9c:	32 60       	ori	r19, 0x02	; 2
    2e9e:	2e 5f       	subi	r18, 0xFE	; 254
    2ea0:	3d 93       	st	X+, r19
    2ea2:	30 e3       	ldi	r19, 0x30	; 48
    2ea4:	2a 95       	dec	r18
    2ea6:	e1 f7       	brne	.-8      	; 0x2ea0 <__ftoa_engine+0x1e>
    2ea8:	08 95       	ret
    2eaa:	9f 3f       	cpi	r25, 0xFF	; 255
    2eac:	30 f0       	brcs	.+12     	; 0x2eba <__ftoa_engine+0x38>
    2eae:	80 38       	cpi	r24, 0x80	; 128
    2eb0:	71 05       	cpc	r23, r1
    2eb2:	61 05       	cpc	r22, r1
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <__ftoa_engine+0x36>
    2eb6:	3c 5f       	subi	r19, 0xFC	; 252
    2eb8:	3c 5f       	subi	r19, 0xFC	; 252
    2eba:	3d 93       	st	X+, r19
    2ebc:	91 30       	cpi	r25, 0x01	; 1
    2ebe:	08 f0       	brcs	.+2      	; 0x2ec2 <__ftoa_engine+0x40>
    2ec0:	80 68       	ori	r24, 0x80	; 128
    2ec2:	91 1d       	adc	r25, r1
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	1f 93       	push	r17
    2eca:	0f 93       	push	r16
    2ecc:	ff 92       	push	r15
    2ece:	ef 92       	push	r14
    2ed0:	19 2f       	mov	r17, r25
    2ed2:	98 7f       	andi	r25, 0xF8	; 248
    2ed4:	96 95       	lsr	r25
    2ed6:	e9 2f       	mov	r30, r25
    2ed8:	96 95       	lsr	r25
    2eda:	96 95       	lsr	r25
    2edc:	e9 0f       	add	r30, r25
    2ede:	ff 27       	eor	r31, r31
    2ee0:	e2 52       	subi	r30, 0x22	; 34
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	99 27       	eor	r25, r25
    2ee6:	33 27       	eor	r19, r19
    2ee8:	ee 24       	eor	r14, r14
    2eea:	ff 24       	eor	r15, r15
    2eec:	a7 01       	movw	r20, r14
    2eee:	e7 01       	movw	r28, r14
    2ef0:	05 90       	lpm	r0, Z+
    2ef2:	08 94       	sec
    2ef4:	07 94       	ror	r0
    2ef6:	28 f4       	brcc	.+10     	; 0x2f02 <__ftoa_engine+0x80>
    2ef8:	36 0f       	add	r19, r22
    2efa:	e7 1e       	adc	r14, r23
    2efc:	f8 1e       	adc	r15, r24
    2efe:	49 1f       	adc	r20, r25
    2f00:	51 1d       	adc	r21, r1
    2f02:	66 0f       	add	r22, r22
    2f04:	77 1f       	adc	r23, r23
    2f06:	88 1f       	adc	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	06 94       	lsr	r0
    2f0c:	a1 f7       	brne	.-24     	; 0x2ef6 <__ftoa_engine+0x74>
    2f0e:	05 90       	lpm	r0, Z+
    2f10:	07 94       	ror	r0
    2f12:	28 f4       	brcc	.+10     	; 0x2f1e <__ftoa_engine+0x9c>
    2f14:	e7 0e       	add	r14, r23
    2f16:	f8 1e       	adc	r15, r24
    2f18:	49 1f       	adc	r20, r25
    2f1a:	56 1f       	adc	r21, r22
    2f1c:	c1 1d       	adc	r28, r1
    2f1e:	77 0f       	add	r23, r23
    2f20:	88 1f       	adc	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	66 1f       	adc	r22, r22
    2f26:	06 94       	lsr	r0
    2f28:	a1 f7       	brne	.-24     	; 0x2f12 <__ftoa_engine+0x90>
    2f2a:	05 90       	lpm	r0, Z+
    2f2c:	07 94       	ror	r0
    2f2e:	28 f4       	brcc	.+10     	; 0x2f3a <__ftoa_engine+0xb8>
    2f30:	f8 0e       	add	r15, r24
    2f32:	49 1f       	adc	r20, r25
    2f34:	56 1f       	adc	r21, r22
    2f36:	c7 1f       	adc	r28, r23
    2f38:	d1 1d       	adc	r29, r1
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	66 1f       	adc	r22, r22
    2f40:	77 1f       	adc	r23, r23
    2f42:	06 94       	lsr	r0
    2f44:	a1 f7       	brne	.-24     	; 0x2f2e <__ftoa_engine+0xac>
    2f46:	05 90       	lpm	r0, Z+
    2f48:	07 94       	ror	r0
    2f4a:	20 f4       	brcc	.+8      	; 0x2f54 <__ftoa_engine+0xd2>
    2f4c:	49 0f       	add	r20, r25
    2f4e:	56 1f       	adc	r21, r22
    2f50:	c7 1f       	adc	r28, r23
    2f52:	d8 1f       	adc	r29, r24
    2f54:	99 0f       	add	r25, r25
    2f56:	66 1f       	adc	r22, r22
    2f58:	77 1f       	adc	r23, r23
    2f5a:	88 1f       	adc	r24, r24
    2f5c:	06 94       	lsr	r0
    2f5e:	a9 f7       	brne	.-22     	; 0x2f4a <__ftoa_engine+0xc8>
    2f60:	84 91       	lpm	r24, Z
    2f62:	10 95       	com	r17
    2f64:	17 70       	andi	r17, 0x07	; 7
    2f66:	41 f0       	breq	.+16     	; 0x2f78 <__ftoa_engine+0xf6>
    2f68:	d6 95       	lsr	r29
    2f6a:	c7 95       	ror	r28
    2f6c:	57 95       	ror	r21
    2f6e:	47 95       	ror	r20
    2f70:	f7 94       	ror	r15
    2f72:	e7 94       	ror	r14
    2f74:	1a 95       	dec	r17
    2f76:	c1 f7       	brne	.-16     	; 0x2f68 <__ftoa_engine+0xe6>
    2f78:	e4 e8       	ldi	r30, 0x84	; 132
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	68 94       	set
    2f7e:	15 90       	lpm	r1, Z+
    2f80:	15 91       	lpm	r17, Z+
    2f82:	35 91       	lpm	r19, Z+
    2f84:	65 91       	lpm	r22, Z+
    2f86:	95 91       	lpm	r25, Z+
    2f88:	05 90       	lpm	r0, Z+
    2f8a:	7f e2       	ldi	r23, 0x2F	; 47
    2f8c:	73 95       	inc	r23
    2f8e:	e1 18       	sub	r14, r1
    2f90:	f1 0a       	sbc	r15, r17
    2f92:	43 0b       	sbc	r20, r19
    2f94:	56 0b       	sbc	r21, r22
    2f96:	c9 0b       	sbc	r28, r25
    2f98:	d0 09       	sbc	r29, r0
    2f9a:	c0 f7       	brcc	.-16     	; 0x2f8c <__ftoa_engine+0x10a>
    2f9c:	e1 0c       	add	r14, r1
    2f9e:	f1 1e       	adc	r15, r17
    2fa0:	43 1f       	adc	r20, r19
    2fa2:	56 1f       	adc	r21, r22
    2fa4:	c9 1f       	adc	r28, r25
    2fa6:	d0 1d       	adc	r29, r0
    2fa8:	7e f4       	brtc	.+30     	; 0x2fc8 <__ftoa_engine+0x146>
    2faa:	70 33       	cpi	r23, 0x30	; 48
    2fac:	11 f4       	brne	.+4      	; 0x2fb2 <__ftoa_engine+0x130>
    2fae:	8a 95       	dec	r24
    2fb0:	e6 cf       	rjmp	.-52     	; 0x2f7e <__ftoa_engine+0xfc>
    2fb2:	e8 94       	clt
    2fb4:	01 50       	subi	r16, 0x01	; 1
    2fb6:	30 f0       	brcs	.+12     	; 0x2fc4 <__ftoa_engine+0x142>
    2fb8:	08 0f       	add	r16, r24
    2fba:	0a f4       	brpl	.+2      	; 0x2fbe <__ftoa_engine+0x13c>
    2fbc:	00 27       	eor	r16, r16
    2fbe:	02 17       	cp	r16, r18
    2fc0:	08 f4       	brcc	.+2      	; 0x2fc4 <__ftoa_engine+0x142>
    2fc2:	20 2f       	mov	r18, r16
    2fc4:	23 95       	inc	r18
    2fc6:	02 2f       	mov	r16, r18
    2fc8:	7a 33       	cpi	r23, 0x3A	; 58
    2fca:	28 f0       	brcs	.+10     	; 0x2fd6 <__ftoa_engine+0x154>
    2fcc:	79 e3       	ldi	r23, 0x39	; 57
    2fce:	7d 93       	st	X+, r23
    2fd0:	2a 95       	dec	r18
    2fd2:	e9 f7       	brne	.-6      	; 0x2fce <__ftoa_engine+0x14c>
    2fd4:	10 c0       	rjmp	.+32     	; 0x2ff6 <__ftoa_engine+0x174>
    2fd6:	7d 93       	st	X+, r23
    2fd8:	2a 95       	dec	r18
    2fda:	89 f6       	brne	.-94     	; 0x2f7e <__ftoa_engine+0xfc>
    2fdc:	06 94       	lsr	r0
    2fde:	97 95       	ror	r25
    2fe0:	67 95       	ror	r22
    2fe2:	37 95       	ror	r19
    2fe4:	17 95       	ror	r17
    2fe6:	17 94       	ror	r1
    2fe8:	e1 18       	sub	r14, r1
    2fea:	f1 0a       	sbc	r15, r17
    2fec:	43 0b       	sbc	r20, r19
    2fee:	56 0b       	sbc	r21, r22
    2ff0:	c9 0b       	sbc	r28, r25
    2ff2:	d0 09       	sbc	r29, r0
    2ff4:	98 f0       	brcs	.+38     	; 0x301c <__ftoa_engine+0x19a>
    2ff6:	23 95       	inc	r18
    2ff8:	7e 91       	ld	r23, -X
    2ffa:	73 95       	inc	r23
    2ffc:	7a 33       	cpi	r23, 0x3A	; 58
    2ffe:	08 f0       	brcs	.+2      	; 0x3002 <__ftoa_engine+0x180>
    3000:	70 e3       	ldi	r23, 0x30	; 48
    3002:	7c 93       	st	X, r23
    3004:	20 13       	cpse	r18, r16
    3006:	b8 f7       	brcc	.-18     	; 0x2ff6 <__ftoa_engine+0x174>
    3008:	7e 91       	ld	r23, -X
    300a:	70 61       	ori	r23, 0x10	; 16
    300c:	7d 93       	st	X+, r23
    300e:	30 f0       	brcs	.+12     	; 0x301c <__ftoa_engine+0x19a>
    3010:	83 95       	inc	r24
    3012:	71 e3       	ldi	r23, 0x31	; 49
    3014:	7d 93       	st	X+, r23
    3016:	70 e3       	ldi	r23, 0x30	; 48
    3018:	2a 95       	dec	r18
    301a:	e1 f7       	brne	.-8      	; 0x3014 <__ftoa_engine+0x192>
    301c:	11 24       	eor	r1, r1
    301e:	ef 90       	pop	r14
    3020:	ff 90       	pop	r15
    3022:	0f 91       	pop	r16
    3024:	1f 91       	pop	r17
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	99 27       	eor	r25, r25
    302c:	87 fd       	sbrc	r24, 7
    302e:	90 95       	com	r25
    3030:	08 95       	ret

00003032 <strnlen_P>:
    3032:	fc 01       	movw	r30, r24
    3034:	05 90       	lpm	r0, Z+
    3036:	61 50       	subi	r22, 0x01	; 1
    3038:	70 40       	sbci	r23, 0x00	; 0
    303a:	01 10       	cpse	r0, r1
    303c:	d8 f7       	brcc	.-10     	; 0x3034 <strnlen_P+0x2>
    303e:	80 95       	com	r24
    3040:	90 95       	com	r25
    3042:	8e 0f       	add	r24, r30
    3044:	9f 1f       	adc	r25, r31
    3046:	08 95       	ret

00003048 <memcmp>:
    3048:	fb 01       	movw	r30, r22
    304a:	dc 01       	movw	r26, r24
    304c:	04 c0       	rjmp	.+8      	; 0x3056 <memcmp+0xe>
    304e:	8d 91       	ld	r24, X+
    3050:	01 90       	ld	r0, Z+
    3052:	80 19       	sub	r24, r0
    3054:	21 f4       	brne	.+8      	; 0x305e <memcmp+0x16>
    3056:	41 50       	subi	r20, 0x01	; 1
    3058:	50 40       	sbci	r21, 0x00	; 0
    305a:	c8 f7       	brcc	.-14     	; 0x304e <memcmp+0x6>
    305c:	88 1b       	sub	r24, r24
    305e:	99 0b       	sbc	r25, r25
    3060:	08 95       	ret

00003062 <strnlen>:
    3062:	fc 01       	movw	r30, r24
    3064:	61 50       	subi	r22, 0x01	; 1
    3066:	70 40       	sbci	r23, 0x00	; 0
    3068:	01 90       	ld	r0, Z+
    306a:	01 10       	cpse	r0, r1
    306c:	d8 f7       	brcc	.-10     	; 0x3064 <strnlen+0x2>
    306e:	80 95       	com	r24
    3070:	90 95       	com	r25
    3072:	8e 0f       	add	r24, r30
    3074:	9f 1f       	adc	r25, r31
    3076:	08 95       	ret

00003078 <fputc>:
    3078:	0f 93       	push	r16
    307a:	1f 93       	push	r17
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	fb 01       	movw	r30, r22
    3082:	23 81       	ldd	r18, Z+3	; 0x03
    3084:	21 fd       	sbrc	r18, 1
    3086:	03 c0       	rjmp	.+6      	; 0x308e <fputc+0x16>
    3088:	8f ef       	ldi	r24, 0xFF	; 255
    308a:	9f ef       	ldi	r25, 0xFF	; 255
    308c:	2c c0       	rjmp	.+88     	; 0x30e6 <fputc+0x6e>
    308e:	22 ff       	sbrs	r18, 2
    3090:	16 c0       	rjmp	.+44     	; 0x30be <fputc+0x46>
    3092:	46 81       	ldd	r20, Z+6	; 0x06
    3094:	57 81       	ldd	r21, Z+7	; 0x07
    3096:	24 81       	ldd	r18, Z+4	; 0x04
    3098:	35 81       	ldd	r19, Z+5	; 0x05
    309a:	42 17       	cp	r20, r18
    309c:	53 07       	cpc	r21, r19
    309e:	44 f4       	brge	.+16     	; 0x30b0 <fputc+0x38>
    30a0:	a0 81       	ld	r26, Z
    30a2:	b1 81       	ldd	r27, Z+1	; 0x01
    30a4:	9d 01       	movw	r18, r26
    30a6:	2f 5f       	subi	r18, 0xFF	; 255
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
    30aa:	20 83       	st	Z, r18
    30ac:	31 83       	std	Z+1, r19	; 0x01
    30ae:	8c 93       	st	X, r24
    30b0:	26 81       	ldd	r18, Z+6	; 0x06
    30b2:	37 81       	ldd	r19, Z+7	; 0x07
    30b4:	2f 5f       	subi	r18, 0xFF	; 255
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	26 83       	std	Z+6, r18	; 0x06
    30ba:	37 83       	std	Z+7, r19	; 0x07
    30bc:	14 c0       	rjmp	.+40     	; 0x30e6 <fputc+0x6e>
    30be:	8b 01       	movw	r16, r22
    30c0:	ec 01       	movw	r28, r24
    30c2:	fb 01       	movw	r30, r22
    30c4:	00 84       	ldd	r0, Z+8	; 0x08
    30c6:	f1 85       	ldd	r31, Z+9	; 0x09
    30c8:	e0 2d       	mov	r30, r0
    30ca:	09 95       	icall
    30cc:	89 2b       	or	r24, r25
    30ce:	e1 f6       	brne	.-72     	; 0x3088 <fputc+0x10>
    30d0:	d8 01       	movw	r26, r16
    30d2:	16 96       	adiw	r26, 0x06	; 6
    30d4:	8d 91       	ld	r24, X+
    30d6:	9c 91       	ld	r25, X
    30d8:	17 97       	sbiw	r26, 0x07	; 7
    30da:	01 96       	adiw	r24, 0x01	; 1
    30dc:	16 96       	adiw	r26, 0x06	; 6
    30de:	8d 93       	st	X+, r24
    30e0:	9c 93       	st	X, r25
    30e2:	17 97       	sbiw	r26, 0x07	; 7
    30e4:	ce 01       	movw	r24, r28
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	08 95       	ret

000030f0 <snprintf>:
    30f0:	ae e0       	ldi	r26, 0x0E	; 14
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ee e7       	ldi	r30, 0x7E	; 126
    30f6:	f8 e1       	ldi	r31, 0x18	; 24
    30f8:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x1c>
    30fc:	0d 89       	ldd	r16, Y+21	; 0x15
    30fe:	1e 89       	ldd	r17, Y+22	; 0x16
    3100:	8f 89       	ldd	r24, Y+23	; 0x17
    3102:	98 8d       	ldd	r25, Y+24	; 0x18
    3104:	26 e0       	ldi	r18, 0x06	; 6
    3106:	2c 83       	std	Y+4, r18	; 0x04
    3108:	09 83       	std	Y+1, r16	; 0x01
    310a:	1a 83       	std	Y+2, r17	; 0x02
    310c:	97 ff       	sbrs	r25, 7
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <snprintf+0x24>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e8       	ldi	r25, 0x80	; 128
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	8d 83       	std	Y+5, r24	; 0x05
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	ae 01       	movw	r20, r28
    311c:	45 5e       	subi	r20, 0xE5	; 229
    311e:	5f 4f       	sbci	r21, 0xFF	; 255
    3120:	69 8d       	ldd	r22, Y+25	; 0x19
    3122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3124:	ce 01       	movw	r24, r28
    3126:	01 96       	adiw	r24, 0x01	; 1
    3128:	0e 94 6d 13 	call	0x26da	; 0x26da <vfprintf>
    312c:	4d 81       	ldd	r20, Y+5	; 0x05
    312e:	5e 81       	ldd	r21, Y+6	; 0x06
    3130:	57 fd       	sbrc	r21, 7
    3132:	0a c0       	rjmp	.+20     	; 0x3148 <snprintf+0x58>
    3134:	2f 81       	ldd	r18, Y+7	; 0x07
    3136:	38 85       	ldd	r19, Y+8	; 0x08
    3138:	42 17       	cp	r20, r18
    313a:	53 07       	cpc	r21, r19
    313c:	0c f4       	brge	.+2      	; 0x3140 <snprintf+0x50>
    313e:	9a 01       	movw	r18, r20
    3140:	f8 01       	movw	r30, r16
    3142:	e2 0f       	add	r30, r18
    3144:	f3 1f       	adc	r31, r19
    3146:	10 82       	st	Z, r1
    3148:	2e 96       	adiw	r28, 0x0e	; 14
    314a:	e4 e0       	ldi	r30, 0x04	; 4
    314c:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x1c>

00003150 <__ultoa_invert>:
    3150:	fa 01       	movw	r30, r20
    3152:	aa 27       	eor	r26, r26
    3154:	28 30       	cpi	r18, 0x08	; 8
    3156:	51 f1       	breq	.+84     	; 0x31ac <__ultoa_invert+0x5c>
    3158:	20 31       	cpi	r18, 0x10	; 16
    315a:	81 f1       	breq	.+96     	; 0x31bc <__ultoa_invert+0x6c>
    315c:	e8 94       	clt
    315e:	6f 93       	push	r22
    3160:	6e 7f       	andi	r22, 0xFE	; 254
    3162:	6e 5f       	subi	r22, 0xFE	; 254
    3164:	7f 4f       	sbci	r23, 0xFF	; 255
    3166:	8f 4f       	sbci	r24, 0xFF	; 255
    3168:	9f 4f       	sbci	r25, 0xFF	; 255
    316a:	af 4f       	sbci	r26, 0xFF	; 255
    316c:	b1 e0       	ldi	r27, 0x01	; 1
    316e:	3e d0       	rcall	.+124    	; 0x31ec <__ultoa_invert+0x9c>
    3170:	b4 e0       	ldi	r27, 0x04	; 4
    3172:	3c d0       	rcall	.+120    	; 0x31ec <__ultoa_invert+0x9c>
    3174:	67 0f       	add	r22, r23
    3176:	78 1f       	adc	r23, r24
    3178:	89 1f       	adc	r24, r25
    317a:	9a 1f       	adc	r25, r26
    317c:	a1 1d       	adc	r26, r1
    317e:	68 0f       	add	r22, r24
    3180:	79 1f       	adc	r23, r25
    3182:	8a 1f       	adc	r24, r26
    3184:	91 1d       	adc	r25, r1
    3186:	a1 1d       	adc	r26, r1
    3188:	6a 0f       	add	r22, r26
    318a:	71 1d       	adc	r23, r1
    318c:	81 1d       	adc	r24, r1
    318e:	91 1d       	adc	r25, r1
    3190:	a1 1d       	adc	r26, r1
    3192:	20 d0       	rcall	.+64     	; 0x31d4 <__ultoa_invert+0x84>
    3194:	09 f4       	brne	.+2      	; 0x3198 <__ultoa_invert+0x48>
    3196:	68 94       	set
    3198:	3f 91       	pop	r19
    319a:	2a e0       	ldi	r18, 0x0A	; 10
    319c:	26 9f       	mul	r18, r22
    319e:	11 24       	eor	r1, r1
    31a0:	30 19       	sub	r19, r0
    31a2:	30 5d       	subi	r19, 0xD0	; 208
    31a4:	31 93       	st	Z+, r19
    31a6:	de f6       	brtc	.-74     	; 0x315e <__ultoa_invert+0xe>
    31a8:	cf 01       	movw	r24, r30
    31aa:	08 95       	ret
    31ac:	46 2f       	mov	r20, r22
    31ae:	47 70       	andi	r20, 0x07	; 7
    31b0:	40 5d       	subi	r20, 0xD0	; 208
    31b2:	41 93       	st	Z+, r20
    31b4:	b3 e0       	ldi	r27, 0x03	; 3
    31b6:	0f d0       	rcall	.+30     	; 0x31d6 <__ultoa_invert+0x86>
    31b8:	c9 f7       	brne	.-14     	; 0x31ac <__ultoa_invert+0x5c>
    31ba:	f6 cf       	rjmp	.-20     	; 0x31a8 <__ultoa_invert+0x58>
    31bc:	46 2f       	mov	r20, r22
    31be:	4f 70       	andi	r20, 0x0F	; 15
    31c0:	40 5d       	subi	r20, 0xD0	; 208
    31c2:	4a 33       	cpi	r20, 0x3A	; 58
    31c4:	18 f0       	brcs	.+6      	; 0x31cc <__ultoa_invert+0x7c>
    31c6:	49 5d       	subi	r20, 0xD9	; 217
    31c8:	31 fd       	sbrc	r19, 1
    31ca:	40 52       	subi	r20, 0x20	; 32
    31cc:	41 93       	st	Z+, r20
    31ce:	02 d0       	rcall	.+4      	; 0x31d4 <__ultoa_invert+0x84>
    31d0:	a9 f7       	brne	.-22     	; 0x31bc <__ultoa_invert+0x6c>
    31d2:	ea cf       	rjmp	.-44     	; 0x31a8 <__ultoa_invert+0x58>
    31d4:	b4 e0       	ldi	r27, 0x04	; 4
    31d6:	a6 95       	lsr	r26
    31d8:	97 95       	ror	r25
    31da:	87 95       	ror	r24
    31dc:	77 95       	ror	r23
    31de:	67 95       	ror	r22
    31e0:	ba 95       	dec	r27
    31e2:	c9 f7       	brne	.-14     	; 0x31d6 <__ultoa_invert+0x86>
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	61 05       	cpc	r22, r1
    31e8:	71 05       	cpc	r23, r1
    31ea:	08 95       	ret
    31ec:	9b 01       	movw	r18, r22
    31ee:	ac 01       	movw	r20, r24
    31f0:	0a 2e       	mov	r0, r26
    31f2:	06 94       	lsr	r0
    31f4:	57 95       	ror	r21
    31f6:	47 95       	ror	r20
    31f8:	37 95       	ror	r19
    31fa:	27 95       	ror	r18
    31fc:	ba 95       	dec	r27
    31fe:	c9 f7       	brne	.-14     	; 0x31f2 <__ultoa_invert+0xa2>
    3200:	62 0f       	add	r22, r18
    3202:	73 1f       	adc	r23, r19
    3204:	84 1f       	adc	r24, r20
    3206:	95 1f       	adc	r25, r21
    3208:	a0 1d       	adc	r26, r0
    320a:	08 95       	ret

0000320c <strtod>:
    320c:	a0 e0       	ldi	r26, 0x00	; 0
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	ec e0       	ldi	r30, 0x0C	; 12
    3212:	f9 e1       	ldi	r31, 0x19	; 25
    3214:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__prologue_saves__+0xc>
    3218:	ec 01       	movw	r28, r24
    321a:	6b 01       	movw	r12, r22
    321c:	61 15       	cp	r22, r1
    321e:	71 05       	cpc	r23, r1
    3220:	19 f0       	breq	.+6      	; 0x3228 <strtod+0x1c>
    3222:	fb 01       	movw	r30, r22
    3224:	80 83       	st	Z, r24
    3226:	91 83       	std	Z+1, r25	; 0x01
    3228:	7e 01       	movw	r14, r28
    322a:	ff ef       	ldi	r31, 0xFF	; 255
    322c:	ef 1a       	sub	r14, r31
    322e:	ff 0a       	sbc	r15, r31
    3230:	08 81       	ld	r16, Y
    3232:	80 2f       	mov	r24, r16
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <isspace>
    323a:	89 2b       	or	r24, r25
    323c:	11 f0       	breq	.+4      	; 0x3242 <strtod+0x36>
    323e:	e7 01       	movw	r28, r14
    3240:	f3 cf       	rjmp	.-26     	; 0x3228 <strtod+0x1c>
    3242:	0d 32       	cpi	r16, 0x2D	; 45
    3244:	39 f4       	brne	.+14     	; 0x3254 <strtod+0x48>
    3246:	7e 01       	movw	r14, r28
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	e8 0e       	add	r14, r24
    324c:	f1 1c       	adc	r15, r1
    324e:	09 81       	ldd	r16, Y+1	; 0x01
    3250:	11 e0       	ldi	r17, 0x01	; 1
    3252:	08 c0       	rjmp	.+16     	; 0x3264 <strtod+0x58>
    3254:	0b 32       	cpi	r16, 0x2B	; 43
    3256:	29 f4       	brne	.+10     	; 0x3262 <strtod+0x56>
    3258:	7e 01       	movw	r14, r28
    325a:	92 e0       	ldi	r25, 0x02	; 2
    325c:	e9 0e       	add	r14, r25
    325e:	f1 1c       	adc	r15, r1
    3260:	09 81       	ldd	r16, Y+1	; 0x01
    3262:	10 e0       	ldi	r17, 0x00	; 0
    3264:	e7 01       	movw	r28, r14
    3266:	21 97       	sbiw	r28, 0x01	; 1
    3268:	43 e0       	ldi	r20, 0x03	; 3
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	66 e8       	ldi	r22, 0x86	; 134
    326e:	71 e0       	ldi	r23, 0x01	; 1
    3270:	ce 01       	movw	r24, r28
    3272:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <strncasecmp_P>
    3276:	89 2b       	or	r24, r25
    3278:	c1 f4       	brne	.+48     	; 0x32aa <strtod+0x9e>
    327a:	23 96       	adiw	r28, 0x03	; 3
    327c:	45 e0       	ldi	r20, 0x05	; 5
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	61 e8       	ldi	r22, 0x81	; 129
    3282:	71 e0       	ldi	r23, 0x01	; 1
    3284:	ce 01       	movw	r24, r28
    3286:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <strncasecmp_P>
    328a:	89 2b       	or	r24, r25
    328c:	09 f4       	brne	.+2      	; 0x3290 <strtod+0x84>
    328e:	25 96       	adiw	r28, 0x05	; 5
    3290:	c1 14       	cp	r12, r1
    3292:	d1 04       	cpc	r13, r1
    3294:	19 f0       	breq	.+6      	; 0x329c <strtod+0x90>
    3296:	f6 01       	movw	r30, r12
    3298:	c0 83       	st	Z, r28
    329a:	d1 83       	std	Z+1, r29	; 0x01
    329c:	11 11       	cpse	r17, r1
    329e:	f6 c0       	rjmp	.+492    	; 0x348c <strtod+0x280>
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	80 e8       	ldi	r24, 0x80	; 128
    32a6:	9f e7       	ldi	r25, 0x7F	; 127
    32a8:	fa c0       	rjmp	.+500    	; 0x349e <strtod+0x292>
    32aa:	43 e0       	ldi	r20, 0x03	; 3
    32ac:	50 e0       	ldi	r21, 0x00	; 0
    32ae:	6e e7       	ldi	r22, 0x7E	; 126
    32b0:	71 e0       	ldi	r23, 0x01	; 1
    32b2:	ce 01       	movw	r24, r28
    32b4:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <strncasecmp_P>
    32b8:	89 2b       	or	r24, r25
    32ba:	59 f4       	brne	.+22     	; 0x32d2 <strtod+0xc6>
    32bc:	c1 14       	cp	r12, r1
    32be:	d1 04       	cpc	r13, r1
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <strtod+0xb8>
    32c2:	e9 c0       	rjmp	.+466    	; 0x3496 <strtod+0x28a>
    32c4:	f2 e0       	ldi	r31, 0x02	; 2
    32c6:	ef 0e       	add	r14, r31
    32c8:	f1 1c       	adc	r15, r1
    32ca:	f6 01       	movw	r30, r12
    32cc:	e0 82       	st	Z, r14
    32ce:	f1 82       	std	Z+1, r15	; 0x01
    32d0:	e2 c0       	rjmp	.+452    	; 0x3496 <strtod+0x28a>
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	a9 01       	movw	r20, r18
    32d8:	c0 e0       	ldi	r28, 0x00	; 0
    32da:	d0 e0       	ldi	r29, 0x00	; 0
    32dc:	f7 01       	movw	r30, r14
    32de:	80 ed       	ldi	r24, 0xD0	; 208
    32e0:	a8 2e       	mov	r10, r24
    32e2:	a0 0e       	add	r10, r16
    32e4:	89 e0       	ldi	r24, 0x09	; 9
    32e6:	8a 15       	cp	r24, r10
    32e8:	30 f1       	brcs	.+76     	; 0x3336 <strtod+0x12a>
    32ea:	91 2f       	mov	r25, r17
    32ec:	92 60       	ori	r25, 0x02	; 2
    32ee:	b9 2e       	mov	r11, r25
    32f0:	81 2f       	mov	r24, r17
    32f2:	88 70       	andi	r24, 0x08	; 8
    32f4:	12 ff       	sbrs	r17, 2
    32f6:	04 c0       	rjmp	.+8      	; 0x3300 <strtod+0xf4>
    32f8:	81 11       	cpse	r24, r1
    32fa:	24 c0       	rjmp	.+72     	; 0x3344 <strtod+0x138>
    32fc:	21 96       	adiw	r28, 0x01	; 1
    32fe:	22 c0       	rjmp	.+68     	; 0x3344 <strtod+0x138>
    3300:	81 11       	cpse	r24, r1
    3302:	21 97       	sbiw	r28, 0x01	; 1
    3304:	a5 e0       	ldi	r26, 0x05	; 5
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__muluhisi3>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	aa 1f       	adc	r26, r26
    3316:	bb 1f       	adc	r27, r27
    3318:	9c 01       	movw	r18, r24
    331a:	ad 01       	movw	r20, r26
    331c:	2a 0d       	add	r18, r10
    331e:	31 1d       	adc	r19, r1
    3320:	41 1d       	adc	r20, r1
    3322:	51 1d       	adc	r21, r1
    3324:	28 39       	cpi	r18, 0x98	; 152
    3326:	89 e9       	ldi	r24, 0x99	; 153
    3328:	38 07       	cpc	r19, r24
    332a:	48 07       	cpc	r20, r24
    332c:	89 e1       	ldi	r24, 0x19	; 25
    332e:	58 07       	cpc	r21, r24
    3330:	48 f0       	brcs	.+18     	; 0x3344 <strtod+0x138>
    3332:	16 60       	ori	r17, 0x06	; 6
    3334:	06 c0       	rjmp	.+12     	; 0x3342 <strtod+0x136>
    3336:	9e ef       	ldi	r25, 0xFE	; 254
    3338:	a9 12       	cpse	r10, r25
    333a:	0a c0       	rjmp	.+20     	; 0x3350 <strtod+0x144>
    333c:	13 fd       	sbrc	r17, 3
    333e:	40 c0       	rjmp	.+128    	; 0x33c0 <strtod+0x1b4>
    3340:	18 60       	ori	r17, 0x08	; 8
    3342:	b1 2e       	mov	r11, r17
    3344:	8f ef       	ldi	r24, 0xFF	; 255
    3346:	e8 1a       	sub	r14, r24
    3348:	f8 0a       	sbc	r15, r24
    334a:	00 81       	ld	r16, Z
    334c:	1b 2d       	mov	r17, r11
    334e:	c6 cf       	rjmp	.-116    	; 0x32dc <strtod+0xd0>
    3350:	80 2f       	mov	r24, r16
    3352:	8f 7d       	andi	r24, 0xDF	; 223
    3354:	85 34       	cpi	r24, 0x45	; 69
    3356:	a1 f5       	brne	.+104    	; 0x33c0 <strtod+0x1b4>
    3358:	80 81       	ld	r24, Z
    335a:	8d 32       	cpi	r24, 0x2D	; 45
    335c:	11 f4       	brne	.+4      	; 0x3362 <strtod+0x156>
    335e:	10 61       	ori	r17, 0x10	; 16
    3360:	06 c0       	rjmp	.+12     	; 0x336e <strtod+0x162>
    3362:	8b 32       	cpi	r24, 0x2B	; 43
    3364:	21 f0       	breq	.+8      	; 0x336e <strtod+0x162>
    3366:	31 96       	adiw	r30, 0x01	; 1
    3368:	61 e0       	ldi	r22, 0x01	; 1
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	04 c0       	rjmp	.+8      	; 0x3376 <strtod+0x16a>
    336e:	81 81       	ldd	r24, Z+1	; 0x01
    3370:	32 96       	adiw	r30, 0x02	; 2
    3372:	62 e0       	ldi	r22, 0x02	; 2
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	80 53       	subi	r24, 0x30	; 48
    3378:	8a 30       	cpi	r24, 0x0A	; 10
    337a:	18 f0       	brcs	.+6      	; 0x3382 <strtod+0x176>
    337c:	e6 1b       	sub	r30, r22
    337e:	f7 0b       	sbc	r31, r23
    3380:	1f c0       	rjmp	.+62     	; 0x33c0 <strtod+0x1b4>
    3382:	60 e0       	ldi	r22, 0x00	; 0
    3384:	70 e0       	ldi	r23, 0x00	; 0
    3386:	60 38       	cpi	r22, 0x80	; 128
    3388:	9c e0       	ldi	r25, 0x0C	; 12
    338a:	79 07       	cpc	r23, r25
    338c:	5c f4       	brge	.+22     	; 0x33a4 <strtod+0x198>
    338e:	db 01       	movw	r26, r22
    3390:	aa 0f       	add	r26, r26
    3392:	bb 1f       	adc	r27, r27
    3394:	aa 0f       	add	r26, r26
    3396:	bb 1f       	adc	r27, r27
    3398:	6a 0f       	add	r22, r26
    339a:	7b 1f       	adc	r23, r27
    339c:	66 0f       	add	r22, r22
    339e:	77 1f       	adc	r23, r23
    33a0:	68 0f       	add	r22, r24
    33a2:	71 1d       	adc	r23, r1
    33a4:	31 96       	adiw	r30, 0x01	; 1
    33a6:	df 01       	movw	r26, r30
    33a8:	11 97       	sbiw	r26, 0x01	; 1
    33aa:	8c 91       	ld	r24, X
    33ac:	80 53       	subi	r24, 0x30	; 48
    33ae:	8a 30       	cpi	r24, 0x0A	; 10
    33b0:	50 f3       	brcs	.-44     	; 0x3386 <strtod+0x17a>
    33b2:	14 ff       	sbrs	r17, 4
    33b4:	03 c0       	rjmp	.+6      	; 0x33bc <strtod+0x1b0>
    33b6:	71 95       	neg	r23
    33b8:	61 95       	neg	r22
    33ba:	71 09       	sbc	r23, r1
    33bc:	c6 0f       	add	r28, r22
    33be:	d7 1f       	adc	r29, r23
    33c0:	11 ff       	sbrs	r17, 1
    33c2:	08 c0       	rjmp	.+16     	; 0x33d4 <strtod+0x1c8>
    33c4:	c1 14       	cp	r12, r1
    33c6:	d1 04       	cpc	r13, r1
    33c8:	29 f0       	breq	.+10     	; 0x33d4 <strtod+0x1c8>
    33ca:	cf 01       	movw	r24, r30
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f6 01       	movw	r30, r12
    33d0:	80 83       	st	Z, r24
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	ca 01       	movw	r24, r20
    33d6:	b9 01       	movw	r22, r18
    33d8:	0e 94 4e 12 	call	0x249c	; 0x249c <__floatunsisf>
    33dc:	21 2f       	mov	r18, r17
    33de:	23 70       	andi	r18, 0x03	; 3
    33e0:	23 30       	cpi	r18, 0x03	; 3
    33e2:	19 f0       	breq	.+6      	; 0x33ea <strtod+0x1de>
    33e4:	4b 01       	movw	r8, r22
    33e6:	5c 01       	movw	r10, r24
    33e8:	06 c0       	rjmp	.+12     	; 0x33f6 <strtod+0x1ea>
    33ea:	4b 01       	movw	r8, r22
    33ec:	5c 01       	movw	r10, r24
    33ee:	b7 fa       	bst	r11, 7
    33f0:	b0 94       	com	r11
    33f2:	b7 f8       	bld	r11, 7
    33f4:	b0 94       	com	r11
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	a9 01       	movw	r20, r18
    33fc:	c5 01       	movw	r24, r10
    33fe:	b4 01       	movw	r22, r8
    3400:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__cmpsf2>
    3404:	88 23       	and	r24, r24
    3406:	09 f4       	brne	.+2      	; 0x340a <strtod+0x1fe>
    3408:	3e c0       	rjmp	.+124    	; 0x3486 <strtod+0x27a>
    340a:	d7 ff       	sbrs	r29, 7
    340c:	06 c0       	rjmp	.+12     	; 0x341a <strtod+0x20e>
    340e:	d1 95       	neg	r29
    3410:	c1 95       	neg	r28
    3412:	d1 09       	sbc	r29, r1
    3414:	0d e9       	ldi	r16, 0x9D	; 157
    3416:	11 e0       	ldi	r17, 0x01	; 1
    3418:	02 c0       	rjmp	.+4      	; 0x341e <strtod+0x212>
    341a:	05 eb       	ldi	r16, 0xB5	; 181
    341c:	11 e0       	ldi	r17, 0x01	; 1
    341e:	68 01       	movw	r12, r16
    3420:	f8 e1       	ldi	r31, 0x18	; 24
    3422:	cf 1a       	sub	r12, r31
    3424:	d1 08       	sbc	r13, r1
    3426:	90 e2       	ldi	r25, 0x20	; 32
    3428:	e9 2e       	mov	r14, r25
    342a:	f1 2c       	mov	r15, r1
    342c:	ce 15       	cp	r28, r14
    342e:	df 05       	cpc	r29, r15
    3430:	74 f0       	brlt	.+28     	; 0x344e <strtod+0x242>
    3432:	f8 01       	movw	r30, r16
    3434:	25 91       	lpm	r18, Z+
    3436:	35 91       	lpm	r19, Z+
    3438:	45 91       	lpm	r20, Z+
    343a:	54 91       	lpm	r21, Z
    343c:	c5 01       	movw	r24, r10
    343e:	b4 01       	movw	r22, r8
    3440:	0e 94 00 13 	call	0x2600	; 0x2600 <__mulsf3>
    3444:	4b 01       	movw	r8, r22
    3446:	5c 01       	movw	r10, r24
    3448:	ce 19       	sub	r28, r14
    344a:	df 09       	sbc	r29, r15
    344c:	ef cf       	rjmp	.-34     	; 0x342c <strtod+0x220>
    344e:	04 50       	subi	r16, 0x04	; 4
    3450:	11 09       	sbc	r17, r1
    3452:	f5 94       	asr	r15
    3454:	e7 94       	ror	r14
    3456:	0c 15       	cp	r16, r12
    3458:	1d 05       	cpc	r17, r13
    345a:	41 f7       	brne	.-48     	; 0x342c <strtod+0x220>
    345c:	8a 2d       	mov	r24, r10
    345e:	88 0f       	add	r24, r24
    3460:	8b 2d       	mov	r24, r11
    3462:	88 1f       	adc	r24, r24
    3464:	8f 3f       	cpi	r24, 0xFF	; 255
    3466:	49 f0       	breq	.+18     	; 0x347a <strtod+0x26e>
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	a9 01       	movw	r20, r18
    346e:	c5 01       	movw	r24, r10
    3470:	b4 01       	movw	r22, r8
    3472:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__cmpsf2>
    3476:	81 11       	cpse	r24, r1
    3478:	06 c0       	rjmp	.+12     	; 0x3486 <strtod+0x27a>
    347a:	82 e2       	ldi	r24, 0x22	; 34
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <errno>
    3482:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <errno+0x1>
    3486:	c5 01       	movw	r24, r10
    3488:	b4 01       	movw	r22, r8
    348a:	09 c0       	rjmp	.+18     	; 0x349e <strtod+0x292>
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	70 e0       	ldi	r23, 0x00	; 0
    3490:	80 e8       	ldi	r24, 0x80	; 128
    3492:	9f ef       	ldi	r25, 0xFF	; 255
    3494:	04 c0       	rjmp	.+8      	; 0x349e <strtod+0x292>
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	80 ec       	ldi	r24, 0xC0	; 192
    349c:	9f e7       	ldi	r25, 0x7F	; 127
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	ec e0       	ldi	r30, 0x0C	; 12
    34a4:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__epilogue_restores__+0xc>

000034a8 <isspace>:
    34a8:	91 11       	cpse	r25, r1
    34aa:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__ctype_isfalse>
    34ae:	80 32       	cpi	r24, 0x20	; 32
    34b0:	19 f0       	breq	.+6      	; 0x34b8 <isspace+0x10>
    34b2:	89 50       	subi	r24, 0x09	; 9
    34b4:	85 50       	subi	r24, 0x05	; 5
    34b6:	c8 f7       	brcc	.-14     	; 0x34aa <isspace+0x2>
    34b8:	08 95       	ret

000034ba <strncasecmp_P>:
    34ba:	fb 01       	movw	r30, r22
    34bc:	dc 01       	movw	r26, r24
    34be:	41 50       	subi	r20, 0x01	; 1
    34c0:	50 40       	sbci	r21, 0x00	; 0
    34c2:	88 f0       	brcs	.+34     	; 0x34e6 <strncasecmp_P+0x2c>
    34c4:	8d 91       	ld	r24, X+
    34c6:	81 34       	cpi	r24, 0x41	; 65
    34c8:	1c f0       	brlt	.+6      	; 0x34d0 <strncasecmp_P+0x16>
    34ca:	8b 35       	cpi	r24, 0x5B	; 91
    34cc:	0c f4       	brge	.+2      	; 0x34d0 <strncasecmp_P+0x16>
    34ce:	80 5e       	subi	r24, 0xE0	; 224
    34d0:	65 91       	lpm	r22, Z+
    34d2:	61 34       	cpi	r22, 0x41	; 65
    34d4:	1c f0       	brlt	.+6      	; 0x34dc <strncasecmp_P+0x22>
    34d6:	6b 35       	cpi	r22, 0x5B	; 91
    34d8:	0c f4       	brge	.+2      	; 0x34dc <strncasecmp_P+0x22>
    34da:	60 5e       	subi	r22, 0xE0	; 224
    34dc:	86 1b       	sub	r24, r22
    34de:	61 11       	cpse	r22, r1
    34e0:	71 f3       	breq	.-36     	; 0x34be <strncasecmp_P+0x4>
    34e2:	99 0b       	sbc	r25, r25
    34e4:	08 95       	ret
    34e6:	88 1b       	sub	r24, r24
    34e8:	fc cf       	rjmp	.-8      	; 0x34e2 <strncasecmp_P+0x28>

000034ea <__ctype_isfalse>:
    34ea:	99 27       	eor	r25, r25
    34ec:	88 27       	eor	r24, r24

000034ee <__ctype_istrue>:
    34ee:	08 95       	ret

000034f0 <__muluhisi3>:
    34f0:	0e 94 83 1a 	call	0x3506	; 0x3506 <__umulhisi3>
    34f4:	a5 9f       	mul	r26, r21
    34f6:	90 0d       	add	r25, r0
    34f8:	b4 9f       	mul	r27, r20
    34fa:	90 0d       	add	r25, r0
    34fc:	a4 9f       	mul	r26, r20
    34fe:	80 0d       	add	r24, r0
    3500:	91 1d       	adc	r25, r1
    3502:	11 24       	eor	r1, r1
    3504:	08 95       	ret

00003506 <__umulhisi3>:
    3506:	a2 9f       	mul	r26, r18
    3508:	b0 01       	movw	r22, r0
    350a:	b3 9f       	mul	r27, r19
    350c:	c0 01       	movw	r24, r0
    350e:	a3 9f       	mul	r26, r19
    3510:	70 0d       	add	r23, r0
    3512:	81 1d       	adc	r24, r1
    3514:	11 24       	eor	r1, r1
    3516:	91 1d       	adc	r25, r1
    3518:	b2 9f       	mul	r27, r18
    351a:	70 0d       	add	r23, r0
    351c:	81 1d       	adc	r24, r1
    351e:	11 24       	eor	r1, r1
    3520:	91 1d       	adc	r25, r1
    3522:	08 95       	ret

00003524 <_exit>:
    3524:	f8 94       	cli

00003526 <__stop_program>:
    3526:	ff cf       	rjmp	.-2      	; 0x3526 <__stop_program>
